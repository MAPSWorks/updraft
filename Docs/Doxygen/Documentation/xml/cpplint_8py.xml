<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.6">
  <compounddef id="cpplint_8py" kind="file">
    <compoundname>cpplint.py</compoundname>
    <innernamespace refid="namespacecpplint">cpplint</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1" refid="namespacecpplint" refkind="compound"><highlight class="comment">#!/usr/bin/python2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Copyright<sp/>(c)<sp/>2009<sp/>Google<sp/>Inc.<sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">#<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">#<sp/>met:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/>*<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">#<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/>*<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">#<sp/>copyright<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">#<sp/>in<sp/>the<sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">#<sp/>distribution.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/>*<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>Google<sp/>Inc.<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">#<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">#<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">#<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">#<sp/>&quot;AS<sp/>IS&quot;<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">#<sp/>LIMITED<sp/>TO,<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">#<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">#<sp/>OWNER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">#<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">#<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">#<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">#<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">#<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">#<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Here<sp/>are<sp/>some<sp/>issues<sp/>that<sp/>I&apos;ve<sp/>had<sp/>people<sp/>identify<sp/>in<sp/>my<sp/>code<sp/>during<sp/>reviews,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">#<sp/>that<sp/>I<sp/>think<sp/>are<sp/>possible<sp/>to<sp/>flag<sp/>automatically<sp/>in<sp/>a<sp/>lint<sp/>tool.<sp/><sp/>If<sp/>these<sp/>were</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">#<sp/>caught<sp/>by<sp/>lint,<sp/>it<sp/>would<sp/>save<sp/>time<sp/>both<sp/>for<sp/>myself<sp/>and<sp/>that<sp/>of<sp/>my<sp/>reviewers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Most<sp/>likely,<sp/>some<sp/>of<sp/>these<sp/>are<sp/>beyond<sp/>the<sp/>scope<sp/>of<sp/>the<sp/>current<sp/>lint<sp/>framework,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="comment">#<sp/>but<sp/>I<sp/>think<sp/>it<sp/>is<sp/>valuable<sp/>to<sp/>retain<sp/>these<sp/>wish-list<sp/>items<sp/>even<sp/>if<sp/>they<sp/>cannot</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="comment">#<sp/>be<sp/>immediately<sp/>implemented.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/>Suggestions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/>-----------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/>-<sp/>Check<sp/>for<sp/>no<sp/>&apos;explicit&apos;<sp/>for<sp/>multi-arg<sp/>ctor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/>-<sp/>Check<sp/>for<sp/>boolean<sp/>assign<sp/>RHS<sp/>in<sp/>parens</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/>-<sp/>Check<sp/>for<sp/>ctor<sp/>initializer-list<sp/>colon<sp/>position<sp/>and<sp/>spacing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/>-<sp/>Check<sp/>that<sp/>if<sp/>there&apos;s<sp/>a<sp/>ctor,<sp/>there<sp/>should<sp/>be<sp/>a<sp/>dtor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/>-<sp/>Check<sp/>accessors<sp/>that<sp/>return<sp/>non-pointer<sp/>member<sp/>variables<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/>declared<sp/>const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/>-<sp/>Check<sp/>accessors<sp/>that<sp/>return<sp/>non-const<sp/>pointer<sp/>member<sp/>vars<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/>*not*<sp/>declared<sp/>const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/>-<sp/>Check<sp/>for<sp/>using<sp/>public<sp/>includes<sp/>for<sp/>testing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/>-<sp/>Check<sp/>for<sp/>spaces<sp/>between<sp/>brackets<sp/>in<sp/>one-line<sp/>inline<sp/>method</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/>-<sp/>Check<sp/>for<sp/>no<sp/>assert()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/>-<sp/>Check<sp/>for<sp/>spaces<sp/>surrounding<sp/>operators</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/>-<sp/>Check<sp/>for<sp/>0<sp/>in<sp/>pointer<sp/>context<sp/>(should<sp/>be<sp/>NULL)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/>-<sp/>Check<sp/>for<sp/>0<sp/>in<sp/>char<sp/>context<sp/>(should<sp/>be<sp/>&apos;\0&apos;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/>-<sp/>Check<sp/>for<sp/>camel-case<sp/>method<sp/>name<sp/>conventions<sp/>for<sp/>methods</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/>that<sp/>are<sp/>not<sp/>simple<sp/>inline<sp/>getters<sp/>and<sp/>setters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/>-<sp/>Check<sp/>that<sp/>base<sp/>classes<sp/>have<sp/>virtual<sp/>destructors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/>put<sp/>&quot;<sp/><sp/>//<sp/>namespace&quot;<sp/>after<sp/>}<sp/>that<sp/>closes<sp/>a<sp/>namespace,<sp/>with</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/>namespace&apos;s<sp/>name<sp/>after<sp/>&apos;namespace&apos;<sp/>if<sp/>it<sp/>is<sp/>named.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/>-<sp/>Do<sp/>not<sp/>indent<sp/>namespace<sp/>contents</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/>-<sp/>Avoid<sp/>inlining<sp/>non-trivial<sp/>constructors<sp/>in<sp/>header<sp/>files</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/>include<sp/>base/basictypes.h<sp/>if<sp/>DISALLOW_EVIL_CONSTRUCTORS<sp/>is<sp/>used</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/>-<sp/>Check<sp/>for<sp/>old-school<sp/>(void)<sp/>cast<sp/>for<sp/>call-sites<sp/>of<sp/>functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/>ignored<sp/>return<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/>-<sp/>Check<sp/>gUnit<sp/>usage<sp/>of<sp/>anonymous<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/>-<sp/>Check<sp/>for<sp/>class<sp/>declaration<sp/>order<sp/>(typedefs,<sp/>consts,<sp/>enums,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/>ctor(s?),<sp/>dtor,<sp/>friend<sp/>declarations,<sp/>methods,<sp/>member<sp/>vars)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;&quot;&quot;Does<sp/>google-lint<sp/>on<sp/>c++<sp/>files.</highlight></codeline>
<codeline lineno="70"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="71"><highlight class="stringliteral">The<sp/>goal<sp/>of<sp/>this<sp/>script<sp/>is<sp/>to<sp/>identify<sp/>places<sp/>in<sp/>the<sp/>code<sp/>that<sp/>*may*</highlight></codeline>
<codeline lineno="72"><highlight class="stringliteral">be<sp/>in<sp/>non-compliance<sp/>with<sp/>google<sp/>style.<sp/><sp/>It<sp/>does<sp/>not<sp/>attempt<sp/>to<sp/>fix</highlight></codeline>
<codeline lineno="73"><highlight class="stringliteral">up<sp/>these<sp/>problems<sp/>--<sp/>the<sp/>point<sp/>is<sp/>to<sp/>educate.<sp/><sp/>It<sp/>does<sp/>also<sp/>not</highlight></codeline>
<codeline lineno="74"><highlight class="stringliteral">attempt<sp/>to<sp/>find<sp/>all<sp/>problems,<sp/>or<sp/>to<sp/>ensure<sp/>that<sp/>everything<sp/>it<sp/>does</highlight></codeline>
<codeline lineno="75"><highlight class="stringliteral">find<sp/>is<sp/>legitimately<sp/>a<sp/>problem.</highlight></codeline>
<codeline lineno="76"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="77"><highlight class="stringliteral">In<sp/>particular,<sp/>we<sp/>can<sp/>get<sp/>very<sp/>confused<sp/>by<sp/>/*<sp/>and<sp/>//<sp/>inside<sp/>strings!</highlight></codeline>
<codeline lineno="78"><highlight class="stringliteral">We<sp/>do<sp/>a<sp/>small<sp/>hack,<sp/>which<sp/>is<sp/>to<sp/>ignore<sp/>//&apos;s<sp/>with<sp/>&quot;&apos;s<sp/>after<sp/>them<sp/>on<sp/>the</highlight></codeline>
<codeline lineno="79"><highlight class="stringliteral">same<sp/>line,<sp/>but<sp/>it<sp/>is<sp/>far<sp/>from<sp/>perfect<sp/>(in<sp/>either<sp/>direction).</highlight></codeline>
<codeline lineno="80"><highlight class="stringliteral">&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>codecs</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>getopt</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>math<sp/><sp/></highlight><highlight class="comment">#<sp/>for<sp/>log</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>os</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>re</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>sre_compile</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>string</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>sys</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>unicodedata</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal">_USAGE<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="94"><highlight class="stringliteral">Syntax:<sp/>cpplint.py<sp/>[--verbose=#]<sp/>[--output=vs7]<sp/>[--filter=-x,+y,...]</highlight></codeline>
<codeline lineno="95"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[--counting=total|toplevel|detailed]</highlight></codeline>
<codeline lineno="96"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;file&gt;<sp/>[file]<sp/>...</highlight></codeline>
<codeline lineno="97"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="98"><highlight class="stringliteral"><sp/><sp/>The<sp/>style<sp/>guidelines<sp/>this<sp/>tries<sp/>to<sp/>follow<sp/>are<sp/>those<sp/>in</highlight></codeline>
<codeline lineno="99"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>http://google-styleguide.googlecode.com/svn/trunk/cppguide.xml</highlight></codeline>
<codeline lineno="100"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="101"><highlight class="stringliteral"><sp/><sp/>Every<sp/>problem<sp/>is<sp/>given<sp/>a<sp/>confidence<sp/>score<sp/>from<sp/>1-5,<sp/>with<sp/>5<sp/>meaning<sp/>we<sp/>are</highlight></codeline>
<codeline lineno="102"><highlight class="stringliteral"><sp/><sp/>certain<sp/>of<sp/>the<sp/>problem,<sp/>and<sp/>1<sp/>meaning<sp/>it<sp/>could<sp/>be<sp/>a<sp/>legitimate<sp/>construct.</highlight></codeline>
<codeline lineno="103"><highlight class="stringliteral"><sp/><sp/>This<sp/>will<sp/>miss<sp/>some<sp/>errors,<sp/>and<sp/>is<sp/>not<sp/>a<sp/>substitute<sp/>for<sp/>a<sp/>code<sp/>review.</highlight></codeline>
<codeline lineno="104"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="105"><highlight class="stringliteral"><sp/><sp/>To<sp/>suppress<sp/>false-positive<sp/>errors<sp/>of<sp/>a<sp/>certain<sp/>category,<sp/>add<sp/>a</highlight></codeline>
<codeline lineno="106"><highlight class="stringliteral"><sp/><sp/>&apos;NOLINT(category)&apos;<sp/>comment<sp/>to<sp/>the<sp/>line.<sp/><sp/>NOLINT<sp/>or<sp/>NOLINT(*)</highlight></codeline>
<codeline lineno="107"><highlight class="stringliteral"><sp/><sp/>suppresses<sp/>errors<sp/>of<sp/>all<sp/>categories<sp/>on<sp/>that<sp/>line.</highlight></codeline>
<codeline lineno="108"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="109"><highlight class="stringliteral"><sp/><sp/>The<sp/>files<sp/>passed<sp/>in<sp/>will<sp/>be<sp/>linted;<sp/>at<sp/>least<sp/>one<sp/>file<sp/>must<sp/>be<sp/>provided.</highlight></codeline>
<codeline lineno="110"><highlight class="stringliteral"><sp/><sp/>Linted<sp/>extensions<sp/>are<sp/>.cc,<sp/>.cpp,<sp/>and<sp/>.h.<sp/><sp/>Other<sp/>file<sp/>types<sp/>will<sp/>be<sp/>ignored.</highlight></codeline>
<codeline lineno="111"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="112"><highlight class="stringliteral"><sp/><sp/>Flags:</highlight></codeline>
<codeline lineno="113"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="114"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>output=vs7</highlight></codeline>
<codeline lineno="115"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>By<sp/>default,<sp/>the<sp/>output<sp/>is<sp/>formatted<sp/>to<sp/>ease<sp/>emacs<sp/>parsing.<sp/><sp/>Visual<sp/>Studio</highlight></codeline>
<codeline lineno="116"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>compatible<sp/>output<sp/>(vs7)<sp/>may<sp/>also<sp/>be<sp/>used.<sp/><sp/>Other<sp/>formats<sp/>are<sp/>unsupported.</highlight></codeline>
<codeline lineno="117"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="118"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>verbose=#</highlight></codeline>
<codeline lineno="119"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>Specify<sp/>a<sp/>number<sp/>0-5<sp/>to<sp/>restrict<sp/>errors<sp/>to<sp/>certain<sp/>verbosity<sp/>levels.</highlight></codeline>
<codeline lineno="120"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="121"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>filter=-x,+y,...</highlight></codeline>
<codeline lineno="122"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>Specify<sp/>a<sp/>comma-separated<sp/>list<sp/>of<sp/>category-filters<sp/>to<sp/>apply:<sp/>only</highlight></codeline>
<codeline lineno="123"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>error<sp/>messages<sp/>whose<sp/>category<sp/>names<sp/>pass<sp/>the<sp/>filters<sp/>will<sp/>be<sp/>printed.</highlight></codeline>
<codeline lineno="124"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>(Category<sp/>names<sp/>are<sp/>printed<sp/>with<sp/>the<sp/>message<sp/>and<sp/>look<sp/>like</highlight></codeline>
<codeline lineno="125"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>&quot;[whitespace/indent]&quot;.)<sp/><sp/>Filters<sp/>are<sp/>evaluated<sp/>left<sp/>to<sp/>right.</highlight></codeline>
<codeline lineno="126"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>&quot;-FOO&quot;<sp/>and<sp/>&quot;FOO&quot;<sp/>means<sp/>&quot;do<sp/>not<sp/>print<sp/>categories<sp/>that<sp/>start<sp/>with<sp/>FOO&quot;.</highlight></codeline>
<codeline lineno="127"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>&quot;+FOO&quot;<sp/>means<sp/>&quot;do<sp/>print<sp/>categories<sp/>that<sp/>start<sp/>with<sp/>FOO&quot;.</highlight></codeline>
<codeline lineno="128"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="129"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>Examples:<sp/>--filter=-whitespace,+whitespace/braces</highlight></codeline>
<codeline lineno="130"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--filter=whitespace,runtime/printf,+runtime/printf_format</highlight></codeline>
<codeline lineno="131"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--filter=-,+build/include_what_you_use</highlight></codeline>
<codeline lineno="132"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="133"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>To<sp/>see<sp/>a<sp/>list<sp/>of<sp/>all<sp/>the<sp/>categories<sp/>used<sp/>in<sp/>cpplint,<sp/>pass<sp/>no<sp/>arg:</highlight></codeline>
<codeline lineno="134"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--filter=</highlight></codeline>
<codeline lineno="135"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="136"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>counting=total|toplevel|detailed</highlight></codeline>
<codeline lineno="137"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>total<sp/>number<sp/>of<sp/>errors<sp/>found<sp/>is<sp/>always<sp/>printed.<sp/>If</highlight></codeline>
<codeline lineno="138"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>&apos;toplevel&apos;<sp/>is<sp/>provided,<sp/>then<sp/>the<sp/>count<sp/>of<sp/>errors<sp/>in<sp/>each<sp/>of</highlight></codeline>
<codeline lineno="139"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>top-level<sp/>categories<sp/>like<sp/>&apos;build&apos;<sp/>and<sp/>&apos;whitespace&apos;<sp/>will</highlight></codeline>
<codeline lineno="140"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>also<sp/>be<sp/>printed.<sp/>If<sp/>&apos;detailed&apos;<sp/>is<sp/>provided,<sp/>then<sp/>a<sp/>count</highlight></codeline>
<codeline lineno="141"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>is<sp/>provided<sp/>for<sp/>each<sp/>category<sp/>like<sp/>&apos;build/class&apos;.</highlight></codeline>
<codeline lineno="142"><highlight class="stringliteral">&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="comment">#<sp/>We<sp/>categorize<sp/>each<sp/>error<sp/>message<sp/>we<sp/>print.<sp/><sp/>Here<sp/>are<sp/>the<sp/>categories.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="comment">#<sp/>We<sp/>want<sp/>an<sp/>explicit<sp/>list<sp/>so<sp/>we<sp/>can<sp/>list<sp/>them<sp/>all<sp/>in<sp/>cpplint<sp/>--filter=.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="comment">#<sp/>If<sp/>you<sp/>add<sp/>a<sp/>new<sp/>error<sp/>message<sp/>with<sp/>a<sp/>new<sp/>category,<sp/>add<sp/>it<sp/>to<sp/>the<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="comment">#<sp/>here!<sp/><sp/>cpplint_unittest.py<sp/>should<sp/>tell<sp/>you<sp/>if<sp/>you<sp/>forget<sp/>to<sp/>do<sp/>this.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="comment">#<sp/>\<sp/>used<sp/>for<sp/>clearer<sp/>layout<sp/>--<sp/>pylint:<sp/>disable-msg=C6013</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal">_ERROR_CATEGORIES<sp/>=<sp/>[</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&apos;build/class&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&apos;build/deprecated&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&apos;build/endif_comment&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&apos;build/explicit_make_pair&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&apos;build/forward_decl&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&apos;build/header_guard&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&apos;build/include&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&apos;build/include_alpha&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&apos;build/include_order&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&apos;build/include_what_you_use&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&apos;build/namespaces&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&apos;build/printf_format&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&apos;build/storage_class&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&apos;legal/copyright&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&apos;readability/braces&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&apos;readability/casting&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&apos;readability/check&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&apos;readability/constructors&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&apos;readability/fn_size&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&apos;readability/function&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&apos;readability/multiline_comment&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&apos;readability/multiline_string&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&apos;readability/nolint&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&apos;readability/streams&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&apos;readability/todo&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&apos;readability/utf8&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&apos;runtime/arrays&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&apos;runtime/casting&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&apos;runtime/explicit&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&apos;runtime/int&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&apos;runtime/init&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&apos;runtime/invalid_increment&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&apos;runtime/member_string_references&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&apos;runtime/memset&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&apos;runtime/operator&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&apos;runtime/printf&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&apos;runtime/printf_format&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&apos;runtime/references&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&apos;runtime/rtti&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&apos;runtime/sizeof&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&apos;runtime/string&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&apos;runtime/threadsafe_fn&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&apos;runtime/virtual&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&apos;whitespace/blank_line&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&apos;whitespace/braces&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&apos;whitespace/comma&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&apos;whitespace/comments&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&apos;whitespace/end_of_line&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&apos;whitespace/ending_newline&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&apos;whitespace/indent&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&apos;whitespace/labels&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&apos;whitespace/line_length&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&apos;whitespace/newline&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&apos;whitespace/operators&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&apos;whitespace/parens&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&apos;whitespace/semicolon&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&apos;whitespace/tab&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&apos;whitespace/todo&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/>]</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight><highlight class="comment">#<sp/>The<sp/>default<sp/>state<sp/>of<sp/>the<sp/>category<sp/>filter.<sp/>This<sp/>is<sp/>overrided<sp/>by<sp/>the<sp/>--filter=</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight><highlight class="comment">#<sp/>flag.<sp/>By<sp/>default<sp/>all<sp/>errors<sp/>are<sp/>on,<sp/>so<sp/>only<sp/>add<sp/>here<sp/>categories<sp/>that<sp/>should<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight><highlight class="comment">#<sp/>off<sp/>by<sp/>default<sp/>(i.e.,<sp/>categories<sp/>that<sp/>must<sp/>be<sp/>enabled<sp/>by<sp/>the<sp/>--filter=<sp/>flags).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight><highlight class="comment">#<sp/>All<sp/>entries<sp/>here<sp/>should<sp/>start<sp/>with<sp/>a<sp/>&apos;-&apos;<sp/>or<sp/>&apos;+&apos;,<sp/>as<sp/>in<sp/>the<sp/>--filter=<sp/>flag.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal">_DEFAULT_FILTERS<sp/>=<sp/>[</highlight><highlight class="stringliteral">&apos;-build/include_alpha&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight><highlight class="comment">#<sp/>We<sp/>used<sp/>to<sp/>check<sp/>for<sp/>high-bit<sp/>characters,<sp/>but<sp/>after<sp/>much<sp/>discussion<sp/>we</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight><highlight class="comment">#<sp/>decided<sp/>those<sp/>were<sp/>OK,<sp/>as<sp/>long<sp/>as<sp/>they<sp/>were<sp/>in<sp/>UTF-8<sp/>and<sp/>didn&apos;t<sp/>represent</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight><highlight class="comment">#<sp/>hard-coded<sp/>international<sp/>strings,<sp/>which<sp/>belong<sp/>in<sp/>a<sp/>separate<sp/>i18n<sp/>file.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Headers<sp/>that<sp/>we<sp/>consider<sp/>STL<sp/>headers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal">_STL_HEADERS<sp/>=<sp/>frozenset([</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;algobase.h&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;algorithm&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;alloc.h&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;bitset&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;deque&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;exception&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;function.h&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;functional&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;hash_map&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;hash_map.h&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;hash_set&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;hash_set.h&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;iterator&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;list&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;list.h&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;map&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;memory&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;new&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;pair.h&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;pthread_alloc&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;queue&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;set&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;set.h&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;sstream&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;stack&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;stl_alloc.h&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;stl_relops.h&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;type_traits.h&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;utility&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;vector&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;vector.h&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>])</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Non-STL<sp/>C++<sp/>system<sp/>headers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal">_CPP_HEADERS<sp/>=<sp/>frozenset([</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;algo.h&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;builtinbuf.h&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;bvector.h&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;cassert&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;cctype&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;cerrno&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;cfloat&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;ciso646&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;climits&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;clocale&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;cmath&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;complex&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;complex.h&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;csetjmp&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;csignal&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;cstdarg&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;cstddef&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;cstdio&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;cstdlib&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;cstring&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;ctime&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;cwchar&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;cwctype&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;defalloc.h&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;deque.h&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;editbuf.h&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;exception&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;fstream&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;fstream.h&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;hashtable.h&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;heap.h&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;indstream.h&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;iomanip&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;iomanip.h&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;ios&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;iosfwd&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;iostream&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;iostream.h&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;istream&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;istream.h&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;iterator.h&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;limits&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;map.h&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;multimap.h&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;multiset.h&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;numeric&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;ostream&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;ostream.h&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;parsestream.h&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;pfstream.h&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;PlotFile.h&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;procbuf.h&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;pthread_alloc.h&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;rope&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;rope.h&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;ropeimpl.h&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;SFile.h&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;slist&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;slist.h&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;stack.h&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;stdexcept&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;stdiostream.h&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;streambuf.h&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;stream.h&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;strfile.h&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;string&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;strstream&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;strstream.h&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;tempbuf.h&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;tree.h&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;typeinfo&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;valarray&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/>])</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Assertion<sp/>macros.<sp/><sp/>These<sp/>are<sp/>defined<sp/>in<sp/>base/logging.h<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight><highlight class="comment">#<sp/>testing/base/gunit.h.<sp/><sp/>Note<sp/>that<sp/>the<sp/>_M<sp/>versions<sp/>need<sp/>to<sp/>come<sp/>first</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight><highlight class="comment">#<sp/>for<sp/>substring<sp/>matching<sp/>to<sp/>work.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal">_CHECK_MACROS<sp/>=<sp/>[</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;DCHECK&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;CHECK&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;EXPECT_TRUE_M&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;EXPECT_TRUE&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;ASSERT_TRUE_M&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;ASSERT_TRUE&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;EXPECT_FALSE_M&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;EXPECT_FALSE&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;ASSERT_FALSE_M&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;ASSERT_FALSE&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>]</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Replacement<sp/>macros<sp/>for<sp/>CHECK/DCHECK/EXPECT_TRUE/EXPECT_FALSE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal">_CHECK_REPLACEMENT<sp/>=<sp/>dict([(m,<sp/>{})<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>m<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>_CHECK_MACROS])</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>op,<sp/>replacement<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>[(</highlight><highlight class="stringliteral">&apos;==&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;EQ&apos;</highlight><highlight class="normal">),<sp/>(</highlight><highlight class="stringliteral">&apos;!=&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;NE&apos;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="stringliteral">&apos;&gt;=&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;GE&apos;</highlight><highlight class="normal">),<sp/>(</highlight><highlight class="stringliteral">&apos;&gt;&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;GT&apos;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="stringliteral">&apos;&lt;=&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;LE&apos;</highlight><highlight class="normal">),<sp/>(</highlight><highlight class="stringliteral">&apos;&lt;&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;LT&apos;</highlight><highlight class="normal">)]:</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/>_CHECK_REPLACEMENT[</highlight><highlight class="stringliteral">&apos;DCHECK&apos;</highlight><highlight class="normal">][op]<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;DCHECK_%s&apos;</highlight><highlight class="normal"><sp/>%<sp/>replacement</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/>_CHECK_REPLACEMENT[</highlight><highlight class="stringliteral">&apos;CHECK&apos;</highlight><highlight class="normal">][op]<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;CHECK_%s&apos;</highlight><highlight class="normal"><sp/>%<sp/>replacement</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/>_CHECK_REPLACEMENT[</highlight><highlight class="stringliteral">&apos;EXPECT_TRUE&apos;</highlight><highlight class="normal">][op]<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;EXPECT_%s&apos;</highlight><highlight class="normal"><sp/>%<sp/>replacement</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/>_CHECK_REPLACEMENT[</highlight><highlight class="stringliteral">&apos;ASSERT_TRUE&apos;</highlight><highlight class="normal">][op]<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;ASSERT_%s&apos;</highlight><highlight class="normal"><sp/>%<sp/>replacement</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/>_CHECK_REPLACEMENT[</highlight><highlight class="stringliteral">&apos;EXPECT_TRUE_M&apos;</highlight><highlight class="normal">][op]<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;EXPECT_%s_M&apos;</highlight><highlight class="normal"><sp/>%<sp/>replacement</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/>_CHECK_REPLACEMENT[</highlight><highlight class="stringliteral">&apos;ASSERT_TRUE_M&apos;</highlight><highlight class="normal">][op]<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;ASSERT_%s_M&apos;</highlight><highlight class="normal"><sp/>%<sp/>replacement</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>op,<sp/>inv_replacement<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>[(</highlight><highlight class="stringliteral">&apos;==&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;NE&apos;</highlight><highlight class="normal">),<sp/>(</highlight><highlight class="stringliteral">&apos;!=&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;EQ&apos;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="stringliteral">&apos;&gt;=&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;LT&apos;</highlight><highlight class="normal">),<sp/>(</highlight><highlight class="stringliteral">&apos;&gt;&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;LE&apos;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="stringliteral">&apos;&lt;=&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;GT&apos;</highlight><highlight class="normal">),<sp/>(</highlight><highlight class="stringliteral">&apos;&lt;&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;GE&apos;</highlight><highlight class="normal">)]:</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/>_CHECK_REPLACEMENT[</highlight><highlight class="stringliteral">&apos;EXPECT_FALSE&apos;</highlight><highlight class="normal">][op]<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;EXPECT_%s&apos;</highlight><highlight class="normal"><sp/>%<sp/>inv_replacement</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/>_CHECK_REPLACEMENT[</highlight><highlight class="stringliteral">&apos;ASSERT_FALSE&apos;</highlight><highlight class="normal">][op]<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;ASSERT_%s&apos;</highlight><highlight class="normal"><sp/>%<sp/>inv_replacement</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/>_CHECK_REPLACEMENT[</highlight><highlight class="stringliteral">&apos;EXPECT_FALSE_M&apos;</highlight><highlight class="normal">][op]<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;EXPECT_%s_M&apos;</highlight><highlight class="normal"><sp/>%<sp/>inv_replacement</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/>_CHECK_REPLACEMENT[</highlight><highlight class="stringliteral">&apos;ASSERT_FALSE_M&apos;</highlight><highlight class="normal">][op]<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;ASSERT_%s_M&apos;</highlight><highlight class="normal"><sp/>%<sp/>inv_replacement</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight><highlight class="comment">#<sp/>These<sp/>constants<sp/>define<sp/>types<sp/>of<sp/>headers<sp/>for<sp/>use<sp/>with</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight><highlight class="comment">#<sp/>_IncludeState.CheckNextIncludeOrder().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal">_C_SYS_HEADER<sp/>=<sp/>1</highlight></codeline>
<codeline lineno="285"><highlight class="normal">_CPP_SYS_HEADER<sp/>=<sp/>2</highlight></codeline>
<codeline lineno="286"><highlight class="normal">_LIKELY_MY_HEADER<sp/>=<sp/>3</highlight></codeline>
<codeline lineno="287"><highlight class="normal">_POSSIBLE_MY_HEADER<sp/>=<sp/>4</highlight></codeline>
<codeline lineno="288"><highlight class="normal">_OTHER_HEADER<sp/>=<sp/>5</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal">_regexp_compile_cache<sp/>=<sp/>{}</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Finds<sp/>occurrences<sp/>of<sp/>NOLINT<sp/>or<sp/>NOLINT(...).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal">_RE_SUPPRESSION<sp/>=<sp/>re.compile(</highlight><highlight class="stringliteral">r&apos;\bNOLINT\b(\([^)]*\))?&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight><highlight class="comment">#<sp/>{str,<sp/>set(int)}:<sp/>a<sp/>map<sp/>from<sp/>error<sp/>categories<sp/>to<sp/>sets<sp/>of<sp/>linenumbers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight><highlight class="comment">#<sp/>on<sp/>which<sp/>those<sp/>errors<sp/>are<sp/>expected<sp/>and<sp/>should<sp/>be<sp/>suppressed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal">_error_suppressions<sp/>=<sp/>{}</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">ParseNolintSuppressions(filename,<sp/>raw_line,<sp/>linenum,<sp/>error):</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Updates<sp/>the<sp/>global<sp/>list<sp/>of<sp/>error-suppressions.</highlight></codeline>
<codeline lineno="302"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="303"><highlight class="stringliteral"><sp/><sp/>Parses<sp/>any<sp/>NOLINT<sp/>comments<sp/>on<sp/>the<sp/>current<sp/>line,<sp/>updating<sp/>the<sp/>global</highlight></codeline>
<codeline lineno="304"><highlight class="stringliteral"><sp/><sp/>error_suppressions<sp/>store.<sp/><sp/>Reports<sp/>an<sp/>error<sp/>if<sp/>the<sp/>NOLINT<sp/>comment</highlight></codeline>
<codeline lineno="305"><highlight class="stringliteral"><sp/><sp/>was<sp/>malformed.</highlight></codeline>
<codeline lineno="306"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="307"><highlight class="stringliteral"><sp/><sp/>Args:</highlight></codeline>
<codeline lineno="308"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>filename:<sp/>str,<sp/>the<sp/>name<sp/>of<sp/>the<sp/>input<sp/>file.</highlight></codeline>
<codeline lineno="309"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>raw_line:<sp/>str,<sp/>the<sp/>line<sp/>of<sp/>input<sp/>text,<sp/>with<sp/>comments.</highlight></codeline>
<codeline lineno="310"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>linenum:<sp/>int,<sp/>the<sp/>number<sp/>of<sp/>the<sp/>current<sp/>line.</highlight></codeline>
<codeline lineno="311"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>error:<sp/>function,<sp/>an<sp/>error<sp/>handler.</highlight></codeline>
<codeline lineno="312"><highlight class="stringliteral"><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>FIXME(adonovan):<sp/>&quot;NOLINT(&quot;<sp/>is<sp/>misparsed<sp/>as<sp/>NOLINT(*).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/>matched<sp/>=<sp/>_RE_SUPPRESSION.search(raw_line)</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>matched:</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/>category<sp/>=<sp/>matched.group(1)</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>category<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">None</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;(*)&apos;</highlight><highlight class="normal">):<sp/><sp/></highlight><highlight class="comment">#<sp/>=&gt;<sp/>&quot;suppress<sp/>all&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_error_suppressions.setdefault(</highlight><highlight class="keywordtype">None</highlight><highlight class="normal">,<sp/>set()).add(linenum)</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>category.startswith(</highlight><highlight class="stringliteral">&apos;(&apos;</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>category.endswith(</highlight><highlight class="stringliteral">&apos;)&apos;</highlight><highlight class="normal">):</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>category<sp/>=<sp/>category[1:-1]</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>category<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>_ERROR_CATEGORIES:</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_error_suppressions.setdefault(category,<sp/>set()).add(linenum)</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error(filename,<sp/>linenum,<sp/></highlight><highlight class="stringliteral">&apos;readability/nolint&apos;</highlight><highlight class="normal">,<sp/>5,</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;Unknown<sp/>NOLINT<sp/>error<sp/>category:<sp/>%s&apos;</highlight><highlight class="normal"><sp/>%<sp/>category)</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">ResetNolintSuppressions():</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;Resets<sp/>the<sp/>set<sp/>of<sp/>NOLINT<sp/>suppressions<sp/>to<sp/>empty.&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/>_error_suppressions.clear()</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">IsErrorSuppressedByNolint(category,<sp/>linenum):</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Returns<sp/>true<sp/>if<sp/>the<sp/>specified<sp/>error<sp/>category<sp/>is<sp/>suppressed<sp/>on<sp/>this<sp/>line.</highlight></codeline>
<codeline lineno="336"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="337"><highlight class="stringliteral"><sp/><sp/>Consults<sp/>the<sp/>global<sp/>error_suppressions<sp/>map<sp/>populated<sp/>by</highlight></codeline>
<codeline lineno="338"><highlight class="stringliteral"><sp/><sp/>ParseNolintSuppressions/ResetNolintSuppressions.</highlight></codeline>
<codeline lineno="339"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="340"><highlight class="stringliteral"><sp/><sp/>Args:</highlight></codeline>
<codeline lineno="341"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>category:<sp/>str,<sp/>the<sp/>category<sp/>of<sp/>the<sp/>error.</highlight></codeline>
<codeline lineno="342"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>linenum:<sp/>int,<sp/>the<sp/>current<sp/>line<sp/>number.</highlight></codeline>
<codeline lineno="343"><highlight class="stringliteral"><sp/><sp/>Returns:</highlight></codeline>
<codeline lineno="344"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>bool,<sp/>True<sp/>iff<sp/>the<sp/>error<sp/>should<sp/>be<sp/>suppressed<sp/>due<sp/>to<sp/>a<sp/>NOLINT<sp/>comment.</highlight></codeline>
<codeline lineno="345"><highlight class="stringliteral"><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(linenum<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>_error_suppressions.get(category,<sp/>set())<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>linenum<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>_error_suppressions.get(</highlight><highlight class="keywordtype">None</highlight><highlight class="normal">,<sp/>set()))</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">Match(pattern,<sp/>s):</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Matches<sp/>the<sp/>string<sp/>with<sp/>the<sp/>pattern,<sp/>caching<sp/>the<sp/>compiled<sp/>regexp.&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>The<sp/>regexp<sp/>compilation<sp/>caching<sp/>is<sp/>inlined<sp/>in<sp/>both<sp/>Match<sp/>and<sp/>Search<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>performance<sp/>reasons;<sp/>factoring<sp/>it<sp/>out<sp/>into<sp/>a<sp/>separate<sp/>function<sp/>turns<sp/>out</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>to<sp/>be<sp/>noticeably<sp/>expensive.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>pattern<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>_regexp_compile_cache:</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/>_regexp_compile_cache[pattern]<sp/>=<sp/>sre_compile.compile(pattern)</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_regexp_compile_cache[pattern].match(s)</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">Search(pattern,<sp/>s):</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Searches<sp/>the<sp/>string<sp/>for<sp/>the<sp/>pattern,<sp/>caching<sp/>the<sp/>compiled<sp/>regexp.&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>pattern<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>_regexp_compile_cache:</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/>_regexp_compile_cache[pattern]<sp/>=<sp/>sre_compile.compile(pattern)</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_regexp_compile_cache[pattern].search(s)</highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">_IncludeState(dict):</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Tracks<sp/>line<sp/>numbers<sp/>for<sp/>includes,<sp/>and<sp/>the<sp/>order<sp/>in<sp/>which<sp/>includes<sp/>appear.</highlight></codeline>
<codeline lineno="368"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="369"><highlight class="stringliteral"><sp/><sp/>As<sp/>a<sp/>dict,<sp/>an<sp/>_IncludeState<sp/>object<sp/>serves<sp/>as<sp/>a<sp/>mapping<sp/>between<sp/>include</highlight></codeline>
<codeline lineno="370"><highlight class="stringliteral"><sp/><sp/>filename<sp/>and<sp/>line<sp/>number<sp/>on<sp/>which<sp/>that<sp/>file<sp/>was<sp/>included.</highlight></codeline>
<codeline lineno="371"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="372"><highlight class="stringliteral"><sp/><sp/>Call<sp/>CheckNextIncludeOrder()<sp/>once<sp/>for<sp/>each<sp/>header<sp/>in<sp/>the<sp/>file,<sp/>passing</highlight></codeline>
<codeline lineno="373"><highlight class="stringliteral"><sp/><sp/>in<sp/>the<sp/>type<sp/>constants<sp/>defined<sp/>above.<sp/>Calls<sp/>in<sp/>an<sp/>illegal<sp/>order<sp/>will</highlight></codeline>
<codeline lineno="374"><highlight class="stringliteral"><sp/><sp/>raise<sp/>an<sp/>_IncludeError<sp/>with<sp/>an<sp/>appropriate<sp/>error<sp/>message.</highlight></codeline>
<codeline lineno="375"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="376"><highlight class="stringliteral"><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>self._section<sp/>will<sp/>move<sp/>monotonically<sp/>through<sp/>this<sp/>set.<sp/>If<sp/>it<sp/>ever</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>needs<sp/>to<sp/>move<sp/>backwards,<sp/>CheckNextIncludeOrder<sp/>will<sp/>raise<sp/>an<sp/>error.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/>_INITIAL_SECTION<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/>_MY_H_SECTION<sp/>=<sp/>1</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/>_C_SECTION<sp/>=<sp/>2</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/>_CPP_SECTION<sp/>=<sp/>3</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/>_OTHER_H_SECTION<sp/>=<sp/>4</highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/>_TYPE_NAMES<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_C_SYS_HEADER:<sp/></highlight><highlight class="stringliteral">&apos;C<sp/>system<sp/>header&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_CPP_SYS_HEADER:<sp/></highlight><highlight class="stringliteral">&apos;C++<sp/>system<sp/>header&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_LIKELY_MY_HEADER:<sp/></highlight><highlight class="stringliteral">&apos;header<sp/>this<sp/>file<sp/>implements&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_POSSIBLE_MY_HEADER:<sp/></highlight><highlight class="stringliteral">&apos;header<sp/>this<sp/>file<sp/>may<sp/>implement&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_OTHER_HEADER:<sp/></highlight><highlight class="stringliteral">&apos;other<sp/>header&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/>_SECTION_NAMES<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_INITIAL_SECTION:<sp/></highlight><highlight class="stringliteral">&quot;...<sp/>nothing.<sp/>(This<sp/>can&apos;t<sp/>be<sp/>an<sp/>error.)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_MY_H_SECTION:<sp/></highlight><highlight class="stringliteral">&apos;a<sp/>header<sp/>this<sp/>file<sp/>implements&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_C_SECTION:<sp/></highlight><highlight class="stringliteral">&apos;C<sp/>system<sp/>header&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_CPP_SECTION:<sp/></highlight><highlight class="stringliteral">&apos;C++<sp/>system<sp/>header&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_OTHER_H_SECTION:<sp/></highlight><highlight class="stringliteral">&apos;other<sp/>header&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">__init__(self):</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/>dict.__init__(self)</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>The<sp/>name<sp/>of<sp/>the<sp/>current<sp/>section.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/>self._section<sp/>=<sp/>self._INITIAL_SECTION</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>The<sp/>path<sp/>of<sp/>last<sp/>found<sp/>header.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/>self._last_header<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">CanonicalizeAlphabeticalOrder(self,<sp/>header_path):</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Returns<sp/>a<sp/>path<sp/>canonicalized<sp/>for<sp/>alphabetical<sp/>comparison.</highlight></codeline>
<codeline lineno="409"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="410"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>-<sp/>replaces<sp/>&quot;-&quot;<sp/>with<sp/>&quot;_&quot;<sp/>so<sp/>they<sp/>both<sp/>cmp<sp/>the<sp/>same.</highlight></codeline>
<codeline lineno="411"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>-<sp/>removes<sp/>&apos;-inl&apos;<sp/>since<sp/>we<sp/>don&apos;t<sp/>require<sp/>them<sp/>to<sp/>be<sp/>after<sp/>the<sp/>main<sp/>header.</highlight></codeline>
<codeline lineno="412"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>-<sp/>lowercase<sp/>everything,<sp/>just<sp/>in<sp/>case.</highlight></codeline>
<codeline lineno="413"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="414"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Args:</highlight></codeline>
<codeline lineno="415"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>header_path:<sp/>Path<sp/>to<sp/>be<sp/>canonicalized.</highlight></codeline>
<codeline lineno="416"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="417"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Returns:</highlight></codeline>
<codeline lineno="418"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>Canonicalized<sp/>path.</highlight></codeline>
<codeline lineno="419"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>header_path.replace(</highlight><highlight class="stringliteral">&apos;-inl.h&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;.h&apos;</highlight><highlight class="normal">).replace(</highlight><highlight class="stringliteral">&apos;-&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;_&apos;</highlight><highlight class="normal">).lower()</highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">IsInAlphabeticalOrder(self,<sp/>header_path):</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Check<sp/>if<sp/>a<sp/>header<sp/>is<sp/>in<sp/>alphabetical<sp/>order<sp/>with<sp/>the<sp/>previous<sp/>header.</highlight></codeline>
<codeline lineno="424"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="425"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Args:</highlight></codeline>
<codeline lineno="426"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>header_path:<sp/>Header<sp/>to<sp/>be<sp/>checked.</highlight></codeline>
<codeline lineno="427"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="428"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Returns:</highlight></codeline>
<codeline lineno="429"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>Returns<sp/>true<sp/>if<sp/>the<sp/>header<sp/>is<sp/>in<sp/>alphabetical<sp/>order.</highlight></codeline>
<codeline lineno="430"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/>canonical_header<sp/>=<sp/>self.CanonicalizeAlphabeticalOrder(header_path)</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self._last_header<sp/>&gt;<sp/>canonical_header:</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/>self._last_header<sp/>=<sp/>canonical_header</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">CheckNextIncludeOrder(self,<sp/>header_type):</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Returns<sp/>a<sp/>non-empty<sp/>error<sp/>message<sp/>if<sp/>the<sp/>next<sp/>header<sp/>is<sp/>out<sp/>of<sp/>order.</highlight></codeline>
<codeline lineno="439"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="440"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>This<sp/>function<sp/>also<sp/>updates<sp/>the<sp/>internal<sp/>state<sp/>to<sp/>be<sp/>ready<sp/>to<sp/>check</highlight></codeline>
<codeline lineno="441"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>the<sp/>next<sp/>include.</highlight></codeline>
<codeline lineno="442"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="443"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Args:</highlight></codeline>
<codeline lineno="444"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>header_type:<sp/>One<sp/>of<sp/>the<sp/>_XXX_HEADER<sp/>constants<sp/>defined<sp/>above.</highlight></codeline>
<codeline lineno="445"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="446"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Returns:</highlight></codeline>
<codeline lineno="447"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>empty<sp/>string<sp/>if<sp/>the<sp/>header<sp/>is<sp/>in<sp/>the<sp/>right<sp/>order,<sp/>or<sp/>an</highlight></codeline>
<codeline lineno="448"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>error<sp/>message<sp/>describing<sp/>what&apos;s<sp/>wrong.</highlight></codeline>
<codeline lineno="449"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="450"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/>error_message<sp/>=<sp/>(</highlight><highlight class="stringliteral">&apos;Found<sp/>%s<sp/>after<sp/>%s&apos;</highlight><highlight class="normal"><sp/>%</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(self._TYPE_NAMES[header_type],</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self._SECTION_NAMES[self._section]))</highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/>last_section<sp/>=<sp/>self._section</highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>header_type<sp/>==<sp/>_C_SYS_HEADER:</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self._section<sp/>&lt;=<sp/>self._C_SECTION:</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self._section<sp/>=<sp/>self._C_SECTION</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self._last_header<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error_message</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>header_type<sp/>==<sp/>_CPP_SYS_HEADER:</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self._section<sp/>&lt;=<sp/>self._CPP_SECTION:</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self._section<sp/>=<sp/>self._CPP_SECTION</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self._last_header<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error_message</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>header_type<sp/>==<sp/>_LIKELY_MY_HEADER:</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self._section<sp/>&lt;=<sp/>self._MY_H_SECTION:</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self._section<sp/>=<sp/>self._MY_H_SECTION</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self._section<sp/>=<sp/>self._OTHER_H_SECTION</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>header_type<sp/>==<sp/>_POSSIBLE_MY_HEADER:</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self._section<sp/>&lt;=<sp/>self._MY_H_SECTION:</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self._section<sp/>=<sp/>self._MY_H_SECTION</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>This<sp/>will<sp/>always<sp/>be<sp/>the<sp/>fallback<sp/>because<sp/>we&apos;re<sp/>not<sp/>sure</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>enough<sp/>that<sp/>the<sp/>header<sp/>is<sp/>associated<sp/>with<sp/>this<sp/>file.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self._section<sp/>=<sp/>self._OTHER_H_SECTION</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">assert</highlight><highlight class="normal"><sp/>header_type<sp/>==<sp/>_OTHER_HEADER</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>self._section<sp/>=<sp/>self._OTHER_H_SECTION</highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>last_section<sp/>!=<sp/>self._section:</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>self._last_header<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">_CppLintState(object):</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Maintains<sp/>module-wide<sp/>state..&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">__init__(self):</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/>self.verbose_level<sp/>=<sp/>1<sp/><sp/></highlight><highlight class="comment">#<sp/>global<sp/>setting.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/>self.error_count<sp/>=<sp/>0<sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>global<sp/>count<sp/>of<sp/>reported<sp/>errors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>filters<sp/>to<sp/>apply<sp/>when<sp/>emitting<sp/>error<sp/>messages</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/>self.filters<sp/>=<sp/>_DEFAULT_FILTERS[:]</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/>self.counting<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;total&apos;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>In<sp/>what<sp/>way<sp/>are<sp/>we<sp/>counting<sp/>errors?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/>self.errors_by_category<sp/>=<sp/>{}<sp/><sp/></highlight><highlight class="comment">#<sp/>string<sp/>to<sp/>int<sp/>dict<sp/>storing<sp/>error<sp/>counts</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>output<sp/>format:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>&quot;emacs&quot;<sp/>-<sp/>format<sp/>that<sp/>emacs<sp/>can<sp/>parse<sp/>(default)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>&quot;vs7&quot;<sp/>-<sp/>format<sp/>that<sp/>Microsoft<sp/>Visual<sp/>Studio<sp/>7<sp/>can<sp/>parse</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/>self.output_format<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;emacs&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">SetOutputFormat(self,<sp/>output_format):</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Sets<sp/>the<sp/>output<sp/>format<sp/>for<sp/>errors.&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/>self.output_format<sp/>=<sp/>output_format</highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">SetVerboseLevel(self,<sp/>level):</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Sets<sp/>the<sp/>module&apos;s<sp/>verbosity,<sp/>and<sp/>returns<sp/>the<sp/>previous<sp/>setting.&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/>last_verbose_level<sp/>=<sp/>self.verbose_level</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/>self.verbose_level<sp/>=<sp/>level</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>last_verbose_level</highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">SetCountingStyle(self,<sp/>counting_style):</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Sets<sp/>the<sp/>module&apos;s<sp/>counting<sp/>options.&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/>self.counting<sp/>=<sp/>counting_style</highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">SetFilters(self,<sp/>filters):</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Sets<sp/>the<sp/>error-message<sp/>filters.</highlight></codeline>
<codeline lineno="523"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="524"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>These<sp/>filters<sp/>are<sp/>applied<sp/>when<sp/>deciding<sp/>whether<sp/>to<sp/>emit<sp/>a<sp/>given</highlight></codeline>
<codeline lineno="525"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>error<sp/>message.</highlight></codeline>
<codeline lineno="526"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="527"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Args:</highlight></codeline>
<codeline lineno="528"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>filters:<sp/>A<sp/>string<sp/>of<sp/>comma-separated<sp/>filters<sp/>(eg<sp/>&quot;+whitespace/indent&quot;).</highlight></codeline>
<codeline lineno="529"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Each<sp/>filter<sp/>should<sp/>start<sp/>with<sp/>+<sp/>or<sp/>-;<sp/>else<sp/>we<sp/>die.</highlight></codeline>
<codeline lineno="530"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="531"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Raises:</highlight></codeline>
<codeline lineno="532"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>ValueError:<sp/>The<sp/>comma-separated<sp/>filters<sp/>did<sp/>not<sp/>all<sp/>start<sp/>with<sp/>&apos;+&apos;<sp/>or<sp/>&apos;-&apos;.</highlight></codeline>
<codeline lineno="533"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>E.g.<sp/>&quot;-,+whitespace,-whitespace/indent,whitespace/badfilter&quot;</highlight></codeline>
<codeline lineno="534"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Default<sp/>filters<sp/>always<sp/>have<sp/>less<sp/>priority<sp/>than<sp/>the<sp/>flag<sp/>ones.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/>self.filters<sp/>=<sp/>_DEFAULT_FILTERS[:]</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>filt<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>filters.split(</highlight><highlight class="stringliteral">&apos;,&apos;</highlight><highlight class="normal">):</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>clean_filt<sp/>=<sp/>filt.strip()</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>clean_filt:</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.filters.append(clean_filt)</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>filt<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>self.filters:</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>(filt.startswith(</highlight><highlight class="stringliteral">&apos;+&apos;</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>filt.startswith(</highlight><highlight class="stringliteral">&apos;-&apos;</highlight><highlight class="normal">)):</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/>ValueError(</highlight><highlight class="stringliteral">&apos;Every<sp/>filter<sp/>in<sp/>--filters<sp/>must<sp/>start<sp/>with<sp/>+<sp/>or<sp/>-&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;<sp/>(%s<sp/>does<sp/>not)&apos;</highlight><highlight class="normal"><sp/>%<sp/>filt)</highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">ResetErrorCounts(self):</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Sets<sp/>the<sp/>module&apos;s<sp/>error<sp/>statistic<sp/>back<sp/>to<sp/>zero.&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/>self.error_count<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/>self.errors_by_category<sp/>=<sp/>{}</highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">IncrementErrorCount(self,<sp/>category):</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Bumps<sp/>the<sp/>module&apos;s<sp/>error<sp/>statistic.&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/>self.error_count<sp/>+=<sp/>1</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.counting<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&apos;toplevel&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;detailed&apos;</highlight><highlight class="normal">):</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.counting<sp/>!=<sp/></highlight><highlight class="stringliteral">&apos;detailed&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>category<sp/>=<sp/>category.split(</highlight><highlight class="stringliteral">&apos;/&apos;</highlight><highlight class="normal">)[0]</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>category<sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>self.errors_by_category:</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.errors_by_category[category]<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>self.errors_by_category[category]<sp/>+=<sp/>1</highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">PrintErrorCounts(self):</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Print<sp/>a<sp/>summary<sp/>of<sp/>errors<sp/>by<sp/>category,<sp/>and<sp/>the<sp/>total.&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>category,<sp/>count<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>self.errors_by_category.iteritems():</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sys.stderr.write(</highlight><highlight class="stringliteral">&apos;Category<sp/>\&apos;%s\&apos;<sp/>errors<sp/>found:<sp/>%d\n&apos;</highlight><highlight class="normal"><sp/>%</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(category,<sp/>count))</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.error_count<sp/>==<sp/>0:</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sys.stderr.write(</highlight><highlight class="stringliteral">&apos;\033[1;32mTotal<sp/>errors<sp/>found:<sp/>%d\033[1;m\n&apos;</highlight><highlight class="normal"><sp/>%<sp/>self.error_count)</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sys.stderr.write(</highlight><highlight class="stringliteral">&apos;\033[1;31mTotal<sp/>errors<sp/>found:<sp/>%d\033[1;m\n&apos;</highlight><highlight class="normal"><sp/>%<sp/>self.error_count)</highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal">_cpplint_state<sp/>=<sp/>_CppLintState()</highlight></codeline>
<codeline lineno="572"><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">_OutputFormat():</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Gets<sp/>the<sp/>module&apos;s<sp/>output<sp/>format.&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_cpplint_state.output_format</highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">_SetOutputFormat(output_format):</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Sets<sp/>the<sp/>module&apos;s<sp/>output<sp/>format.&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/>_cpplint_state.SetOutputFormat(output_format)</highlight></codeline>
<codeline lineno="582"><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">_VerboseLevel():</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Returns<sp/>the<sp/>module&apos;s<sp/>verbosity<sp/>setting.&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_cpplint_state.verbose_level</highlight></codeline>
<codeline lineno="587"><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">_SetVerboseLevel(level):</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Sets<sp/>the<sp/>module&apos;s<sp/>verbosity,<sp/>and<sp/>returns<sp/>the<sp/>previous<sp/>setting.&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_cpplint_state.SetVerboseLevel(level)</highlight></codeline>
<codeline lineno="592"><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">_SetCountingStyle(level):</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Sets<sp/>the<sp/>module&apos;s<sp/>counting<sp/>options.&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/>_cpplint_state.SetCountingStyle(level)</highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">_Filters():</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Returns<sp/>the<sp/>module&apos;s<sp/>list<sp/>of<sp/>output<sp/>filters,<sp/>as<sp/>a<sp/>list.&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_cpplint_state.filters</highlight></codeline>
<codeline lineno="602"><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">_SetFilters(filters):</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Sets<sp/>the<sp/>module&apos;s<sp/>error-message<sp/>filters.</highlight></codeline>
<codeline lineno="606"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="607"><highlight class="stringliteral"><sp/><sp/>These<sp/>filters<sp/>are<sp/>applied<sp/>when<sp/>deciding<sp/>whether<sp/>to<sp/>emit<sp/>a<sp/>given</highlight></codeline>
<codeline lineno="608"><highlight class="stringliteral"><sp/><sp/>error<sp/>message.</highlight></codeline>
<codeline lineno="609"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="610"><highlight class="stringliteral"><sp/><sp/>Args:</highlight></codeline>
<codeline lineno="611"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>filters:<sp/>A<sp/>string<sp/>of<sp/>comma-separated<sp/>filters<sp/>(eg<sp/>&quot;whitespace/indent&quot;).</highlight></codeline>
<codeline lineno="612"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Each<sp/>filter<sp/>should<sp/>start<sp/>with<sp/>+<sp/>or<sp/>-;<sp/>else<sp/>we<sp/>die.</highlight></codeline>
<codeline lineno="613"><highlight class="stringliteral"><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/>_cpplint_state.SetFilters(filters)</highlight></codeline>
<codeline lineno="615"><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">_FunctionState(object):</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Tracks<sp/>current<sp/>function<sp/>name<sp/>and<sp/>the<sp/>number<sp/>of<sp/>lines<sp/>in<sp/>its<sp/>body.&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/>_NORMAL_TRIGGER<sp/>=<sp/>250<sp/><sp/></highlight><highlight class="comment">#<sp/>for<sp/>--v=0,<sp/>500<sp/>for<sp/>--v=1,<sp/>etc.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/>_TEST_TRIGGER<sp/>=<sp/>400<sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>about<sp/>50%<sp/>more<sp/>than<sp/>_NORMAL_TRIGGER.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">__init__(self):</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/>self.in_a_function<sp/>=<sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/>self.lines_in_function<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/>self.current_function<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">Begin(self,<sp/>function_name):</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Start<sp/>analyzing<sp/>function<sp/>body.</highlight></codeline>
<codeline lineno="630"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="631"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Args:</highlight></codeline>
<codeline lineno="632"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>function_name:<sp/>The<sp/>name<sp/>of<sp/>the<sp/>function<sp/>being<sp/>tracked.</highlight></codeline>
<codeline lineno="633"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/>self.in_a_function<sp/>=<sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/>self.lines_in_function<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/>self.current_function<sp/>=<sp/>function_name</highlight></codeline>
<codeline lineno="637"><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">Count(self):</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Count<sp/>line<sp/>in<sp/>current<sp/>function<sp/>body.&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.in_a_function:</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>self.lines_in_function<sp/>+=<sp/>1</highlight></codeline>
<codeline lineno="642"><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">Check(self,<sp/>error,<sp/>filename,<sp/>linenum):</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Report<sp/>if<sp/>too<sp/>many<sp/>lines<sp/>in<sp/>function<sp/>body.</highlight></codeline>
<codeline lineno="645"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="646"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Args:</highlight></codeline>
<codeline lineno="647"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>error:<sp/>The<sp/>function<sp/>to<sp/>call<sp/>with<sp/>any<sp/>errors<sp/>found.</highlight></codeline>
<codeline lineno="648"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>filename:<sp/>The<sp/>name<sp/>of<sp/>the<sp/>current<sp/>file.</highlight></codeline>
<codeline lineno="649"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>linenum:<sp/>The<sp/>number<sp/>of<sp/>the<sp/>line<sp/>to<sp/>check.</highlight></codeline>
<codeline lineno="650"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>Match(</highlight><highlight class="stringliteral">r&apos;T(EST|est)&apos;</highlight><highlight class="normal">,<sp/>self.current_function):</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>base_trigger<sp/>=<sp/>self._TEST_TRIGGER</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>base_trigger<sp/>=<sp/>self._NORMAL_TRIGGER</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/>trigger<sp/>=<sp/>base_trigger<sp/>*<sp/>2**_VerboseLevel()</highlight></codeline>
<codeline lineno="656"><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.lines_in_function<sp/>&gt;<sp/>trigger:</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error_level<sp/>=<sp/>int(math.log(self.lines_in_function<sp/>/<sp/>base_trigger,<sp/>2))</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>50<sp/>=&gt;<sp/>0,<sp/>100<sp/>=&gt;<sp/>1,<sp/>200<sp/>=&gt;<sp/>2,<sp/>400<sp/>=&gt;<sp/>3,<sp/>800<sp/>=&gt;<sp/>4,<sp/>1600<sp/>=&gt;<sp/>5,<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>error_level<sp/>&gt;<sp/>5:</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error_level<sp/>=<sp/>5</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(filename,<sp/>linenum,<sp/></highlight><highlight class="stringliteral">&apos;readability/fn_size&apos;</highlight><highlight class="normal">,<sp/>error_level,</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;Small<sp/>and<sp/>focused<sp/>functions<sp/>are<sp/>preferred:&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;<sp/>%s<sp/>has<sp/>%d<sp/>non-comment<sp/>lines&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;<sp/>(error<sp/>triggered<sp/>by<sp/>exceeding<sp/>%d<sp/>lines).&apos;</highlight><highlight class="normal"><sp/><sp/>%<sp/>(</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.current_function,<sp/>self.lines_in_function,<sp/>trigger))</highlight></codeline>
<codeline lineno="667"><highlight class="normal"></highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">End(self):</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Stop<sp/>analyzing<sp/>function<sp/>body.&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/>self.in_a_function<sp/>=<sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="671"><highlight class="normal"></highlight></codeline>
<codeline lineno="672"><highlight class="normal"></highlight></codeline>
<codeline lineno="673"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">_IncludeError(Exception):</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Indicates<sp/>a<sp/>problem<sp/>with<sp/>the<sp/>include<sp/>order<sp/>in<sp/>a<sp/>file.&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">pass</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="normal"></highlight></codeline>
<codeline lineno="677"><highlight class="normal"></highlight></codeline>
<codeline lineno="678"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">FileInfo:</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Provides<sp/>utility<sp/>functions<sp/>for<sp/>filenames.</highlight></codeline>
<codeline lineno="680"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="681"><highlight class="stringliteral"><sp/><sp/>FileInfo<sp/>provides<sp/>easy<sp/>access<sp/>to<sp/>the<sp/>components<sp/>of<sp/>a<sp/>file&apos;s<sp/>path</highlight></codeline>
<codeline lineno="682"><highlight class="stringliteral"><sp/><sp/>relative<sp/>to<sp/>the<sp/>project<sp/>root.</highlight></codeline>
<codeline lineno="683"><highlight class="stringliteral"><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="684"><highlight class="normal"></highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">__init__(self,<sp/>filename):</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/>self._filename<sp/>=<sp/>filename</highlight></codeline>
<codeline lineno="687"><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">FullName(self):</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Make<sp/>Windows<sp/>paths<sp/>like<sp/>Unix.&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os.path.abspath(self._filename).replace(</highlight><highlight class="stringliteral">&apos;\\&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;/&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="691"><highlight class="normal"></highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">RepositoryName(self):</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;FullName<sp/>after<sp/>removing<sp/>the<sp/>local<sp/>path<sp/>to<sp/>the<sp/>repository.</highlight></codeline>
<codeline lineno="694"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="695"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>If<sp/>we<sp/>have<sp/>a<sp/>real<sp/>absolute<sp/>path<sp/>name<sp/>here<sp/>we<sp/>can<sp/>try<sp/>to<sp/>do<sp/>something<sp/>smart:</highlight></codeline>
<codeline lineno="696"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>detecting<sp/>the<sp/>root<sp/>of<sp/>the<sp/>checkout<sp/>and<sp/>truncating<sp/>/path/to/checkout<sp/>from</highlight></codeline>
<codeline lineno="697"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>the<sp/>name<sp/>so<sp/>that<sp/>we<sp/>get<sp/>header<sp/>guards<sp/>that<sp/>don&apos;t<sp/>include<sp/>things<sp/>like</highlight></codeline>
<codeline lineno="698"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;C:\Documents<sp/>and<sp/>Settings\...&quot;<sp/>or<sp/>&quot;/home/username/...&quot;<sp/>in<sp/>them<sp/>and<sp/>thus</highlight></codeline>
<codeline lineno="699"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>people<sp/>on<sp/>different<sp/>computers<sp/>who<sp/>have<sp/>checked<sp/>the<sp/>source<sp/>out<sp/>to<sp/>different</highlight></codeline>
<codeline lineno="700"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>locations<sp/>won&apos;t<sp/>see<sp/>bogus<sp/>errors.</highlight></codeline>
<codeline lineno="701"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/>fullname<sp/>=<sp/>self.FullName()</highlight></codeline>
<codeline lineno="703"><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>os.path.exists(fullname):</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>project_dir<sp/>=<sp/>os.path.dirname(fullname)</highlight></codeline>
<codeline lineno="706"><highlight class="normal"></highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>os.path.exists(os.path.join(project_dir,<sp/></highlight><highlight class="stringliteral">&quot;.svn&quot;</highlight><highlight class="normal">)):</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>If<sp/>there&apos;s<sp/>a<sp/>.svn<sp/>file<sp/>in<sp/>the<sp/>current<sp/>directory,<sp/>we<sp/>recursively<sp/>look</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>up<sp/>the<sp/>directory<sp/>tree<sp/>for<sp/>the<sp/>top<sp/>of<sp/>the<sp/>SVN<sp/>checkout</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root_dir<sp/>=<sp/>project_dir</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>one_up_dir<sp/>=<sp/>os.path.dirname(root_dir)</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>os.path.exists(os.path.join(one_up_dir,<sp/></highlight><highlight class="stringliteral">&quot;.svn&quot;</highlight><highlight class="normal">)):</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root_dir<sp/>=<sp/>os.path.dirname(root_dir)</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>one_up_dir<sp/>=<sp/>os.path.dirname(one_up_dir)</highlight></codeline>
<codeline lineno="715"><highlight class="normal"></highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prefix<sp/>=<sp/>os.path.commonprefix([root_dir,<sp/>project_dir])</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fullname[len(prefix)<sp/>+<sp/>1:]</highlight></codeline>
<codeline lineno="718"><highlight class="normal"></highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Not<sp/>SVN?<sp/>Try<sp/>to<sp/>find<sp/>a<sp/>git<sp/>or<sp/>hg<sp/>top<sp/>level<sp/>directory<sp/>by<sp/>searching<sp/>up</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>from<sp/>the<sp/>current<sp/>path.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>root_dir<sp/>=<sp/>os.path.dirname(fullname)</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(root_dir<sp/>!=<sp/>os.path.dirname(root_dir)<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>os.path.exists(os.path.join(root_dir,<sp/></highlight><highlight class="stringliteral">&quot;.git&quot;</highlight><highlight class="normal">))<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>os.path.exists(os.path.join(root_dir,<sp/></highlight><highlight class="stringliteral">&quot;.hg&quot;</highlight><highlight class="normal">))):</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root_dir<sp/>=<sp/>os.path.dirname(root_dir)</highlight></codeline>
<codeline lineno="726"><highlight class="normal"></highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(os.path.exists(os.path.join(root_dir,<sp/></highlight><highlight class="stringliteral">&quot;.git&quot;</highlight><highlight class="normal">))<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os.path.exists(os.path.join(root_dir,<sp/></highlight><highlight class="stringliteral">&quot;.hg&quot;</highlight><highlight class="normal">))):</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prefix<sp/>=<sp/>os.path.commonprefix([root_dir,<sp/>project_dir])</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fullname[len(prefix)<sp/>+<sp/>1:]</highlight></codeline>
<codeline lineno="731"><highlight class="normal"></highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Don&apos;t<sp/>know<sp/>what<sp/>to<sp/>do;<sp/>header<sp/>guard<sp/>warnings<sp/>may<sp/>be<sp/>wrong...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fullname</highlight></codeline>
<codeline lineno="734"><highlight class="normal"></highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">Split(self):</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Splits<sp/>the<sp/>file<sp/>into<sp/>the<sp/>directory,<sp/>basename,<sp/>and<sp/>extension.</highlight></codeline>
<codeline lineno="737"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="738"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>For<sp/>&apos;chrome/browser/browser.cc&apos;,<sp/>Split()<sp/>would</highlight></codeline>
<codeline lineno="739"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>return<sp/>(&apos;chrome/browser&apos;,<sp/>&apos;browser&apos;,<sp/>&apos;.cc&apos;)</highlight></codeline>
<codeline lineno="740"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="741"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Returns:</highlight></codeline>
<codeline lineno="742"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>A<sp/>tuple<sp/>of<sp/>(directory,<sp/>basename,<sp/>extension).</highlight></codeline>
<codeline lineno="743"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="744"><highlight class="normal"></highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/>googlename<sp/>=<sp/>self.RepositoryName()</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/>project,<sp/>rest<sp/>=<sp/>os.path.split(googlename)</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(project,)<sp/>+<sp/>os.path.splitext(rest)</highlight></codeline>
<codeline lineno="748"><highlight class="normal"></highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">BaseName(self):</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;File<sp/>base<sp/>name<sp/>-<sp/>text<sp/>after<sp/>the<sp/>final<sp/>slash,<sp/>before<sp/>the<sp/>final<sp/>period.&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>self.Split()[1]</highlight></codeline>
<codeline lineno="752"><highlight class="normal"></highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">Extension(self):</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;File<sp/>extension<sp/>-<sp/>text<sp/>following<sp/>the<sp/>final<sp/>period.&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>self.Split()[2]</highlight></codeline>
<codeline lineno="756"><highlight class="normal"></highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">NoExtension(self):</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;File<sp/>has<sp/>no<sp/>source<sp/>file<sp/>extension.&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&apos;/&apos;</highlight><highlight class="normal">.join(self.Split()[0:2])</highlight></codeline>
<codeline lineno="760"><highlight class="normal"></highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">IsSource(self):</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;File<sp/>has<sp/>a<sp/>source<sp/>file<sp/>extension.&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>self.Extension()[1:]<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&apos;c&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;cc&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;cpp&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;cxx&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="764"><highlight class="normal"></highlight></codeline>
<codeline lineno="765"><highlight class="normal"></highlight></codeline>
<codeline lineno="766"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">_ShouldPrintError(category,<sp/>confidence,<sp/>linenum):</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;If<sp/>confidence<sp/>&gt;=<sp/>verbose,<sp/>category<sp/>passes<sp/>filter<sp/>and<sp/>is<sp/>not<sp/>suppressed.&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="768"><highlight class="normal"></highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>There<sp/>are<sp/>three<sp/>ways<sp/>we<sp/>might<sp/>decide<sp/>not<sp/>to<sp/>print<sp/>an<sp/>error<sp/>message:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>a<sp/>&quot;NOLINT(category)&quot;<sp/>comment<sp/>appears<sp/>in<sp/>the<sp/>source,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>the<sp/>verbosity<sp/>level<sp/>isn&apos;t<sp/>high<sp/>enough,<sp/>or<sp/>the<sp/>filters<sp/>filter<sp/>it<sp/>out.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>IsErrorSuppressedByNolint(category,<sp/>linenum):</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>confidence<sp/>&lt;<sp/>_cpplint_state.verbose_level:</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="776"><highlight class="normal"></highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/>is_filtered<sp/>=<sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>one_filter<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>_Filters():</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>one_filter.startswith(</highlight><highlight class="stringliteral">&apos;-&apos;</highlight><highlight class="normal">):</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>category.startswith(one_filter[1:]):</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_filtered<sp/>=<sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>one_filter.startswith(</highlight><highlight class="stringliteral">&apos;+&apos;</highlight><highlight class="normal">):</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>category.startswith(one_filter[1:]):</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_filtered<sp/>=<sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">assert</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>should<sp/>have<sp/>been<sp/>checked<sp/>for<sp/>in<sp/>SetFilter.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>is_filtered:</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="789"><highlight class="normal"></highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="791"><highlight class="normal"></highlight></codeline>
<codeline lineno="792"><highlight class="normal"></highlight></codeline>
<codeline lineno="793"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">Error(filename,<sp/>linenum,<sp/>category,<sp/>confidence,<sp/>message):</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Logs<sp/>the<sp/>fact<sp/>we&apos;ve<sp/>found<sp/>a<sp/>lint<sp/>error.</highlight></codeline>
<codeline lineno="795"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="796"><highlight class="stringliteral"><sp/><sp/>We<sp/>log<sp/>where<sp/>the<sp/>error<sp/>was<sp/>found,<sp/>and<sp/>also<sp/>our<sp/>confidence<sp/>in<sp/>the<sp/>error,</highlight></codeline>
<codeline lineno="797"><highlight class="stringliteral"><sp/><sp/>that<sp/>is,<sp/>how<sp/>certain<sp/>we<sp/>are<sp/>this<sp/>is<sp/>a<sp/>legitimate<sp/>style<sp/>regression,<sp/>and</highlight></codeline>
<codeline lineno="798"><highlight class="stringliteral"><sp/><sp/>not<sp/>a<sp/>misidentification<sp/>or<sp/>a<sp/>use<sp/>that&apos;s<sp/>sometimes<sp/>justified.</highlight></codeline>
<codeline lineno="799"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="800"><highlight class="stringliteral"><sp/><sp/>False<sp/>positives<sp/>can<sp/>be<sp/>suppressed<sp/>by<sp/>the<sp/>use<sp/>of</highlight></codeline>
<codeline lineno="801"><highlight class="stringliteral"><sp/><sp/>&quot;cpplint(category)&quot;<sp/><sp/>comments<sp/>on<sp/>the<sp/>offending<sp/>line.<sp/><sp/>These<sp/>are</highlight></codeline>
<codeline lineno="802"><highlight class="stringliteral"><sp/><sp/>parsed<sp/>into<sp/>_error_suppressions.</highlight></codeline>
<codeline lineno="803"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="804"><highlight class="stringliteral"><sp/><sp/>Args:</highlight></codeline>
<codeline lineno="805"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>filename:<sp/>The<sp/>name<sp/>of<sp/>the<sp/>file<sp/>containing<sp/>the<sp/>error.</highlight></codeline>
<codeline lineno="806"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>linenum:<sp/>The<sp/>number<sp/>of<sp/>the<sp/>line<sp/>containing<sp/>the<sp/>error.</highlight></codeline>
<codeline lineno="807"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>category:<sp/>A<sp/>string<sp/>used<sp/>to<sp/>describe<sp/>the<sp/>&quot;category&quot;<sp/>this<sp/>bug</highlight></codeline>
<codeline lineno="808"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>falls<sp/>under:<sp/>&quot;whitespace&quot;,<sp/>say,<sp/>or<sp/>&quot;runtime&quot;.<sp/><sp/>Categories</highlight></codeline>
<codeline lineno="809"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>may<sp/>have<sp/>a<sp/>hierarchy<sp/>separated<sp/>by<sp/>slashes:<sp/>&quot;whitespace/indent&quot;.</highlight></codeline>
<codeline lineno="810"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>confidence:<sp/>A<sp/>number<sp/>from<sp/>1-5<sp/>representing<sp/>a<sp/>confidence<sp/>score<sp/>for</highlight></codeline>
<codeline lineno="811"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>error,<sp/>with<sp/>5<sp/>meaning<sp/>that<sp/>we<sp/>are<sp/>certain<sp/>of<sp/>the<sp/>problem,</highlight></codeline>
<codeline lineno="812"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>and<sp/>1<sp/>meaning<sp/>that<sp/>it<sp/>could<sp/>be<sp/>a<sp/>legitimate<sp/>construct.</highlight></codeline>
<codeline lineno="813"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>message:<sp/>The<sp/>error<sp/>message.</highlight></codeline>
<codeline lineno="814"><highlight class="stringliteral"><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>_ShouldPrintError(category,<sp/>confidence,<sp/>linenum):</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/>_cpplint_state.IncrementErrorCount(category)</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>_cpplint_state.output_format<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;vs7&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sys.stderr.write(</highlight><highlight class="stringliteral">&apos;%s(%s):<sp/><sp/>%s<sp/><sp/>[%s]<sp/>[%d]\n&apos;</highlight><highlight class="normal"><sp/>%<sp/>(</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>filename,<sp/>linenum,<sp/>message,<sp/>category,<sp/>confidence))</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sys.stderr.write(</highlight><highlight class="stringliteral">&apos;%s:%s:<sp/><sp/>%s<sp/><sp/>[%s]<sp/>[%d]\n&apos;</highlight><highlight class="normal"><sp/>%<sp/>(</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>filename,<sp/>linenum,<sp/>message,<sp/>category,<sp/>confidence))</highlight></codeline>
<codeline lineno="823"><highlight class="normal"></highlight></codeline>
<codeline lineno="824"><highlight class="normal"></highlight></codeline>
<codeline lineno="825"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Matches<sp/>standard<sp/>C++<sp/>escape<sp/>esequences<sp/>per<sp/>2.13.2.3<sp/>of<sp/>the<sp/>C++<sp/>standard.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="826"><highlight class="normal">_RE_PATTERN_CLEANSE_LINE_ESCAPES<sp/>=<sp/>re.compile(</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&apos;\\([abfnrtv?&quot;\\\&apos;]|\d+|x[0-9a-fA-F]+)&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="828"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Matches<sp/>strings.<sp/><sp/>Escape<sp/>codes<sp/>should<sp/>already<sp/>be<sp/>removed<sp/>by<sp/>ESCAPES.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="829"><highlight class="normal">_RE_PATTERN_CLEANSE_LINE_DOUBLE_QUOTES<sp/>=<sp/>re.compile(</highlight><highlight class="stringliteral">r&apos;&quot;[^&quot;]*&quot;&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="830"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Matches<sp/>characters.<sp/><sp/>Escape<sp/>codes<sp/>should<sp/>already<sp/>be<sp/>removed<sp/>by<sp/>ESCAPES.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="831"><highlight class="normal">_RE_PATTERN_CLEANSE_LINE_SINGLE_QUOTES<sp/>=<sp/>re.compile(</highlight><highlight class="stringliteral">r&quot;&apos;.&apos;&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="832"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Matches<sp/>multi-line<sp/>C++<sp/>comments.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="833"><highlight class="normal"></highlight><highlight class="comment">#<sp/>This<sp/>RE<sp/>is<sp/>a<sp/>little<sp/>bit<sp/>more<sp/>complicated<sp/>than<sp/>one<sp/>might<sp/>expect,<sp/>because<sp/>we</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="834"><highlight class="normal"></highlight><highlight class="comment">#<sp/>have<sp/>to<sp/>take<sp/>care<sp/>of<sp/>space<sp/>removals<sp/>tools<sp/>so<sp/>we<sp/>can<sp/>handle<sp/>comments<sp/>inside</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="835"><highlight class="normal"></highlight><highlight class="comment">#<sp/>statements<sp/>better.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="836"><highlight class="normal"></highlight><highlight class="comment">#<sp/>The<sp/>current<sp/>rule<sp/>is:<sp/>We<sp/>only<sp/>clear<sp/>spaces<sp/>from<sp/>both<sp/>sides<sp/>when<sp/>we&apos;re<sp/>at<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="837"><highlight class="normal"></highlight><highlight class="comment">#<sp/>end<sp/>of<sp/>the<sp/>line.<sp/>Otherwise,<sp/>we<sp/>try<sp/>to<sp/>remove<sp/>spaces<sp/>from<sp/>the<sp/>right<sp/>side,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="838"><highlight class="normal"></highlight><highlight class="comment">#<sp/>if<sp/>this<sp/>doesn&apos;t<sp/>work<sp/>we<sp/>try<sp/>on<sp/>left<sp/>side<sp/>but<sp/>only<sp/>if<sp/>there&apos;s<sp/>a<sp/>non-character</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="839"><highlight class="normal"></highlight><highlight class="comment">#<sp/>on<sp/>the<sp/>right.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="840"><highlight class="normal">_RE_PATTERN_CLEANSE_LINE_C_COMMENTS<sp/>=<sp/>re.compile(</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&quot;&quot;&quot;(\s*/\*.*\*/\s*$|</highlight></codeline>
<codeline lineno="842"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/\*.*\*/\s+|</highlight></codeline>
<codeline lineno="843"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\s+/\*.*\*/(?=\W)|</highlight></codeline>
<codeline lineno="844"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/\*.*\*/)&quot;&quot;&quot;</highlight><highlight class="normal">,<sp/>re.VERBOSE)</highlight></codeline>
<codeline lineno="845"><highlight class="normal"></highlight></codeline>
<codeline lineno="846"><highlight class="normal"></highlight></codeline>
<codeline lineno="847"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">IsCppString(line):</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Does<sp/>line<sp/>terminate<sp/>so,<sp/>that<sp/>the<sp/>next<sp/>symbol<sp/>is<sp/>in<sp/>string<sp/>constant.</highlight></codeline>
<codeline lineno="849"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="850"><highlight class="stringliteral"><sp/><sp/>This<sp/>function<sp/>does<sp/>not<sp/>consider<sp/>single-line<sp/>nor<sp/>multi-line<sp/>comments.</highlight></codeline>
<codeline lineno="851"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="852"><highlight class="stringliteral"><sp/><sp/>Args:</highlight></codeline>
<codeline lineno="853"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>line:<sp/>is<sp/>a<sp/>partial<sp/>line<sp/>of<sp/>code<sp/>starting<sp/>from<sp/>the<sp/>0..n.</highlight></codeline>
<codeline lineno="854"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="855"><highlight class="stringliteral"><sp/><sp/>Returns:</highlight></codeline>
<codeline lineno="856"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>True,<sp/>if<sp/>next<sp/>character<sp/>appended<sp/>to<sp/>&apos;line&apos;<sp/>is<sp/>inside<sp/>a</highlight></codeline>
<codeline lineno="857"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>string<sp/>constant.</highlight></codeline>
<codeline lineno="858"><highlight class="stringliteral"><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="859"><highlight class="normal"></highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/>line<sp/>=<sp/>line.replace(</highlight><highlight class="stringliteral">r&apos;\\&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;XX&apos;</highlight><highlight class="normal">)<sp/><sp/></highlight><highlight class="comment">#<sp/>after<sp/>this,<sp/>\\&quot;<sp/>does<sp/>not<sp/>match<sp/>to<sp/>\&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((line.count(</highlight><highlight class="stringliteral">&apos;&quot;&apos;</highlight><highlight class="normal">)<sp/>-<sp/>line.count(</highlight><highlight class="stringliteral">r&apos;\&quot;&apos;</highlight><highlight class="normal">)<sp/>-<sp/>line.count(</highlight><highlight class="stringliteral">&quot;&apos;\&quot;&apos;&quot;</highlight><highlight class="normal">))<sp/>&amp;<sp/>1)<sp/>==<sp/>1</highlight></codeline>
<codeline lineno="862"><highlight class="normal"></highlight></codeline>
<codeline lineno="863"><highlight class="normal"></highlight></codeline>
<codeline lineno="864"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">FindNextMultiLineCommentStart(lines,<sp/>lineix):</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Find<sp/>the<sp/>beginning<sp/>marker<sp/>for<sp/>a<sp/>multiline<sp/>comment.&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>lineix<sp/>&lt;<sp/>len(lines):</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>lines[lineix].strip().startswith(</highlight><highlight class="stringliteral">&apos;/*&apos;</highlight><highlight class="normal">):</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Only<sp/>return<sp/>this<sp/>marker<sp/>if<sp/>the<sp/>comment<sp/>goes<sp/>beyond<sp/>this<sp/>line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>lines[lineix].strip().find(</highlight><highlight class="stringliteral">&apos;*/&apos;</highlight><highlight class="normal">,<sp/>2)<sp/>&lt;<sp/>0:</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lineix</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/>lineix<sp/>+=<sp/>1</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>len(lines)</highlight></codeline>
<codeline lineno="873"><highlight class="normal"></highlight></codeline>
<codeline lineno="874"><highlight class="normal"></highlight></codeline>
<codeline lineno="875"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">FindNextMultiLineCommentEnd(lines,<sp/>lineix):</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;We<sp/>are<sp/>inside<sp/>a<sp/>comment,<sp/>find<sp/>the<sp/>end<sp/>marker.&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>lineix<sp/>&lt;<sp/>len(lines):</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>lines[lineix].strip().endswith(</highlight><highlight class="stringliteral">&apos;*/&apos;</highlight><highlight class="normal">):</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lineix</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/>lineix<sp/>+=<sp/>1</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>len(lines)</highlight></codeline>
<codeline lineno="882"><highlight class="normal"></highlight></codeline>
<codeline lineno="883"><highlight class="normal"></highlight></codeline>
<codeline lineno="884"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">RemoveMultiLineCommentsFromRange(lines,<sp/>begin,<sp/>end):</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Clears<sp/>a<sp/>range<sp/>of<sp/>lines<sp/>for<sp/>multi-line<sp/>comments.&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>Having<sp/>//<sp/>dummy<sp/>comments<sp/>makes<sp/>the<sp/>lines<sp/>non-empty,<sp/>so<sp/>we<sp/>will<sp/>not<sp/>get</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>unnecessary<sp/>blank<sp/>line<sp/>warnings<sp/>later<sp/>in<sp/>the<sp/>code.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(begin,<sp/>end):</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/>lines[i]<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;//<sp/>dummy&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="890"><highlight class="normal"></highlight></codeline>
<codeline lineno="891"><highlight class="normal"></highlight></codeline>
<codeline lineno="892"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">RemoveMultiLineComments(filename,<sp/>lines,<sp/>error):</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Removes<sp/>multiline<sp/>(c-style)<sp/>comments<sp/>from<sp/>lines.&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/>lineix<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>lineix<sp/>&lt;<sp/>len(lines):</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/>lineix_begin<sp/>=<sp/>FindNextMultiLineCommentStart(lines,<sp/>lineix)</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>lineix_begin<sp/>&gt;=<sp/>len(lines):</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/>lineix_end<sp/>=<sp/>FindNextMultiLineCommentEnd(lines,<sp/>lineix_begin)</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>lineix_end<sp/>&gt;=<sp/>len(lines):</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(filename,<sp/>lineix_begin<sp/>+<sp/>1,<sp/></highlight><highlight class="stringliteral">&apos;readability/multiline_comment&apos;</highlight><highlight class="normal">,<sp/>5,</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;Could<sp/>not<sp/>find<sp/>end<sp/>of<sp/>multi-line<sp/>comment&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/>RemoveMultiLineCommentsFromRange(lines,<sp/>lineix_begin,<sp/>lineix_end<sp/>+<sp/>1)</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/>lineix<sp/>=<sp/>lineix_end<sp/>+<sp/>1</highlight></codeline>
<codeline lineno="906"><highlight class="normal"></highlight></codeline>
<codeline lineno="907"><highlight class="normal"></highlight></codeline>
<codeline lineno="908"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">CleanseComments(line):</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Removes<sp/>//-comments<sp/>and<sp/>single-line<sp/>C-style<sp/>/*<sp/>*/<sp/>comments.</highlight></codeline>
<codeline lineno="910"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="911"><highlight class="stringliteral"><sp/><sp/>Args:</highlight></codeline>
<codeline lineno="912"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>line:<sp/>A<sp/>line<sp/>of<sp/>C++<sp/>source.</highlight></codeline>
<codeline lineno="913"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="914"><highlight class="stringliteral"><sp/><sp/>Returns:</highlight></codeline>
<codeline lineno="915"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>The<sp/>line<sp/>with<sp/>single-line<sp/>comments<sp/>removed.</highlight></codeline>
<codeline lineno="916"><highlight class="stringliteral"><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/>commentpos<sp/>=<sp/>line.find(</highlight><highlight class="stringliteral">&apos;//&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>commentpos<sp/>!=<sp/>-1<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>IsCppString(line[:commentpos]):</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/>line<sp/>=<sp/>line[:commentpos].rstrip()</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>get<sp/>rid<sp/>of<sp/>/*<sp/>...<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_RE_PATTERN_CLEANSE_LINE_C_COMMENTS.sub(</highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal">,<sp/>line)</highlight></codeline>
<codeline lineno="922"><highlight class="normal"></highlight></codeline>
<codeline lineno="923"><highlight class="normal"></highlight></codeline>
<codeline lineno="924"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">CleansedLines(object):</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Holds<sp/>3<sp/>copies<sp/>of<sp/>all<sp/>lines<sp/>with<sp/>different<sp/>preprocessing<sp/>applied<sp/>to<sp/>them.</highlight></codeline>
<codeline lineno="926"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="927"><highlight class="stringliteral"><sp/><sp/>1)<sp/>elided<sp/>member<sp/>contains<sp/>lines<sp/>without<sp/>strings<sp/>and<sp/>comments,</highlight></codeline>
<codeline lineno="928"><highlight class="stringliteral"><sp/><sp/>2)<sp/>lines<sp/>member<sp/>contains<sp/>lines<sp/>without<sp/>comments,<sp/>and</highlight></codeline>
<codeline lineno="929"><highlight class="stringliteral"><sp/><sp/>3)<sp/>raw<sp/>member<sp/>contains<sp/>all<sp/>the<sp/>lines<sp/>without<sp/>processing.</highlight></codeline>
<codeline lineno="930"><highlight class="stringliteral"><sp/><sp/>All<sp/>these<sp/>three<sp/>members<sp/>are<sp/>of<sp/>&lt;type<sp/>&apos;list&apos;&gt;,<sp/>and<sp/>of<sp/>the<sp/>same<sp/>length.</highlight></codeline>
<codeline lineno="931"><highlight class="stringliteral"><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="932"><highlight class="normal"></highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">__init__(self,<sp/>lines):</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/>self.elided<sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/>self.lines<sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/>self.raw_lines<sp/>=<sp/>lines</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/>self.num_lines<sp/>=<sp/>len(lines)</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>linenum<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(len(lines)):</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>self.lines.append(CleanseComments(lines[linenum]))</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>elided<sp/>=<sp/>self._CollapseStrings(lines[linenum])</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>self.elided.append(CleanseComments(elided))</highlight></codeline>
<codeline lineno="942"><highlight class="normal"></highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">NumLines(self):</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Returns<sp/>the<sp/>number<sp/>of<sp/>lines<sp/>represented.&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>self.num_lines</highlight></codeline>
<codeline lineno="946"><highlight class="normal"></highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/>@staticmethod</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">_CollapseStrings(elided):</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Collapses<sp/>strings<sp/>and<sp/>chars<sp/>on<sp/>a<sp/>line<sp/>to<sp/>simple<sp/>&quot;&quot;<sp/>or<sp/>&apos;&apos;<sp/>blocks.</highlight></codeline>
<codeline lineno="950"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="951"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>We<sp/>nix<sp/>strings<sp/>first<sp/>so<sp/>we&apos;re<sp/>not<sp/>fooled<sp/>by<sp/>text<sp/>like<sp/>&apos;&quot;http://&quot;&apos;</highlight></codeline>
<codeline lineno="952"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="953"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Args:</highlight></codeline>
<codeline lineno="954"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>elided:<sp/>The<sp/>line<sp/>being<sp/>processed.</highlight></codeline>
<codeline lineno="955"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="956"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Returns:</highlight></codeline>
<codeline lineno="957"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>line<sp/>with<sp/>collapsed<sp/>strings.</highlight></codeline>
<codeline lineno="958"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>_RE_PATTERN_INCLUDE.match(elided):</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Remove<sp/>escaped<sp/>characters<sp/>first<sp/>to<sp/>make<sp/>quote/single<sp/>quote<sp/>collapsing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>basic.<sp/><sp/>Things<sp/>that<sp/>look<sp/>like<sp/>escaped<sp/>characters<sp/>shouldn&apos;t<sp/>occur</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>outside<sp/>of<sp/>strings<sp/>and<sp/>chars.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>elided<sp/>=<sp/>_RE_PATTERN_CLEANSE_LINE_ESCAPES.sub(</highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal">,<sp/>elided)</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>elided<sp/>=<sp/>_RE_PATTERN_CLEANSE_LINE_SINGLE_QUOTES.sub(</highlight><highlight class="stringliteral">&quot;&apos;&apos;&quot;</highlight><highlight class="normal">,<sp/>elided)</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>elided<sp/>=<sp/>_RE_PATTERN_CLEANSE_LINE_DOUBLE_QUOTES.sub(</highlight><highlight class="stringliteral">&apos;&quot;&quot;&apos;</highlight><highlight class="normal">,<sp/>elided)</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>elided</highlight></codeline>
<codeline lineno="967"><highlight class="normal"></highlight></codeline>
<codeline lineno="968"><highlight class="normal"></highlight></codeline>
<codeline lineno="969"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacecpplint_1a9713059a1f275ecb548f18733306791d" kindref="member">CloseExpression</ref>(clean_lines,<sp/>linenum,<sp/>pos):</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;If<sp/>input<sp/>points<sp/>to<sp/>(<sp/>or<sp/>{<sp/>or<sp/>[,<sp/>finds<sp/>the<sp/>position<sp/>that<sp/>closes<sp/>it.</highlight></codeline>
<codeline lineno="971"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="972"><highlight class="stringliteral"><sp/><sp/>If<sp/>lines[linenum][pos]<sp/>points<sp/>to<sp/>a<sp/>&apos;(&apos;<sp/>or<sp/>&apos;{&apos;<sp/>or<sp/>&apos;[&apos;,<sp/>finds<sp/>the</highlight></codeline>
<codeline lineno="973"><highlight class="stringliteral"><sp/><sp/>linenum/pos<sp/>that<sp/>correspond<sp/>to<sp/>the<sp/>closing<sp/>of<sp/>the<sp/>expression.</highlight></codeline>
<codeline lineno="974"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="975"><highlight class="stringliteral"><sp/><sp/>Args:</highlight></codeline>
<codeline lineno="976"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>clean_lines:<sp/>A<sp/>CleansedLines<sp/>instance<sp/>containing<sp/>the<sp/>file.</highlight></codeline>
<codeline lineno="977"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>linenum:<sp/>The<sp/>number<sp/>of<sp/>the<sp/>line<sp/>to<sp/>check.</highlight></codeline>
<codeline lineno="978"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>pos:<sp/>A<sp/>position<sp/>on<sp/>the<sp/>line.</highlight></codeline>
<codeline lineno="979"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="980"><highlight class="stringliteral"><sp/><sp/>Returns:</highlight></codeline>
<codeline lineno="981"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>A<sp/>tuple<sp/>(line,<sp/>linenum,<sp/>pos)<sp/>pointer<sp/>*past*<sp/>the<sp/>closing<sp/>brace,<sp/>or</highlight></codeline>
<codeline lineno="982"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>(line,<sp/>len(lines),<sp/>-1)<sp/>if<sp/>we<sp/>never<sp/>find<sp/>a<sp/>close.<sp/><sp/>Note<sp/>we<sp/>ignore</highlight></codeline>
<codeline lineno="983"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>strings<sp/>and<sp/>comments<sp/>when<sp/>matching;<sp/>and<sp/>the<sp/>line<sp/>we<sp/>return<sp/>is<sp/>the</highlight></codeline>
<codeline lineno="984"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&apos;cleansed&apos;<sp/>line<sp/>at<sp/>linenum.</highlight></codeline>
<codeline lineno="985"><highlight class="stringliteral"><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="986"><highlight class="normal"></highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/>line<sp/>=<sp/>clean_lines.elided[linenum]</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/>startchar<sp/>=<sp/>line[pos]</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>startchar<sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&apos;({[&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(line,<sp/>clean_lines.NumLines(),<sp/>-1)</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>startchar<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;(&apos;</highlight><highlight class="normal">:<sp/>endchar<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;)&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>startchar<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;[&apos;</highlight><highlight class="normal">:<sp/>endchar<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;]&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>startchar<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;{&apos;</highlight><highlight class="normal">:<sp/>endchar<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;}&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="994"><highlight class="normal"></highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/>num_open<sp/>=<sp/>line.count(startchar)<sp/>-<sp/>line.count(endchar)</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>linenum<sp/>&lt;<sp/>clean_lines.NumLines()<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>num_open<sp/>&gt;<sp/>0:</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/>linenum<sp/>+=<sp/>1</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/>line<sp/>=<sp/>clean_lines.elided[linenum]</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/>num_open<sp/>+=<sp/>line.count(startchar)<sp/>-<sp/>line.count(endchar)</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>OK,<sp/>now<sp/>find<sp/>the<sp/>endchar<sp/>that<sp/>actually<sp/>got<sp/>us<sp/>back<sp/>to<sp/>even</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/>endpos<sp/>=<sp/>len(line)</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>num_open<sp/>&gt;=<sp/>0:</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/>endpos<sp/>=<sp/>line.rfind(</highlight><highlight class="stringliteral">&apos;)&apos;</highlight><highlight class="normal">,<sp/>0,<sp/>endpos)</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/>num_open<sp/>-=<sp/>1<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>chopped<sp/>off<sp/>another<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(line,<sp/>linenum,<sp/>endpos<sp/>+<sp/>1)</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"></highlight></codeline>
<codeline lineno="1007"><highlight class="normal"></highlight></codeline>
<codeline lineno="1008"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacecpplint_1ac9cdecc582bc833c2eb7ac6eed6d2624" kindref="member">CheckForCopyright</ref>(filename,<sp/>lines,<sp/>error):</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Logs<sp/>an<sp/>error<sp/>if<sp/>no<sp/>Copyright<sp/>message<sp/>appears<sp/>at<sp/>the<sp/>top<sp/>of<sp/>the<sp/>file.&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1010"><highlight class="normal"></highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>We&apos;ll<sp/>say<sp/>it<sp/>should<sp/>occur<sp/>by<sp/>line<sp/>10.<sp/>Don&apos;t<sp/>forget<sp/>there&apos;s<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>dummy<sp/>line<sp/>at<sp/>the<sp/>front.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>line<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>xrange(1,<sp/>min(len(lines),<sp/>11)):</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>re.search(</highlight><highlight class="stringliteral">r&apos;Copyright&apos;</highlight><highlight class="normal">,<sp/>lines[line],<sp/>re.I):<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>means<sp/>no<sp/>copyright<sp/>line<sp/>was<sp/>found</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/>error(filename,<sp/>0,<sp/></highlight><highlight class="stringliteral">&apos;legal/copyright&apos;</highlight><highlight class="normal">,<sp/>5,</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;No<sp/>copyright<sp/>message<sp/>found.<sp/><sp/>&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;You<sp/>should<sp/>have<sp/>a<sp/>line:<sp/>&quot;Copyright<sp/>[year]<sp/>&lt;Copyright<sp/>Owner&gt;&quot;&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"></highlight></codeline>
<codeline lineno="1020"><highlight class="normal"></highlight></codeline>
<codeline lineno="1021"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacecpplint_1a8eedb7313093d59b41bd7c5b19c2ddaf" kindref="member">GetHeaderGuardCPPVariable</ref>(filename):</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Returns<sp/>the<sp/>CPP<sp/>variable<sp/>that<sp/>should<sp/>be<sp/>used<sp/>as<sp/>a<sp/>header<sp/>guard.</highlight></codeline>
<codeline lineno="1023"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1024"><highlight class="stringliteral"><sp/><sp/>Args:</highlight></codeline>
<codeline lineno="1025"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>filename:<sp/>The<sp/>name<sp/>of<sp/>a<sp/>C++<sp/>header<sp/>file.</highlight></codeline>
<codeline lineno="1026"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1027"><highlight class="stringliteral"><sp/><sp/>Returns:</highlight></codeline>
<codeline lineno="1028"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>The<sp/>CPP<sp/>variable<sp/>that<sp/>should<sp/>be<sp/>used<sp/>as<sp/>a<sp/>header<sp/>guard<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="1029"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>named<sp/>file.</highlight></codeline>
<codeline lineno="1030"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1031"><highlight class="stringliteral"><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1032"><highlight class="normal"></highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>Restores<sp/>original<sp/>filename<sp/>in<sp/>case<sp/>that<sp/>cpplint<sp/>is<sp/>invoked<sp/>from<sp/>Emacs&apos;s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>flymake.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/>filename<sp/>=<sp/>re.sub(</highlight><highlight class="stringliteral">r&apos;_flymake\.h$&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;.h&apos;</highlight><highlight class="normal">,<sp/>filename)</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"></highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/>fileinfo<sp/>=<sp/>FileInfo(filename)</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>re.sub(</highlight><highlight class="stringliteral">r&apos;[-./\s]&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;_&apos;</highlight><highlight class="normal">,<sp/>fileinfo.RepositoryName()).upper()<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;_&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1039"><highlight class="normal"></highlight></codeline>
<codeline lineno="1040"><highlight class="normal"></highlight></codeline>
<codeline lineno="1041"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacecpplint_1a6ecd551d11dde0a916ef4a6317b70585" kindref="member">CheckForHeaderGuard</ref>(filename,<sp/>lines,<sp/>error):</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Checks<sp/>that<sp/>the<sp/>file<sp/>contains<sp/>a<sp/>header<sp/>guard.</highlight></codeline>
<codeline lineno="1043"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1044"><highlight class="stringliteral"><sp/><sp/>Logs<sp/>an<sp/>error<sp/>if<sp/>no<sp/>#ifndef<sp/>header<sp/>guard<sp/>is<sp/>present.<sp/><sp/>For<sp/>other</highlight></codeline>
<codeline lineno="1045"><highlight class="stringliteral"><sp/><sp/>headers,<sp/>checks<sp/>that<sp/>the<sp/>full<sp/>pathname<sp/>is<sp/>used.</highlight></codeline>
<codeline lineno="1046"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1047"><highlight class="stringliteral"><sp/><sp/>Args:</highlight></codeline>
<codeline lineno="1048"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>filename:<sp/>The<sp/>name<sp/>of<sp/>the<sp/>C++<sp/>header<sp/>file.</highlight></codeline>
<codeline lineno="1049"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>lines:<sp/>An<sp/>array<sp/>of<sp/>strings,<sp/>each<sp/>representing<sp/>a<sp/>line<sp/>of<sp/>the<sp/>file.</highlight></codeline>
<codeline lineno="1050"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>error:<sp/>The<sp/>function<sp/>to<sp/>call<sp/>with<sp/>any<sp/>errors<sp/>found.</highlight></codeline>
<codeline lineno="1051"><highlight class="stringliteral"><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1052"><highlight class="normal"></highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/>cppvar<sp/>=<sp/><ref refid="namespacecpplint_1a8eedb7313093d59b41bd7c5b19c2ddaf" kindref="member">GetHeaderGuardCPPVariable</ref>(filename)</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"></highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/>ifndef<sp/>=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/>ifndef_linenum<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/>define<sp/>=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/>endif<sp/>=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/>endif_linenum<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>linenum,<sp/>line<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>enumerate(lines):</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><sp/>linesplit<sp/>=<sp/>line.split()</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>len(linesplit)<sp/>&gt;=<sp/>2:</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>find<sp/>the<sp/>first<sp/>occurrence<sp/>of<sp/>#ifndef<sp/>and<sp/>#define,<sp/>save<sp/>arg</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>ifndef<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>linesplit[0]<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;#ifndef&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>set<sp/>ifndef<sp/>to<sp/>the<sp/>header<sp/>guard<sp/>presented<sp/>on<sp/>the<sp/>#ifndef<sp/>line.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ifndef<sp/>=<sp/>linesplit[1]</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ifndef_linenum<sp/>=<sp/>linenum</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>define<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>linesplit[0]<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;#define&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>define<sp/>=<sp/>linesplit[1]</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>find<sp/>the<sp/>last<sp/>occurrence<sp/>of<sp/>#endif,<sp/>save<sp/>entire<sp/>line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>line.startswith(</highlight><highlight class="stringliteral">&apos;#endif&apos;</highlight><highlight class="normal">):</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>endif<sp/>=<sp/>line</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>endif_linenum<sp/>=<sp/>linenum</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"></highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>ifndef<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>define<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>ifndef<sp/>!=<sp/>define:</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><sp/><sp/>error(filename,<sp/>0,<sp/></highlight><highlight class="stringliteral">&apos;build/header_guard&apos;</highlight><highlight class="normal">,<sp/>5,</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;No<sp/>#ifndef<sp/>header<sp/>guard<sp/>found,<sp/>suggested<sp/>CPP<sp/>variable<sp/>is:<sp/>%s&apos;</highlight><highlight class="normal"><sp/>%</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cppvar)</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1080"><highlight class="normal"></highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>The<sp/>guard<sp/>should<sp/>be<sp/>PATH_FILE_H_,<sp/>but<sp/>we<sp/>also<sp/>allow<sp/>PATH_FILE_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>for<sp/>backward<sp/>compatibility.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>ifndef<sp/>!=<sp/>cppvar:</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/>error_level<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>ifndef<sp/>!=<sp/>cppvar<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;_&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error_level<sp/>=<sp/>5</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"></highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/><sp/>ParseNolintSuppressions(filename,<sp/>lines[ifndef_linenum],<sp/>ifndef_linenum,</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error)</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/><sp/>error(filename,<sp/>ifndef_linenum,<sp/></highlight><highlight class="stringliteral">&apos;build/header_guard&apos;</highlight><highlight class="normal">,<sp/>error_level,</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;#ifndef<sp/>header<sp/>guard<sp/>has<sp/>wrong<sp/>style,<sp/>please<sp/>use:<sp/>%s&apos;</highlight><highlight class="normal"><sp/>%<sp/>cppvar)</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"></highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>endif<sp/>!=<sp/>(</highlight><highlight class="stringliteral">&apos;#endif<sp/><sp/>//<sp/>%s&apos;</highlight><highlight class="normal"><sp/>%<sp/>cppvar):</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/><sp/><sp/>error_level<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>endif<sp/>!=<sp/>(</highlight><highlight class="stringliteral">&apos;#endif<sp/><sp/>//<sp/>%s&apos;</highlight><highlight class="normal"><sp/>%<sp/>(cppvar<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;_&apos;</highlight><highlight class="normal">)):</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error_level<sp/>=<sp/>5</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"></highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><sp/><sp/>ParseNolintSuppressions(filename,<sp/>lines[endif_linenum],<sp/>endif_linenum,</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error)</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/><sp/>error(filename,<sp/>endif_linenum,<sp/></highlight><highlight class="stringliteral">&apos;build/header_guard&apos;</highlight><highlight class="normal">,<sp/>error_level,</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;#endif<sp/>line<sp/>should<sp/>be<sp/>&quot;#endif<sp/><sp/>//<sp/>%s&quot;&apos;</highlight><highlight class="normal"><sp/>%<sp/>cppvar)</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"></highlight></codeline>
<codeline lineno="1103"><highlight class="normal"></highlight></codeline>
<codeline lineno="1104"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacecpplint_1a04dd8f7483533a2ec7df687c180e9d22" kindref="member">CheckForUnicodeReplacementCharacters</ref>(filename,<sp/>lines,<sp/>error):</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Logs<sp/>an<sp/>error<sp/>for<sp/>each<sp/>line<sp/>containing<sp/>Unicode<sp/>replacement<sp/>characters.</highlight></codeline>
<codeline lineno="1106"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1107"><highlight class="stringliteral"><sp/><sp/>These<sp/>indicate<sp/>that<sp/>either<sp/>the<sp/>file<sp/>contained<sp/>invalid<sp/>UTF-8<sp/>(likely)</highlight></codeline>
<codeline lineno="1108"><highlight class="stringliteral"><sp/><sp/>or<sp/>Unicode<sp/>replacement<sp/>characters<sp/>(which<sp/>it<sp/>shouldn&apos;t).<sp/><sp/>Note<sp/>that</highlight></codeline>
<codeline lineno="1109"><highlight class="stringliteral"><sp/><sp/>it&apos;s<sp/>possible<sp/>for<sp/>this<sp/>to<sp/>throw<sp/>off<sp/>line<sp/>numbering<sp/>if<sp/>the<sp/>invalid</highlight></codeline>
<codeline lineno="1110"><highlight class="stringliteral"><sp/><sp/>UTF-8<sp/>occurred<sp/>adjacent<sp/>to<sp/>a<sp/>newline.</highlight></codeline>
<codeline lineno="1111"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1112"><highlight class="stringliteral"><sp/><sp/>Args:</highlight></codeline>
<codeline lineno="1113"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>filename:<sp/>The<sp/>name<sp/>of<sp/>the<sp/>current<sp/>file.</highlight></codeline>
<codeline lineno="1114"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>lines:<sp/>An<sp/>array<sp/>of<sp/>strings,<sp/>each<sp/>representing<sp/>a<sp/>line<sp/>of<sp/>the<sp/>file.</highlight></codeline>
<codeline lineno="1115"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>error:<sp/>The<sp/>function<sp/>to<sp/>call<sp/>with<sp/>any<sp/>errors<sp/>found.</highlight></codeline>
<codeline lineno="1116"><highlight class="stringliteral"><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>linenum,<sp/>line<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>enumerate(lines):</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">u&apos;\ufffd&apos;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>line:</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(filename,<sp/>linenum,<sp/></highlight><highlight class="stringliteral">&apos;readability/utf8&apos;</highlight><highlight class="normal">,<sp/>5,</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;Line<sp/>contains<sp/>invalid<sp/>UTF-8<sp/>(or<sp/>Unicode<sp/>replacement<sp/>character).&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"></highlight></codeline>
<codeline lineno="1122"><highlight class="normal"></highlight></codeline>
<codeline lineno="1123"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacecpplint_1a84408591ac7ff7e427560a252360070b" kindref="member">CheckForNewlineAtEOF</ref>(filename,<sp/>lines,<sp/>error):</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Logs<sp/>an<sp/>error<sp/>if<sp/>there<sp/>is<sp/>no<sp/>newline<sp/>char<sp/>at<sp/>the<sp/>end<sp/>of<sp/>the<sp/>file.</highlight></codeline>
<codeline lineno="1125"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1126"><highlight class="stringliteral"><sp/><sp/>Args:</highlight></codeline>
<codeline lineno="1127"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>filename:<sp/>The<sp/>name<sp/>of<sp/>the<sp/>current<sp/>file.</highlight></codeline>
<codeline lineno="1128"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>lines:<sp/>An<sp/>array<sp/>of<sp/>strings,<sp/>each<sp/>representing<sp/>a<sp/>line<sp/>of<sp/>the<sp/>file.</highlight></codeline>
<codeline lineno="1129"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>error:<sp/>The<sp/>function<sp/>to<sp/>call<sp/>with<sp/>any<sp/>errors<sp/>found.</highlight></codeline>
<codeline lineno="1130"><highlight class="stringliteral"><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1131"><highlight class="normal"></highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>The<sp/>array<sp/>lines()<sp/>was<sp/>created<sp/>by<sp/>adding<sp/>two<sp/>newlines<sp/>to<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>original<sp/>file<sp/>(go<sp/>figure),<sp/>then<sp/>splitting<sp/>on<sp/>\n.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>To<sp/>verify<sp/>that<sp/>the<sp/>file<sp/>ends<sp/>in<sp/>\n,<sp/>we<sp/>just<sp/>have<sp/>to<sp/>make<sp/>sure<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>last-but-two<sp/>element<sp/>of<sp/>lines()<sp/>exists<sp/>and<sp/>is<sp/>empty.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>len(lines)<sp/>&lt;<sp/>3<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>lines[-2]:</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/><sp/><sp/>error(filename,<sp/>len(lines)<sp/>-<sp/>2,<sp/></highlight><highlight class="stringliteral">&apos;whitespace/ending_newline&apos;</highlight><highlight class="normal">,<sp/>5,</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;Could<sp/>not<sp/>find<sp/>a<sp/>newline<sp/>character<sp/>at<sp/>the<sp/>end<sp/>of<sp/>the<sp/>file.&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"></highlight></codeline>
<codeline lineno="1140"><highlight class="normal"></highlight></codeline>
<codeline lineno="1141"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacecpplint_1ae319b3dce42ad005bcddfd3d4df9656d" kindref="member">CheckForMultilineCommentsAndStrings</ref>(filename,<sp/>clean_lines,<sp/>linenum,<sp/>error):</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Logs<sp/>an<sp/>error<sp/>if<sp/>we<sp/>see<sp/>/*<sp/>...<sp/>*/<sp/>or<sp/>&quot;...&quot;<sp/>that<sp/>extend<sp/>past<sp/>one<sp/>line.</highlight></codeline>
<codeline lineno="1143"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1144"><highlight class="stringliteral"><sp/><sp/>/*<sp/>...<sp/>*/<sp/>comments<sp/>are<sp/>legit<sp/>inside<sp/>macros,<sp/>for<sp/>one<sp/>line.</highlight></codeline>
<codeline lineno="1145"><highlight class="stringliteral"><sp/><sp/>Otherwise,<sp/>we<sp/>prefer<sp/>//<sp/>comments,<sp/>so<sp/>it&apos;s<sp/>ok<sp/>to<sp/>warn<sp/>about<sp/>the</highlight></codeline>
<codeline lineno="1146"><highlight class="stringliteral"><sp/><sp/>other.<sp/><sp/>Likewise,<sp/>it&apos;s<sp/>ok<sp/>for<sp/>strings<sp/>to<sp/>extend<sp/>across<sp/>multiple</highlight></codeline>
<codeline lineno="1147"><highlight class="stringliteral"><sp/><sp/>lines,<sp/>as<sp/>long<sp/>as<sp/>a<sp/>line<sp/>continuation<sp/>character<sp/>(backslash)</highlight></codeline>
<codeline lineno="1148"><highlight class="stringliteral"><sp/><sp/>terminates<sp/>each<sp/>line.<sp/>Although<sp/>not<sp/>currently<sp/>prohibited<sp/>by<sp/>the<sp/>C++</highlight></codeline>
<codeline lineno="1149"><highlight class="stringliteral"><sp/><sp/>style<sp/>guide,<sp/>it&apos;s<sp/>ugly<sp/>and<sp/>unnecessary.<sp/>We<sp/>don&apos;t<sp/>do<sp/>well<sp/>with<sp/>either</highlight></codeline>
<codeline lineno="1150"><highlight class="stringliteral"><sp/><sp/>in<sp/>this<sp/>lint<sp/>program,<sp/>so<sp/>we<sp/>warn<sp/>about<sp/>both.</highlight></codeline>
<codeline lineno="1151"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1152"><highlight class="stringliteral"><sp/><sp/>Args:</highlight></codeline>
<codeline lineno="1153"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>filename:<sp/>The<sp/>name<sp/>of<sp/>the<sp/>current<sp/>file.</highlight></codeline>
<codeline lineno="1154"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>clean_lines:<sp/>A<sp/>CleansedLines<sp/>instance<sp/>containing<sp/>the<sp/>file.</highlight></codeline>
<codeline lineno="1155"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>linenum:<sp/>The<sp/>number<sp/>of<sp/>the<sp/>line<sp/>to<sp/>check.</highlight></codeline>
<codeline lineno="1156"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>error:<sp/>The<sp/>function<sp/>to<sp/>call<sp/>with<sp/>any<sp/>errors<sp/>found.</highlight></codeline>
<codeline lineno="1157"><highlight class="stringliteral"><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/>line<sp/>=<sp/>clean_lines.elided[linenum]</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"></highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>Remove<sp/>all<sp/>\\<sp/>(escaped<sp/>backslashes)<sp/>from<sp/>the<sp/>line.<sp/>They<sp/>are<sp/>OK,<sp/>and<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>second<sp/>(escaped)<sp/>slash<sp/>may<sp/>trigger<sp/>later<sp/>\&quot;<sp/>detection<sp/>erroneously.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/>line<sp/>=<sp/>line.replace(</highlight><highlight class="stringliteral">&apos;\\\\&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"></highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>line.count(</highlight><highlight class="stringliteral">&apos;/*&apos;</highlight><highlight class="normal">)<sp/>&gt;<sp/>line.count(</highlight><highlight class="stringliteral">&apos;*/&apos;</highlight><highlight class="normal">):</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/><sp/><sp/>error(filename,<sp/>linenum,<sp/></highlight><highlight class="stringliteral">&apos;readability/multiline_comment&apos;</highlight><highlight class="normal">,<sp/>5,</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;Complex<sp/>multi-line<sp/>/*...*/-style<sp/>comment<sp/>found.<sp/>&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;Lint<sp/>may<sp/>give<sp/>bogus<sp/>warnings.<sp/><sp/>&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;Consider<sp/>replacing<sp/>these<sp/>with<sp/>//-style<sp/>comments,<sp/>&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;with<sp/>#if<sp/>0...#endif,<sp/>&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;or<sp/>with<sp/>more<sp/>clearly<sp/>structured<sp/>multi-line<sp/>comments.&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"></highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(line.count(</highlight><highlight class="stringliteral">&apos;&quot;&apos;</highlight><highlight class="normal">)<sp/>-<sp/>line.count(</highlight><highlight class="stringliteral">&apos;\\&quot;&apos;</highlight><highlight class="normal">))<sp/>%<sp/>2:</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/><sp/><sp/>error(filename,<sp/>linenum,<sp/></highlight><highlight class="stringliteral">&apos;readability/multiline_string&apos;</highlight><highlight class="normal">,<sp/>5,</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;Multi-line<sp/>string<sp/>(&quot;...&quot;)<sp/>found.<sp/><sp/>This<sp/>lint<sp/>script<sp/>doesn\&apos;t<sp/>&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;do<sp/>well<sp/>with<sp/>such<sp/>strings,<sp/>and<sp/>may<sp/>give<sp/>bogus<sp/>warnings.<sp/><sp/>They\&apos;re<sp/>&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;ugly<sp/>and<sp/>unnecessary,<sp/>and<sp/>you<sp/>should<sp/>use<sp/>concatenation<sp/>instead&quot;.&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"></highlight></codeline>
<codeline lineno="1178"><highlight class="normal"></highlight></codeline>
<codeline lineno="1179"><highlight class="normal">threading_list<sp/>=<sp/>(</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/><sp/><sp/>(</highlight><highlight class="stringliteral">&apos;asctime(&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;asctime_r(&apos;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/><sp/><sp/>(</highlight><highlight class="stringliteral">&apos;ctime(&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;ctime_r(&apos;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/><sp/><sp/>(</highlight><highlight class="stringliteral">&apos;getgrgid(&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;getgrgid_r(&apos;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/><sp/><sp/>(</highlight><highlight class="stringliteral">&apos;getgrnam(&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;getgrnam_r(&apos;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><sp/><sp/>(</highlight><highlight class="stringliteral">&apos;getlogin(&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;getlogin_r(&apos;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><sp/>(</highlight><highlight class="stringliteral">&apos;getpwnam(&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;getpwnam_r(&apos;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/><sp/>(</highlight><highlight class="stringliteral">&apos;getpwuid(&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;getpwuid_r(&apos;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/><sp/><sp/>(</highlight><highlight class="stringliteral">&apos;gmtime(&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;gmtime_r(&apos;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/><sp/><sp/>(</highlight><highlight class="stringliteral">&apos;localtime(&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;localtime_r(&apos;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/><sp/><sp/>(</highlight><highlight class="stringliteral">&apos;rand(&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;rand_r(&apos;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/><sp/><sp/>(</highlight><highlight class="stringliteral">&apos;readdir(&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;readdir_r(&apos;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/><sp/><sp/>(</highlight><highlight class="stringliteral">&apos;strtok(&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;strtok_r(&apos;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/><sp/><sp/>(</highlight><highlight class="stringliteral">&apos;ttyname(&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;ttyname_r(&apos;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"></highlight></codeline>
<codeline lineno="1195"><highlight class="normal"></highlight></codeline>
<codeline lineno="1196"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">CheckPosixThreading(filename,<sp/>clean_lines,<sp/>linenum,<sp/>error):</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Checks<sp/>for<sp/>calls<sp/>to<sp/>thread-unsafe<sp/>functions.</highlight></codeline>
<codeline lineno="1198"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1199"><highlight class="stringliteral"><sp/><sp/>Much<sp/>code<sp/>has<sp/>been<sp/>originally<sp/>written<sp/>without<sp/>consideration<sp/>of</highlight></codeline>
<codeline lineno="1200"><highlight class="stringliteral"><sp/><sp/>multi-threading.<sp/>Also,<sp/>engineers<sp/>are<sp/>relying<sp/>on<sp/>their<sp/>old<sp/>experience;</highlight></codeline>
<codeline lineno="1201"><highlight class="stringliteral"><sp/><sp/>they<sp/>have<sp/>learned<sp/>posix<sp/>before<sp/>threading<sp/>extensions<sp/>were<sp/>added.<sp/>These</highlight></codeline>
<codeline lineno="1202"><highlight class="stringliteral"><sp/><sp/>tests<sp/>guide<sp/>the<sp/>engineers<sp/>to<sp/>use<sp/>thread-safe<sp/>functions<sp/>(when<sp/>using</highlight></codeline>
<codeline lineno="1203"><highlight class="stringliteral"><sp/><sp/>posix<sp/>directly).</highlight></codeline>
<codeline lineno="1204"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1205"><highlight class="stringliteral"><sp/><sp/>Args:</highlight></codeline>
<codeline lineno="1206"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>filename:<sp/>The<sp/>name<sp/>of<sp/>the<sp/>current<sp/>file.</highlight></codeline>
<codeline lineno="1207"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>clean_lines:<sp/>A<sp/>CleansedLines<sp/>instance<sp/>containing<sp/>the<sp/>file.</highlight></codeline>
<codeline lineno="1208"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>linenum:<sp/>The<sp/>number<sp/>of<sp/>the<sp/>line<sp/>to<sp/>check.</highlight></codeline>
<codeline lineno="1209"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>error:<sp/>The<sp/>function<sp/>to<sp/>call<sp/>with<sp/>any<sp/>errors<sp/>found.</highlight></codeline>
<codeline lineno="1210"><highlight class="stringliteral"><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/>line<sp/>=<sp/>clean_lines.elided[linenum]</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>single_thread_function,<sp/>multithread_safe_function<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>threading_list:</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/><sp/>ix<sp/>=<sp/>line.find(single_thread_function)</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Comparisons<sp/>made<sp/>explicit<sp/>for<sp/>clarity<sp/>--<sp/>pylint:<sp/>disable-msg=C6403</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>ix<sp/>&gt;=<sp/>0<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>(ix<sp/>==<sp/>0<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>line[ix<sp/>-<sp/>1].isalnum()<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>line[ix<sp/>-<sp/>1]<sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&apos;_&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;.&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;&gt;&apos;</highlight><highlight class="normal">))):</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(filename,<sp/>linenum,<sp/></highlight><highlight class="stringliteral">&apos;runtime/threadsafe_fn&apos;</highlight><highlight class="normal">,<sp/>2,</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;Consider<sp/>using<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>multithread_safe_function<sp/>+</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;...)<sp/>instead<sp/>of<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>single_thread_function<sp/>+</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;...)<sp/>for<sp/>improved<sp/>thread<sp/>safety.&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"></highlight></codeline>
<codeline lineno="1222"><highlight class="normal"></highlight></codeline>
<codeline lineno="1223"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Matches<sp/>invalid<sp/>increment:<sp/>*count++,<sp/>which<sp/>moves<sp/>pointer<sp/>instead<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1224"><highlight class="normal"></highlight><highlight class="comment">#<sp/>incrementing<sp/>a<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1225"><highlight class="normal">_RE_PATTERN_INVALID_INCREMENT<sp/>=<sp/>re.compile(</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&apos;^\s*\*\w+(\+\+|--);&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1227"><highlight class="normal"></highlight></codeline>
<codeline lineno="1228"><highlight class="normal"></highlight></codeline>
<codeline lineno="1229"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">CheckInvalidIncrement(filename,<sp/>clean_lines,<sp/>linenum,<sp/>error):</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Checks<sp/>for<sp/>invalid<sp/>increment<sp/>*count++.</highlight></codeline>
<codeline lineno="1231"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1232"><highlight class="stringliteral"><sp/><sp/>For<sp/>example<sp/>following<sp/>function:</highlight></codeline>
<codeline lineno="1233"><highlight class="stringliteral"><sp/><sp/>void<sp/>increment_counter(int*<sp/>count)<sp/>{</highlight></codeline>
<codeline lineno="1234"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>*count++;</highlight></codeline>
<codeline lineno="1235"><highlight class="stringliteral"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1236"><highlight class="stringliteral"><sp/><sp/>is<sp/>invalid,<sp/>because<sp/>it<sp/>effectively<sp/>does<sp/>count++,<sp/>moving<sp/>pointer,<sp/>and<sp/>should</highlight></codeline>
<codeline lineno="1237"><highlight class="stringliteral"><sp/><sp/>be<sp/>replaced<sp/>with<sp/>++*count,<sp/>(*count)++<sp/>or<sp/>*count<sp/>+=<sp/>1.</highlight></codeline>
<codeline lineno="1238"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1239"><highlight class="stringliteral"><sp/><sp/>Args:</highlight></codeline>
<codeline lineno="1240"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>filename:<sp/>The<sp/>name<sp/>of<sp/>the<sp/>current<sp/>file.</highlight></codeline>
<codeline lineno="1241"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>clean_lines:<sp/>A<sp/>CleansedLines<sp/>instance<sp/>containing<sp/>the<sp/>file.</highlight></codeline>
<codeline lineno="1242"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>linenum:<sp/>The<sp/>number<sp/>of<sp/>the<sp/>line<sp/>to<sp/>check.</highlight></codeline>
<codeline lineno="1243"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>error:<sp/>The<sp/>function<sp/>to<sp/>call<sp/>with<sp/>any<sp/>errors<sp/>found.</highlight></codeline>
<codeline lineno="1244"><highlight class="stringliteral"><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/>line<sp/>=<sp/>clean_lines.elided[linenum]</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>_RE_PATTERN_INVALID_INCREMENT.match(line):</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/><sp/><sp/>error(filename,<sp/>linenum,<sp/></highlight><highlight class="stringliteral">&apos;runtime/invalid_increment&apos;</highlight><highlight class="normal">,<sp/>5,</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;Changing<sp/>pointer<sp/>instead<sp/>of<sp/>value<sp/>(or<sp/>unused<sp/>value<sp/>of<sp/>operator*).&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"></highlight></codeline>
<codeline lineno="1250"><highlight class="normal"></highlight></codeline>
<codeline lineno="1251"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">_ClassInfo(object):</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Stores<sp/>information<sp/>about<sp/>a<sp/>class.&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1253"><highlight class="normal"></highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">__init__(self,<sp/>name,<sp/>clean_lines,<sp/>linenum):</highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/><sp/><sp/>self.name<sp/>=<sp/>name</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/><sp/><sp/>self.linenum<sp/>=<sp/>linenum</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/><sp/><sp/>self.seen_open_brace<sp/>=<sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/><sp/><sp/>self.is_derived<sp/>=<sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/><sp/><sp/>self.virtual_method_linenumber<sp/>=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/><sp/><sp/>self.has_virtual_destructor<sp/>=<sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/><sp/><sp/>self.brace_depth<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"></highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Try<sp/>to<sp/>find<sp/>the<sp/>end<sp/>of<sp/>the<sp/>class.<sp/><sp/>This<sp/>will<sp/>be<sp/>confused<sp/>by<sp/>things<sp/>like:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/>class<sp/>A<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/>}<sp/>*x<sp/>=<sp/>{<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>But<sp/>it&apos;s<sp/>still<sp/>good<sp/>enough<sp/>for<sp/>CheckSectionSpacing.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/><sp/><sp/>self.last_line<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/><sp/><sp/>depth<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(linenum,<sp/>clean_lines.NumLines()):</highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>line<sp/>=<sp/>clean_lines.lines[i]</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>depth<sp/>+=<sp/>line.count(</highlight><highlight class="stringliteral">&apos;{&apos;</highlight><highlight class="normal">)<sp/>-<sp/>line.count(</highlight><highlight class="stringliteral">&apos;}&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>depth:</highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.last_line<sp/>=<sp/>i</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1276"><highlight class="normal"></highlight></codeline>
<codeline lineno="1277"><highlight class="normal"></highlight></codeline>
<codeline lineno="1278"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">_ClassState(object):</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Holds<sp/>the<sp/>current<sp/>state<sp/>of<sp/>the<sp/>parse<sp/>relating<sp/>to<sp/>class<sp/>declarations.</highlight></codeline>
<codeline lineno="1280"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1281"><highlight class="stringliteral"><sp/><sp/>It<sp/>maintains<sp/>a<sp/>stack<sp/>of<sp/>_ClassInfos<sp/>representing<sp/>the<sp/>parser&apos;s<sp/>guess</highlight></codeline>
<codeline lineno="1282"><highlight class="stringliteral"><sp/><sp/>as<sp/>to<sp/>the<sp/>current<sp/>nesting<sp/>of<sp/>class<sp/>declarations.<sp/>The<sp/>innermost<sp/>class</highlight></codeline>
<codeline lineno="1283"><highlight class="stringliteral"><sp/><sp/>is<sp/>at<sp/>the<sp/>top<sp/>(back)<sp/>of<sp/>the<sp/>stack.<sp/>Typically,<sp/>the<sp/>stack<sp/>will<sp/>either</highlight></codeline>
<codeline lineno="1284"><highlight class="stringliteral"><sp/><sp/>be<sp/>empty<sp/>or<sp/>have<sp/>exactly<sp/>one<sp/>entry.</highlight></codeline>
<codeline lineno="1285"><highlight class="stringliteral"><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1286"><highlight class="normal"></highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">__init__(self):</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/><sp/><sp/>self.classinfo_stack<sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="1289"><highlight class="normal"></highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">CheckFinished(self,<sp/>filename,<sp/>error):</highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Checks<sp/>that<sp/>all<sp/>classes<sp/>have<sp/>been<sp/>completely<sp/>parsed.</highlight></codeline>
<codeline lineno="1292"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1293"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Call<sp/>this<sp/>when<sp/>all<sp/>lines<sp/>in<sp/>a<sp/>file<sp/>have<sp/>been<sp/>processed.</highlight></codeline>
<codeline lineno="1294"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Args:</highlight></codeline>
<codeline lineno="1295"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>filename:<sp/>The<sp/>name<sp/>of<sp/>the<sp/>current<sp/>file.</highlight></codeline>
<codeline lineno="1296"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>error:<sp/>The<sp/>function<sp/>to<sp/>call<sp/>with<sp/>any<sp/>errors<sp/>found.</highlight></codeline>
<codeline lineno="1297"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.classinfo_stack:</highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Note:<sp/>This<sp/>test<sp/>can<sp/>result<sp/>in<sp/>false<sp/>positives<sp/>if<sp/>#ifdef<sp/>constructs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>get<sp/>in<sp/>the<sp/>way<sp/>of<sp/>brace<sp/>matching.<sp/>See<sp/>the<sp/>testBuildClass<sp/>test<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>cpplint_unittest.py<sp/>for<sp/>an<sp/>example<sp/>of<sp/>this.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(filename,<sp/>self.classinfo_stack[0].linenum,<sp/></highlight><highlight class="stringliteral">&apos;build/class&apos;</highlight><highlight class="normal">,<sp/>5,</highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;Failed<sp/>to<sp/>find<sp/>complete<sp/>declaration<sp/>of<sp/>class<sp/>%s&apos;</highlight><highlight class="normal"><sp/>%</highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.classinfo_stack[0].name)</highlight></codeline>
<codeline lineno="1305"><highlight class="normal"></highlight></codeline>
<codeline lineno="1306"><highlight class="normal"></highlight></codeline>
<codeline lineno="1307"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">CheckForNonStandardConstructs(filename,<sp/>clean_lines,<sp/>linenum,</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>class_state,<sp/>error):</highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Logs<sp/>an<sp/>error<sp/>if<sp/>we<sp/>see<sp/>certain<sp/>non-ANSI<sp/>constructs<sp/>ignored<sp/>by<sp/>gcc-2.</highlight></codeline>
<codeline lineno="1310"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1311"><highlight class="stringliteral"><sp/><sp/>Complain<sp/>about<sp/>several<sp/>constructs<sp/>which<sp/>gcc-2<sp/>accepts,<sp/>but<sp/>which<sp/>are</highlight></codeline>
<codeline lineno="1312"><highlight class="stringliteral"><sp/><sp/>not<sp/>standard<sp/>C++.<sp/><sp/>Warning<sp/>about<sp/>these<sp/>in<sp/>lint<sp/>is<sp/>one<sp/>way<sp/>to<sp/>ease<sp/>the</highlight></codeline>
<codeline lineno="1313"><highlight class="stringliteral"><sp/><sp/>transition<sp/>to<sp/>new<sp/>compilers.</highlight></codeline>
<codeline lineno="1314"><highlight class="stringliteral"><sp/><sp/>-<sp/>put<sp/>storage<sp/>class<sp/>first<sp/>(e.g.<sp/>&quot;static<sp/>const&quot;<sp/>instead<sp/>of<sp/>&quot;const<sp/>static&quot;).</highlight></codeline>
<codeline lineno="1315"><highlight class="stringliteral"><sp/><sp/>-<sp/>&quot;%lld&quot;<sp/>instead<sp/>of<sp/>%qd&quot;<sp/>in<sp/>printf-type<sp/>functions.</highlight></codeline>
<codeline lineno="1316"><highlight class="stringliteral"><sp/><sp/>-<sp/>&quot;%1$d&quot;<sp/>is<sp/>non-standard<sp/>in<sp/>printf-type<sp/>functions.</highlight></codeline>
<codeline lineno="1317"><highlight class="stringliteral"><sp/><sp/>-<sp/>&quot;\%&quot;<sp/>is<sp/>an<sp/>undefined<sp/>character<sp/>escape<sp/>sequence.</highlight></codeline>
<codeline lineno="1318"><highlight class="stringliteral"><sp/><sp/>-<sp/>text<sp/>after<sp/>#endif<sp/>is<sp/>not<sp/>allowed.</highlight></codeline>
<codeline lineno="1319"><highlight class="stringliteral"><sp/><sp/>-<sp/>invalid<sp/>inner-style<sp/>forward<sp/>declaration.</highlight></codeline>
<codeline lineno="1320"><highlight class="stringliteral"><sp/><sp/>-<sp/>&gt;?<sp/>and<sp/>&lt;?<sp/>operators,<sp/>and<sp/>their<sp/>&gt;?=<sp/>and<sp/>&lt;?=<sp/>cousins.</highlight></codeline>
<codeline lineno="1321"><highlight class="stringliteral"><sp/><sp/>-<sp/>classes<sp/>with<sp/>virtual<sp/>methods<sp/>need<sp/>virtual<sp/>destructors<sp/>(compiler<sp/>warning</highlight></codeline>
<codeline lineno="1322"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>available,<sp/>but<sp/>not<sp/>turned<sp/>on<sp/>yet.)</highlight></codeline>
<codeline lineno="1323"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1324"><highlight class="stringliteral"><sp/><sp/>Additionally,<sp/>check<sp/>for<sp/>constructor/destructor<sp/>style<sp/>violations<sp/>and<sp/>reference</highlight></codeline>
<codeline lineno="1325"><highlight class="stringliteral"><sp/><sp/>members,<sp/>as<sp/>it<sp/>is<sp/>very<sp/>convenient<sp/>to<sp/>do<sp/>so<sp/>while<sp/>checking<sp/>for</highlight></codeline>
<codeline lineno="1326"><highlight class="stringliteral"><sp/><sp/>gcc-2<sp/>compliance.</highlight></codeline>
<codeline lineno="1327"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1328"><highlight class="stringliteral"><sp/><sp/>Args:</highlight></codeline>
<codeline lineno="1329"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>filename:<sp/>The<sp/>name<sp/>of<sp/>the<sp/>current<sp/>file.</highlight></codeline>
<codeline lineno="1330"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>clean_lines:<sp/>A<sp/>CleansedLines<sp/>instance<sp/>containing<sp/>the<sp/>file.</highlight></codeline>
<codeline lineno="1331"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>linenum:<sp/>The<sp/>number<sp/>of<sp/>the<sp/>line<sp/>to<sp/>check.</highlight></codeline>
<codeline lineno="1332"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>class_state:<sp/>A<sp/>_ClassState<sp/>instance<sp/>which<sp/>maintains<sp/>information<sp/>about</highlight></codeline>
<codeline lineno="1333"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>current<sp/>stack<sp/>of<sp/>nested<sp/>class<sp/>declarations<sp/>being<sp/>parsed.</highlight></codeline>
<codeline lineno="1334"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>error:<sp/>A<sp/>callable<sp/>to<sp/>which<sp/>errors<sp/>are<sp/>reported,<sp/>which<sp/>takes<sp/>4<sp/>arguments:</highlight></codeline>
<codeline lineno="1335"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>filename,<sp/>line<sp/>number,<sp/>error<sp/>level,<sp/>and<sp/>message</highlight></codeline>
<codeline lineno="1336"><highlight class="stringliteral"><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1337"><highlight class="normal"></highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>Remove<sp/>comments<sp/>from<sp/>the<sp/>line,<sp/>but<sp/>leave<sp/>in<sp/>strings<sp/>for<sp/>now.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1339"><highlight class="normal"><sp/><sp/>line<sp/>=<sp/>clean_lines.lines[linenum]</highlight></codeline>
<codeline lineno="1340"><highlight class="normal"></highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>Search(</highlight><highlight class="stringliteral">r&apos;printf\s*\(.*&quot;.*%[-+<sp/>]?\d*q&apos;</highlight><highlight class="normal">,<sp/>line):</highlight></codeline>
<codeline lineno="1342"><highlight class="normal"><sp/><sp/><sp/><sp/>error(filename,<sp/>linenum,<sp/></highlight><highlight class="stringliteral">&apos;runtime/printf_format&apos;</highlight><highlight class="normal">,<sp/>3,</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;%q<sp/>in<sp/>format<sp/>strings<sp/>is<sp/>deprecated.<sp/><sp/>Use<sp/>%ll<sp/>instead.&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1344"><highlight class="normal"></highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>Search(</highlight><highlight class="stringliteral">r&apos;printf\s*\(.*&quot;.*%\d+\$&apos;</highlight><highlight class="normal">,<sp/>line):</highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><sp/><sp/><sp/><sp/>error(filename,<sp/>linenum,<sp/></highlight><highlight class="stringliteral">&apos;runtime/printf_format&apos;</highlight><highlight class="normal">,<sp/>2,</highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;%N$<sp/>formats<sp/>are<sp/>unconventional.<sp/><sp/>Try<sp/>rewriting<sp/>to<sp/>avoid<sp/>them.&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1348"><highlight class="normal"></highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>Remove<sp/>escaped<sp/>backslashes<sp/>before<sp/>looking<sp/>for<sp/>undefined<sp/>escapes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/>line<sp/>=<sp/>line.replace(</highlight><highlight class="stringliteral">&apos;\\\\&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1351"><highlight class="normal"></highlight></codeline>
<codeline lineno="1352"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>Search(</highlight><highlight class="stringliteral">r&apos;(&quot;|\&apos;).*\\(%|\[|\(|{)&apos;</highlight><highlight class="normal">,<sp/>line):</highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/><sp/><sp/>error(filename,<sp/>linenum,<sp/></highlight><highlight class="stringliteral">&apos;build/printf_format&apos;</highlight><highlight class="normal">,<sp/>3,</highlight></codeline>
<codeline lineno="1354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;%,<sp/>[,<sp/>(,<sp/>and<sp/>{<sp/>are<sp/>undefined<sp/>character<sp/>escapes.<sp/><sp/>Unescape<sp/>them.&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1355"><highlight class="normal"></highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>For<sp/>the<sp/>rest,<sp/>work<sp/>with<sp/>both<sp/>comments<sp/>and<sp/>strings<sp/>removed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/>line<sp/>=<sp/>clean_lines.elided[linenum]</highlight></codeline>
<codeline lineno="1358"><highlight class="normal"></highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>Search(</highlight><highlight class="stringliteral">r&apos;\b(const|volatile|void|char|short|int|long&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&apos;|float|double|signed|unsigned&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&apos;|schar|u?int8|u?int16|u?int32|u?int64)&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&apos;\s+(auto|register|static|extern|typedef)\b&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>line):</highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/><sp/><sp/>error(filename,<sp/>linenum,<sp/></highlight><highlight class="stringliteral">&apos;build/storage_class&apos;</highlight><highlight class="normal">,<sp/>5,</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;Storage<sp/>class<sp/>(static,<sp/>extern,<sp/>typedef,<sp/>etc)<sp/>should<sp/>be<sp/>first.&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1366"><highlight class="normal"></highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>Match(</highlight><highlight class="stringliteral">r&apos;\s*#\s*endif\s*[^/\s]+&apos;</highlight><highlight class="normal">,<sp/>line):</highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/><sp/><sp/>error(filename,<sp/>linenum,<sp/></highlight><highlight class="stringliteral">&apos;build/endif_comment&apos;</highlight><highlight class="normal">,<sp/>5,</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;Uncommented<sp/>text<sp/>after<sp/>#endif<sp/>is<sp/>non-standard.<sp/><sp/>Use<sp/>a<sp/>comment.&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"></highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>Match(</highlight><highlight class="stringliteral">r&apos;\s*class\s+(\w+\s*::\s*)+\w+\s*;&apos;</highlight><highlight class="normal">,<sp/>line):</highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/><sp/><sp/>error(filename,<sp/>linenum,<sp/></highlight><highlight class="stringliteral">&apos;build/forward_decl&apos;</highlight><highlight class="normal">,<sp/>5,</highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;Inner-style<sp/>forward<sp/>declarations<sp/>are<sp/>invalid.<sp/><sp/>Remove<sp/>this<sp/>line.&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1374"><highlight class="normal"></highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>Search(</highlight><highlight class="stringliteral">r&apos;(\w+|[+-]?\d+(\.\d*)?)\s*(&lt;|&gt;)\?=?\s*(\w+|[+-]?\d+)(\.\d*)?&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>line):</highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><sp/><sp/><sp/><sp/>error(filename,<sp/>linenum,<sp/></highlight><highlight class="stringliteral">&apos;build/deprecated&apos;</highlight><highlight class="normal">,<sp/>3,</highlight></codeline>
<codeline lineno="1378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;&gt;?<sp/>and<sp/>&lt;?<sp/>(max<sp/>and<sp/>min)<sp/>operators<sp/>are<sp/>non-standard<sp/>and<sp/>deprecated.&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1379"><highlight class="normal"></highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>Search(</highlight><highlight class="stringliteral">r&apos;^\s*const\s*string\s*&amp;\s*\w+\s*;&apos;</highlight><highlight class="normal">,<sp/>line):</highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>TODO(unknown):<sp/>Could<sp/>it<sp/>be<sp/>expanded<sp/>safely<sp/>to<sp/>arbitrary<sp/>references,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>without<sp/>triggering<sp/>too<sp/>many<sp/>false<sp/>positives?<sp/>The<sp/>first</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>attempt<sp/>triggered<sp/>5<sp/>warnings<sp/>for<sp/>mostly<sp/>benign<sp/>code<sp/>in<sp/>the<sp/>regtest,<sp/>hence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>the<sp/>restriction.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1385"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Here&apos;s<sp/>the<sp/>original<sp/>regexp,<sp/>for<sp/>the<sp/>reference:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1386"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>type_name<sp/>=<sp/>r&apos;\w+((\s*::\s*\w+)|(\s*&lt;\s*\w+?\s*&gt;))?&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>r&apos;\s*const\s*&apos;<sp/>+<sp/>type_name<sp/>+<sp/>&apos;\s*&amp;\s*\w+\s*;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/><sp/><sp/>error(filename,<sp/>linenum,<sp/></highlight><highlight class="stringliteral">&apos;runtime/member_string_references&apos;</highlight><highlight class="normal">,<sp/>2,</highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;const<sp/>string&amp;<sp/>members<sp/>are<sp/>dangerous.<sp/>It<sp/>is<sp/>much<sp/>better<sp/>to<sp/>use<sp/>&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;alternatives,<sp/>such<sp/>as<sp/>pointers<sp/>or<sp/>simple<sp/>constants.&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1391"><highlight class="normal"></highlight></codeline>
<codeline lineno="1392"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>Track<sp/>class<sp/>entry<sp/>and<sp/>exit,<sp/>and<sp/>attempt<sp/>to<sp/>find<sp/>cases<sp/>within<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1393"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>class<sp/>declaration<sp/>that<sp/>don&apos;t<sp/>meet<sp/>the<sp/>C++<sp/>style</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1394"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>guidelines.<sp/>Tracking<sp/>is<sp/>very<sp/>dependent<sp/>on<sp/>the<sp/>code<sp/>matching<sp/>Google</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1395"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>style<sp/>guidelines,<sp/>but<sp/>it<sp/>seems<sp/>to<sp/>perform<sp/>well<sp/>enough<sp/>in<sp/>testing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>to<sp/>be<sp/>a<sp/>worthwhile<sp/>addition<sp/>to<sp/>the<sp/>checks.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1397"><highlight class="normal"><sp/><sp/>classinfo_stack<sp/>=<sp/>class_state.classinfo_stack</highlight></codeline>
<codeline lineno="1398"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>Look<sp/>for<sp/>a<sp/>class<sp/>declaration.<sp/>The<sp/>regexp<sp/>accounts<sp/>for<sp/>decorated<sp/>classes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1399"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>such<sp/>as<sp/>in:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1400"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>class<sp/>LOCKABLE<sp/>API<sp/>Object<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>};</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1402"><highlight class="normal"><sp/><sp/>class_decl_match<sp/>=<sp/>Match(</highlight></codeline>
<codeline lineno="1403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&apos;\s*(template\s*&lt;[\w\s&lt;&gt;,:]*&gt;\s*)?&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;(class|struct)\s+([A-Z_]+\s+)*(\w+(::\w+)*)&apos;</highlight><highlight class="normal">,<sp/>line)</highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>class_decl_match:</highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/><sp/><sp/>classinfo_stack.append(_ClassInfo(</highlight></codeline>
<codeline lineno="1407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>class_decl_match.group(4),<sp/>clean_lines,<sp/>linenum))</highlight></codeline>
<codeline lineno="1408"><highlight class="normal"></highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>Everything<sp/>else<sp/>in<sp/>this<sp/>function<sp/>uses<sp/>the<sp/>top<sp/>of<sp/>the<sp/>stack<sp/>if<sp/>it&apos;s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1410"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>not<sp/>empty.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1411"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>classinfo_stack:</highlight></codeline>
<codeline lineno="1412"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1413"><highlight class="normal"></highlight></codeline>
<codeline lineno="1414"><highlight class="normal"><sp/><sp/>classinfo<sp/>=<sp/>classinfo_stack[-1]</highlight></codeline>
<codeline lineno="1415"><highlight class="normal"></highlight></codeline>
<codeline lineno="1416"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>If<sp/>the<sp/>opening<sp/>brace<sp/>hasn&apos;t<sp/>been<sp/>seen<sp/>look<sp/>for<sp/>it<sp/>and<sp/>also</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1417"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>parent<sp/>class<sp/>declarations.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1418"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>classinfo.seen_open_brace:</highlight></codeline>
<codeline lineno="1419"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>If<sp/>the<sp/>line<sp/>has<sp/>a<sp/>&apos;;&apos;<sp/>in<sp/>it,<sp/>assume<sp/>it&apos;s<sp/>a<sp/>forward<sp/>declaration<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>a<sp/>single-line<sp/>class<sp/>declaration,<sp/>which<sp/>we<sp/>won&apos;t<sp/>process.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1421"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>line.find(</highlight><highlight class="stringliteral">&apos;;&apos;</highlight><highlight class="normal">)<sp/>!=<sp/>-1:</highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>classinfo_stack.pop()</highlight></codeline>
<codeline lineno="1423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1424"><highlight class="normal"><sp/><sp/><sp/><sp/>classinfo.seen_open_brace<sp/>=<sp/>(line.find(</highlight><highlight class="stringliteral">&apos;{&apos;</highlight><highlight class="normal">)<sp/>!=<sp/>-1)</highlight></codeline>
<codeline lineno="1425"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Look<sp/>for<sp/>a<sp/>bare<sp/>&apos;:&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1426"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>Search(</highlight><highlight class="stringliteral">&apos;(^|[^:]):($|[^:])&apos;</highlight><highlight class="normal">,<sp/>line):</highlight></codeline>
<codeline lineno="1427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>classinfo.is_derived<sp/>=<sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1428"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>classinfo.seen_open_brace:</highlight></codeline>
<codeline lineno="1429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>Everything<sp/>else<sp/>in<sp/>this<sp/>function<sp/>is<sp/>for<sp/>after<sp/>open<sp/>brace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1430"><highlight class="normal"></highlight></codeline>
<codeline lineno="1431"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>The<sp/>class<sp/>may<sp/>have<sp/>been<sp/>declared<sp/>with<sp/>namespace<sp/>or<sp/>classname<sp/>qualifiers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1432"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>The<sp/>constructor<sp/>and<sp/>destructor<sp/>will<sp/>not<sp/>have<sp/>those<sp/>qualifiers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1433"><highlight class="normal"><sp/><sp/>base_classname<sp/>=<sp/>classinfo.name.split(</highlight><highlight class="stringliteral">&apos;::&apos;</highlight><highlight class="normal">)[-1]</highlight></codeline>
<codeline lineno="1434"><highlight class="normal"></highlight></codeline>
<codeline lineno="1435"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>Look<sp/>for<sp/>single-argument<sp/>constructors<sp/>that<sp/>aren&apos;t<sp/>marked<sp/>explicit.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1436"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>Technically<sp/>a<sp/>valid<sp/>construct,<sp/>but<sp/>against<sp/>style.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1437"><highlight class="normal"><sp/><sp/>args<sp/>=<sp/>Match(</highlight><highlight class="stringliteral">r&apos;\s+(?:inline\s+)?%s\s*\(([^,()]+)\)&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>%<sp/>re.escape(base_classname),</highlight></codeline>
<codeline lineno="1439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>line)</highlight></codeline>
<codeline lineno="1440"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(args<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>args.group(1)<sp/>!=<sp/></highlight><highlight class="stringliteral">&apos;void&apos;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>Match(</highlight><highlight class="stringliteral">r&apos;(const\s+)?%s\s*(?:&lt;\w+&gt;\s*)?&amp;&apos;</highlight><highlight class="normal"><sp/>%<sp/>re.escape(base_classname),</highlight></codeline>
<codeline lineno="1443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>args.group(1).strip())):</highlight></codeline>
<codeline lineno="1444"><highlight class="normal"><sp/><sp/><sp/><sp/>error(filename,<sp/>linenum,<sp/></highlight><highlight class="stringliteral">&apos;runtime/explicit&apos;</highlight><highlight class="normal">,<sp/>5,</highlight></codeline>
<codeline lineno="1445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;Single-argument<sp/>constructors<sp/>should<sp/>be<sp/>marked<sp/>explicit.&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1446"><highlight class="normal"></highlight></codeline>
<codeline lineno="1447"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>Look<sp/>for<sp/>methods<sp/>declared<sp/>virtual.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1448"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>Search(</highlight><highlight class="stringliteral">r&apos;\bvirtual\b&apos;</highlight><highlight class="normal">,<sp/>line):</highlight></codeline>
<codeline lineno="1449"><highlight class="normal"><sp/><sp/><sp/><sp/>classinfo.virtual_method_linenumber<sp/>=<sp/>linenum</highlight></codeline>
<codeline lineno="1450"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Only<sp/>look<sp/>for<sp/>a<sp/>destructor<sp/>declaration<sp/>on<sp/>the<sp/>same<sp/>line.<sp/>It<sp/>would</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1451"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>be<sp/>extremely<sp/>unlikely<sp/>for<sp/>the<sp/>destructor<sp/>declaration<sp/>to<sp/>occupy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1452"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>more<sp/>than<sp/>one<sp/>line.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1453"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>Search(</highlight><highlight class="stringliteral">r&apos;~%s\s*\(&apos;</highlight><highlight class="normal"><sp/>%<sp/>base_classname,<sp/>line):</highlight></codeline>
<codeline lineno="1454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>classinfo.has_virtual_destructor<sp/>=<sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1455"><highlight class="normal"></highlight></codeline>
<codeline lineno="1456"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>Look<sp/>for<sp/>class<sp/>end.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1457"><highlight class="normal"><sp/><sp/>brace_depth<sp/>=<sp/>classinfo.brace_depth</highlight></codeline>
<codeline lineno="1458"><highlight class="normal"><sp/><sp/>brace_depth<sp/>=<sp/>brace_depth<sp/>+<sp/>line.count(</highlight><highlight class="stringliteral">&apos;{&apos;</highlight><highlight class="normal">)<sp/>-<sp/>line.count(</highlight><highlight class="stringliteral">&apos;}&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1459"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>brace_depth<sp/>&lt;=<sp/>0:</highlight></codeline>
<codeline lineno="1460"><highlight class="normal"><sp/><sp/><sp/><sp/>classinfo<sp/>=<sp/>classinfo_stack.pop()</highlight></codeline>
<codeline lineno="1461"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Try<sp/>to<sp/>detect<sp/>missing<sp/>virtual<sp/>destructor<sp/>declarations.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1462"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>For<sp/>now,<sp/>only<sp/>warn<sp/>if<sp/>a<sp/>non-derived<sp/>class<sp/>with<sp/>virtual<sp/>methods<sp/>lacks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1463"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>a<sp/>virtual<sp/>destructor.<sp/>This<sp/>is<sp/>to<sp/>make<sp/>it<sp/>less<sp/>likely<sp/>that<sp/>people<sp/>will</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1464"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>declare<sp/>derived<sp/>virtual<sp/>destructors<sp/>without<sp/>declaring<sp/>the<sp/>base</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1465"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>destructor<sp/>virtual.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1466"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((classinfo.virtual_method_linenumber<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>classinfo.has_virtual_destructor)<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>classinfo.is_derived)):<sp/><sp/></highlight><highlight class="comment">#<sp/>Only<sp/>warn<sp/>for<sp/>base<sp/>classes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(filename,<sp/>classinfo.linenum,<sp/></highlight><highlight class="stringliteral">&apos;runtime/virtual&apos;</highlight><highlight class="normal">,<sp/>4,</highlight></codeline>
<codeline lineno="1470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;The<sp/>class<sp/>%s<sp/>probably<sp/>needs<sp/>a<sp/>virtual<sp/>destructor<sp/>due<sp/>to<sp/>&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;having<sp/>virtual<sp/>method(s),<sp/>one<sp/>declared<sp/>at<sp/>line<sp/>%d.&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>%<sp/>(classinfo.name,<sp/>classinfo.virtual_method_linenumber))</highlight></codeline>
<codeline lineno="1473"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1474"><highlight class="normal"><sp/><sp/><sp/><sp/>classinfo.brace_depth<sp/>=<sp/>brace_depth</highlight></codeline>
<codeline lineno="1475"><highlight class="normal"></highlight></codeline>
<codeline lineno="1476"><highlight class="normal"></highlight></codeline>
<codeline lineno="1477"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">CheckSpacingForFunctionCall(filename,<sp/>line,<sp/>linenum,<sp/>error):</highlight></codeline>
<codeline lineno="1478"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Checks<sp/>for<sp/>the<sp/>correctness<sp/>of<sp/>various<sp/>spacing<sp/>around<sp/>function<sp/>calls.</highlight></codeline>
<codeline lineno="1479"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1480"><highlight class="stringliteral"><sp/><sp/>Args:</highlight></codeline>
<codeline lineno="1481"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>filename:<sp/>The<sp/>name<sp/>of<sp/>the<sp/>current<sp/>file.</highlight></codeline>
<codeline lineno="1482"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>line:<sp/>The<sp/>text<sp/>of<sp/>the<sp/>line<sp/>to<sp/>check.</highlight></codeline>
<codeline lineno="1483"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>linenum:<sp/>The<sp/>number<sp/>of<sp/>the<sp/>line<sp/>to<sp/>check.</highlight></codeline>
<codeline lineno="1484"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>error:<sp/>The<sp/>function<sp/>to<sp/>call<sp/>with<sp/>any<sp/>errors<sp/>found.</highlight></codeline>
<codeline lineno="1485"><highlight class="stringliteral"><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1486"><highlight class="normal"></highlight></codeline>
<codeline lineno="1487"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>Since<sp/>function<sp/>calls<sp/>often<sp/>occur<sp/>inside<sp/>if/for/while/switch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1488"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>expressions<sp/>-<sp/>which<sp/>have<sp/>their<sp/>own,<sp/>more<sp/>liberal<sp/>conventions<sp/>-<sp/>we</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1489"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>first<sp/>see<sp/>if<sp/>we<sp/>should<sp/>be<sp/>looking<sp/>inside<sp/>such<sp/>an<sp/>expression<sp/>for<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1490"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>function<sp/>call,<sp/>to<sp/>which<sp/>we<sp/>can<sp/>apply<sp/>more<sp/>strict<sp/>standards.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1491"><highlight class="normal"><sp/><sp/>fncall<sp/>=<sp/>line<sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>if<sp/>there&apos;s<sp/>no<sp/>control<sp/>flow<sp/>construct,<sp/>look<sp/>at<sp/>whole<sp/>line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1492"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>pattern<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">r&apos;\bif\s*\((.*)\)\s*{&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&apos;\bfor\s*\((.*)\)\s*{&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&apos;\bwhile\s*\((.*)\)\s*[{;]&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&apos;\bswitch\s*\((.*)\)\s*{&apos;</highlight><highlight class="normal">):</highlight></codeline>
<codeline lineno="1496"><highlight class="normal"><sp/><sp/><sp/><sp/>match<sp/>=<sp/>Search(pattern,<sp/>line)</highlight></codeline>
<codeline lineno="1497"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>match:</highlight></codeline>
<codeline lineno="1498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fncall<sp/>=<sp/>match.group(1)<sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>look<sp/>inside<sp/>the<sp/>parens<sp/>for<sp/>function<sp/>calls</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1500"><highlight class="normal"></highlight></codeline>
<codeline lineno="1501"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>Except<sp/>in<sp/>if/for/while/switch,<sp/>there<sp/>should<sp/>never<sp/>be<sp/>space</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1502"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>immediately<sp/>inside<sp/>parens<sp/>(eg<sp/>&quot;f(<sp/>3,<sp/>4<sp/>)&quot;).<sp/><sp/>We<sp/>make<sp/>an<sp/>exception</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1503"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>for<sp/>nested<sp/>parens<sp/>(<sp/>(a+b)<sp/>+<sp/>c<sp/>).<sp/><sp/>Likewise,<sp/>there<sp/>should<sp/>never<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1504"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>a<sp/>space<sp/>before<sp/>a<sp/>(<sp/>when<sp/>it&apos;s<sp/>a<sp/>function<sp/>argument.<sp/><sp/>I<sp/>assume<sp/>it&apos;s<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1505"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>function<sp/>argument<sp/>when<sp/>the<sp/>char<sp/>before<sp/>the<sp/>whitespace<sp/>is<sp/>legal<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1506"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>a<sp/>function<sp/>name<sp/>(alnum<sp/>+<sp/>_)<sp/>and<sp/>we&apos;re<sp/>not<sp/>starting<sp/>a<sp/>macro.<sp/>Also<sp/>ignore</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1507"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>pointers<sp/>and<sp/>references<sp/>to<sp/>arrays<sp/>and<sp/>functions<sp/>coz<sp/>they&apos;re<sp/>too<sp/>tricky:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1508"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>we<sp/>use<sp/>a<sp/>very<sp/>simple<sp/>way<sp/>to<sp/>recognize<sp/>these:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1509"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>&quot;<sp/>(something)(maybe-something)&quot;<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1510"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>&quot;<sp/>(something)(maybe-something,&quot;<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1511"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>&quot;<sp/>(something)[something]&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1512"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>Note<sp/>that<sp/>we<sp/>assume<sp/>the<sp/>contents<sp/>of<sp/>[]<sp/>to<sp/>be<sp/>short<sp/>enough<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1513"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>they&apos;ll<sp/>never<sp/>need<sp/>to<sp/>wrap.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1514"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><sp/></highlight><highlight class="comment">#<sp/>Ignore<sp/>control<sp/>structures.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>Search(</highlight><highlight class="stringliteral">r&apos;\b(if|for|while|switch|return|delete)\b&apos;</highlight><highlight class="normal">,<sp/>fncall)<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Ignore<sp/>pointers/references<sp/>to<sp/>functions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>Search(</highlight><highlight class="stringliteral">r&apos;<sp/>\([^)]+\)\([^)]*(\)|,$)&apos;</highlight><highlight class="normal">,<sp/>fncall)<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Ignore<sp/>pointers/references<sp/>to<sp/>arrays.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>Search(</highlight><highlight class="stringliteral">r&apos;<sp/>\([^)]+\)\[[^\]]+\]&apos;</highlight><highlight class="normal">,<sp/>fncall)):</highlight></codeline>
<codeline lineno="1520"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>Search(</highlight><highlight class="stringliteral">r&apos;\w\s*\(\s(?!\s*\\$)&apos;</highlight><highlight class="normal">,<sp/>fncall):<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>a<sp/>(<sp/>used<sp/>for<sp/>a<sp/>fn<sp/>call</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(filename,<sp/>linenum,<sp/></highlight><highlight class="stringliteral">&apos;whitespace/parens&apos;</highlight><highlight class="normal">,<sp/>4,</highlight></codeline>
<codeline lineno="1522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;Extra<sp/>space<sp/>after<sp/>(<sp/>in<sp/>function<sp/>call&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1523"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>Search(</highlight><highlight class="stringliteral">r&apos;\(\s+(?!(\s*\\)|\()&apos;</highlight><highlight class="normal">,<sp/>fncall):</highlight></codeline>
<codeline lineno="1524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(filename,<sp/>linenum,<sp/></highlight><highlight class="stringliteral">&apos;whitespace/parens&apos;</highlight><highlight class="normal">,<sp/>2,</highlight></codeline>
<codeline lineno="1525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;Extra<sp/>space<sp/>after<sp/>(&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1526"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Search(</highlight><highlight class="stringliteral">r&apos;\w\s+\(&apos;</highlight><highlight class="normal">,<sp/>fncall)<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>Search(</highlight><highlight class="stringliteral">r&apos;#\s*define|typedef&apos;</highlight><highlight class="normal">,<sp/>fncall)):</highlight></codeline>
<codeline lineno="1528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(filename,<sp/>linenum,<sp/></highlight><highlight class="stringliteral">&apos;whitespace/parens&apos;</highlight><highlight class="normal">,<sp/>4,</highlight></codeline>
<codeline lineno="1529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;Extra<sp/>space<sp/>before<sp/>(<sp/>in<sp/>function<sp/>call&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1530"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>If<sp/>the<sp/>)<sp/>is<sp/>followed<sp/>only<sp/>by<sp/>a<sp/>newline<sp/>or<sp/>a<sp/>{<sp/>+<sp/>newline,<sp/>assume<sp/>it&apos;s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1531"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>part<sp/>of<sp/>a<sp/>control<sp/>statement<sp/>(if/while/etc),<sp/>and<sp/>don&apos;t<sp/>complain</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1532"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>Search(</highlight><highlight class="stringliteral">r&apos;[^)]\s+\)\s*[^{\s]&apos;</highlight><highlight class="normal">,<sp/>fncall):</highlight></codeline>
<codeline lineno="1533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>If<sp/>the<sp/>closing<sp/>parenthesis<sp/>is<sp/>preceded<sp/>by<sp/>only<sp/>whitespaces,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>try<sp/>to<sp/>give<sp/>a<sp/>more<sp/>descriptive<sp/>error<sp/>message.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>Search(</highlight><highlight class="stringliteral">r&apos;^\s+\)&apos;</highlight><highlight class="normal">,<sp/>fncall):</highlight></codeline>
<codeline lineno="1536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error(filename,<sp/>linenum,<sp/></highlight><highlight class="stringliteral">&apos;whitespace/parens&apos;</highlight><highlight class="normal">,<sp/>2,</highlight></codeline>
<codeline lineno="1537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;Closing<sp/>)<sp/>should<sp/>be<sp/>moved<sp/>to<sp/>the<sp/>previous<sp/>line&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error(filename,<sp/>linenum,<sp/></highlight><highlight class="stringliteral">&apos;whitespace/parens&apos;</highlight><highlight class="normal">,<sp/>2,</highlight></codeline>
<codeline lineno="1540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;Extra<sp/>space<sp/>before<sp/>)&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1541"><highlight class="normal"></highlight></codeline>
<codeline lineno="1542"><highlight class="normal"></highlight></codeline>
<codeline lineno="1543"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">IsBlankLine(line):</highlight></codeline>
<codeline lineno="1544"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Returns<sp/>true<sp/>if<sp/>the<sp/>given<sp/>line<sp/>is<sp/>blank.</highlight></codeline>
<codeline lineno="1545"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1546"><highlight class="stringliteral"><sp/><sp/>We<sp/>consider<sp/>a<sp/>line<sp/>to<sp/>be<sp/>blank<sp/>if<sp/>the<sp/>line<sp/>is<sp/>empty<sp/>or<sp/>consists<sp/>of</highlight></codeline>
<codeline lineno="1547"><highlight class="stringliteral"><sp/><sp/>only<sp/>white<sp/>spaces.</highlight></codeline>
<codeline lineno="1548"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1549"><highlight class="stringliteral"><sp/><sp/>Args:</highlight></codeline>
<codeline lineno="1550"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>line:<sp/>A<sp/>line<sp/>of<sp/>a<sp/>string.</highlight></codeline>
<codeline lineno="1551"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1552"><highlight class="stringliteral"><sp/><sp/>Returns:</highlight></codeline>
<codeline lineno="1553"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>True,<sp/>if<sp/>the<sp/>given<sp/>line<sp/>is<sp/>blank.</highlight></codeline>
<codeline lineno="1554"><highlight class="stringliteral"><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1555"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>line<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>line.isspace()</highlight></codeline>
<codeline lineno="1556"><highlight class="normal"></highlight></codeline>
<codeline lineno="1557"><highlight class="normal"></highlight></codeline>
<codeline lineno="1558"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">CheckForFunctionLengths(filename,<sp/>clean_lines,<sp/>linenum,</highlight></codeline>
<codeline lineno="1559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>function_state,<sp/>error):</highlight></codeline>
<codeline lineno="1560"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Reports<sp/>for<sp/>long<sp/>function<sp/>bodies.</highlight></codeline>
<codeline lineno="1561"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1562"><highlight class="stringliteral"><sp/><sp/>For<sp/>an<sp/>overview<sp/>why<sp/>this<sp/>is<sp/>done,<sp/>see:</highlight></codeline>
<codeline lineno="1563"><highlight class="stringliteral"><sp/><sp/>http://google-styleguide.googlecode.com/svn/trunk/cppguide.xml#Write_Short_Functions</highlight></codeline>
<codeline lineno="1564"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1565"><highlight class="stringliteral"><sp/><sp/>Uses<sp/>a<sp/>simplistic<sp/>algorithm<sp/>assuming<sp/>other<sp/>style<sp/>guidelines</highlight></codeline>
<codeline lineno="1566"><highlight class="stringliteral"><sp/><sp/>(especially<sp/>spacing)<sp/>are<sp/>followed.</highlight></codeline>
<codeline lineno="1567"><highlight class="stringliteral"><sp/><sp/>Only<sp/>checks<sp/>unindented<sp/>functions,<sp/>so<sp/>class<sp/>members<sp/>are<sp/>unchecked.</highlight></codeline>
<codeline lineno="1568"><highlight class="stringliteral"><sp/><sp/>Trivial<sp/>bodies<sp/>are<sp/>unchecked,<sp/>so<sp/>constructors<sp/>with<sp/>huge<sp/>initializer<sp/>lists</highlight></codeline>
<codeline lineno="1569"><highlight class="stringliteral"><sp/><sp/>may<sp/>be<sp/>missed.</highlight></codeline>
<codeline lineno="1570"><highlight class="stringliteral"><sp/><sp/>Blank/comment<sp/>lines<sp/>are<sp/>not<sp/>counted<sp/>so<sp/>as<sp/>to<sp/>avoid<sp/>encouraging<sp/>the<sp/>removal</highlight></codeline>
<codeline lineno="1571"><highlight class="stringliteral"><sp/><sp/>of<sp/>vertical<sp/>space<sp/>and<sp/>comments<sp/>just<sp/>to<sp/>get<sp/>through<sp/>a<sp/>lint<sp/>check.</highlight></codeline>
<codeline lineno="1572"><highlight class="stringliteral"><sp/><sp/>NOLINT<sp/>*on<sp/>the<sp/>last<sp/>line<sp/>of<sp/>a<sp/>function*<sp/>disables<sp/>this<sp/>check.</highlight></codeline>
<codeline lineno="1573"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1574"><highlight class="stringliteral"><sp/><sp/>Args:</highlight></codeline>
<codeline lineno="1575"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>filename:<sp/>The<sp/>name<sp/>of<sp/>the<sp/>current<sp/>file.</highlight></codeline>
<codeline lineno="1576"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>clean_lines:<sp/>A<sp/>CleansedLines<sp/>instance<sp/>containing<sp/>the<sp/>file.</highlight></codeline>
<codeline lineno="1577"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>linenum:<sp/>The<sp/>number<sp/>of<sp/>the<sp/>line<sp/>to<sp/>check.</highlight></codeline>
<codeline lineno="1578"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>function_state:<sp/>Current<sp/>function<sp/>name<sp/>and<sp/>lines<sp/>in<sp/>body<sp/>so<sp/>far.</highlight></codeline>
<codeline lineno="1579"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>error:<sp/>The<sp/>function<sp/>to<sp/>call<sp/>with<sp/>any<sp/>errors<sp/>found.</highlight></codeline>
<codeline lineno="1580"><highlight class="stringliteral"><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1581"><highlight class="normal"><sp/><sp/>lines<sp/>=<sp/>clean_lines.lines</highlight></codeline>
<codeline lineno="1582"><highlight class="normal"><sp/><sp/>line<sp/>=<sp/>lines[linenum]</highlight></codeline>
<codeline lineno="1583"><highlight class="normal"><sp/><sp/>raw<sp/>=<sp/>clean_lines.raw_lines</highlight></codeline>
<codeline lineno="1584"><highlight class="normal"><sp/><sp/>raw_line<sp/>=<sp/>raw[linenum]</highlight></codeline>
<codeline lineno="1585"><highlight class="normal"><sp/><sp/>joined_line<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1586"><highlight class="normal"></highlight></codeline>
<codeline lineno="1587"><highlight class="normal"><sp/><sp/>starting_func<sp/>=<sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1588"><highlight class="normal"><sp/><sp/>regexp<sp/>=<sp/></highlight><highlight class="stringliteral">r&apos;(\w(\w|::|\*|\&amp;|\s)*)\(&apos;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>decls<sp/>*<sp/>&amp;<sp/>space::name(<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1589"><highlight class="normal"><sp/><sp/>match_result<sp/>=<sp/>Match(regexp,<sp/>line)</highlight></codeline>
<codeline lineno="1590"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>match_result:</highlight></codeline>
<codeline lineno="1591"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>If<sp/>the<sp/>name<sp/>is<sp/>all<sp/>caps<sp/>and<sp/>underscores,<sp/>figure<sp/>it&apos;s<sp/>a<sp/>macro<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1592"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>ignore<sp/>it,<sp/>unless<sp/>it&apos;s<sp/>TEST<sp/>or<sp/>TEST_F.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1593"><highlight class="normal"><sp/><sp/><sp/><sp/>function_name<sp/>=<sp/>match_result.group(1).split()[-1]</highlight></codeline>
<codeline lineno="1594"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>function_name<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;TEST&apos;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>function_name<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;TEST_F&apos;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>(</highlight></codeline>
<codeline lineno="1595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>Match(</highlight><highlight class="stringliteral">r&apos;[A-Z_]+$&apos;</highlight><highlight class="normal">,<sp/>function_name)):</highlight></codeline>
<codeline lineno="1596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>starting_func<sp/>=<sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1597"><highlight class="normal"></highlight></codeline>
<codeline lineno="1598"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>starting_func:</highlight></codeline>
<codeline lineno="1599"><highlight class="normal"><sp/><sp/><sp/><sp/>body_found<sp/>=<sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1600"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>start_linenum<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>xrange(linenum,<sp/>clean_lines.NumLines()):</highlight></codeline>
<codeline lineno="1601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>start_line<sp/>=<sp/>lines[start_linenum]</highlight></codeline>
<codeline lineno="1602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>joined_line<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>start_line.lstrip()</highlight></codeline>
<codeline lineno="1603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>Search(</highlight><highlight class="stringliteral">r&apos;(;|})&apos;</highlight><highlight class="normal">,<sp/>start_line):<sp/><sp/></highlight><highlight class="comment">#<sp/>Declarations<sp/>and<sp/>trivial<sp/>functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body_found<sp/>=<sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>...<sp/>ignore</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>Search(</highlight><highlight class="stringliteral">r&apos;{&apos;</highlight><highlight class="normal">,<sp/>start_line):</highlight></codeline>
<codeline lineno="1607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body_found<sp/>=<sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>function<sp/>=<sp/>Search(</highlight><highlight class="stringliteral">r&apos;((\w|:)*)\(&apos;</highlight><highlight class="normal">,<sp/>line).group(1)</highlight></codeline>
<codeline lineno="1609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>Match(</highlight><highlight class="stringliteral">r&apos;TEST&apos;</highlight><highlight class="normal">,<sp/>function):<sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Handle<sp/>TEST...<sp/>macros</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parameter_regexp<sp/>=<sp/>Search(</highlight><highlight class="stringliteral">r&apos;(\(.*\))&apos;</highlight><highlight class="normal">,<sp/>joined_line)</highlight></codeline>
<codeline lineno="1611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>parameter_regexp:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Ignore<sp/>bad<sp/>syntax</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>function<sp/>+=<sp/>parameter_regexp.group(1)</highlight></codeline>
<codeline lineno="1613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>function<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;()&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>function_state.Begin(function)</highlight></codeline>
<codeline lineno="1616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1617"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>body_found:</highlight></codeline>
<codeline lineno="1618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>No<sp/>body<sp/>for<sp/>the<sp/>function<sp/>(or<sp/>evidence<sp/>of<sp/>a<sp/>non-function)<sp/>was<sp/>found.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(filename,<sp/>linenum,<sp/></highlight><highlight class="stringliteral">&apos;readability/fn_size&apos;</highlight><highlight class="normal">,<sp/>5,</highlight></codeline>
<codeline lineno="1620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;Lint<sp/>failed<sp/>to<sp/>find<sp/>start<sp/>of<sp/>function<sp/>body.&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1621"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>Match(</highlight><highlight class="stringliteral">r&apos;^\}\s*$&apos;</highlight><highlight class="normal">,<sp/>line):<sp/><sp/></highlight><highlight class="comment">#<sp/>function<sp/>end</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1622"><highlight class="normal"><sp/><sp/><sp/><sp/>function_state.Check(error,<sp/>filename,<sp/>linenum)</highlight></codeline>
<codeline lineno="1623"><highlight class="normal"><sp/><sp/><sp/><sp/>function_state.End()</highlight></codeline>
<codeline lineno="1624"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>Match(</highlight><highlight class="stringliteral">r&apos;^\s*$&apos;</highlight><highlight class="normal">,<sp/>line):</highlight></codeline>
<codeline lineno="1625"><highlight class="normal"><sp/><sp/><sp/><sp/>function_state.Count()<sp/><sp/></highlight><highlight class="comment">#<sp/>Count<sp/>non-blank/non-comment<sp/>lines.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1626"><highlight class="normal"></highlight></codeline>
<codeline lineno="1627"><highlight class="normal"></highlight></codeline>
<codeline lineno="1628"><highlight class="normal">_RE_PATTERN_TODO<sp/>=<sp/>re.compile(</highlight><highlight class="stringliteral">r&apos;^//(\s*)TODO(\(.+?\))?:?(\s|$)?&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1629"><highlight class="normal"></highlight></codeline>
<codeline lineno="1630"><highlight class="normal"></highlight></codeline>
<codeline lineno="1631"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">CheckComment(comment,<sp/>filename,<sp/>linenum,<sp/>error):</highlight></codeline>
<codeline lineno="1632"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Checks<sp/>for<sp/>common<sp/>mistakes<sp/>in<sp/>TODO<sp/>comments.</highlight></codeline>
<codeline lineno="1633"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1634"><highlight class="stringliteral"><sp/><sp/>Args:</highlight></codeline>
<codeline lineno="1635"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>comment:<sp/>The<sp/>text<sp/>of<sp/>the<sp/>comment<sp/>from<sp/>the<sp/>line<sp/>in<sp/>question.</highlight></codeline>
<codeline lineno="1636"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>filename:<sp/>The<sp/>name<sp/>of<sp/>the<sp/>current<sp/>file.</highlight></codeline>
<codeline lineno="1637"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>linenum:<sp/>The<sp/>number<sp/>of<sp/>the<sp/>line<sp/>to<sp/>check.</highlight></codeline>
<codeline lineno="1638"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>error:<sp/>The<sp/>function<sp/>to<sp/>call<sp/>with<sp/>any<sp/>errors<sp/>found.</highlight></codeline>
<codeline lineno="1639"><highlight class="stringliteral"><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1640"><highlight class="normal"><sp/><sp/>match<sp/>=<sp/>_RE_PATTERN_TODO.match(comment)</highlight></codeline>
<codeline lineno="1641"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>match:</highlight></codeline>
<codeline lineno="1642"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>One<sp/>whitespace<sp/>is<sp/>correct;<sp/>zero<sp/>whitespace<sp/>is<sp/>handled<sp/>elsewhere.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1643"><highlight class="normal"><sp/><sp/><sp/><sp/>leading_whitespace<sp/>=<sp/>match.group(1)</highlight></codeline>
<codeline lineno="1644"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>len(leading_whitespace)<sp/>&gt;<sp/>1:</highlight></codeline>
<codeline lineno="1645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(filename,<sp/>linenum,<sp/></highlight><highlight class="stringliteral">&apos;whitespace/todo&apos;</highlight><highlight class="normal">,<sp/>2,</highlight></codeline>
<codeline lineno="1646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;Too<sp/>many<sp/>spaces<sp/>before<sp/>TODO&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1647"><highlight class="normal"></highlight></codeline>
<codeline lineno="1648"><highlight class="normal"><sp/><sp/><sp/><sp/>username<sp/>=<sp/>match.group(2)</highlight></codeline>
<codeline lineno="1649"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>username:</highlight></codeline>
<codeline lineno="1650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(filename,<sp/>linenum,<sp/></highlight><highlight class="stringliteral">&apos;readability/todo&apos;</highlight><highlight class="normal">,<sp/>2,</highlight></codeline>
<codeline lineno="1651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;Missing<sp/>username<sp/>in<sp/>TODO;<sp/>it<sp/>should<sp/>look<sp/>like<sp/>&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;&quot;//<sp/>TODO(my_username):<sp/>Stuff.&quot;&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1653"><highlight class="normal"></highlight></codeline>
<codeline lineno="1654"><highlight class="normal"><sp/><sp/><sp/><sp/>middle_whitespace<sp/>=<sp/>match.group(3)</highlight></codeline>
<codeline lineno="1655"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Comparisons<sp/>made<sp/>explicit<sp/>for<sp/>correctness<sp/>--<sp/>pylint:<sp/>disable-msg=C6403</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1656"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>middle_whitespace<sp/>!=<sp/></highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>middle_whitespace<sp/>!=<sp/></highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(filename,<sp/>linenum,<sp/></highlight><highlight class="stringliteral">&apos;whitespace/todo&apos;</highlight><highlight class="normal">,<sp/>2,</highlight></codeline>
<codeline lineno="1658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;TODO(my_username)<sp/>should<sp/>be<sp/>followed<sp/>by<sp/>a<sp/>space&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1659"><highlight class="normal"></highlight></codeline>
<codeline lineno="1660"><highlight class="normal"></highlight></codeline>
<codeline lineno="1661"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">CheckSpacing(filename,<sp/>clean_lines,<sp/>linenum,<sp/>error):</highlight></codeline>
<codeline lineno="1662"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Checks<sp/>for<sp/>the<sp/>correctness<sp/>of<sp/>various<sp/>spacing<sp/>issues<sp/>in<sp/>the<sp/>code.</highlight></codeline>
<codeline lineno="1663"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1664"><highlight class="stringliteral"><sp/><sp/>Things<sp/>we<sp/>check<sp/>for:<sp/>spaces<sp/>around<sp/>operators,<sp/>spaces<sp/>after</highlight></codeline>
<codeline lineno="1665"><highlight class="stringliteral"><sp/><sp/>if/for/while/switch,<sp/>no<sp/>spaces<sp/>around<sp/>parens<sp/>in<sp/>function<sp/>calls,<sp/>two</highlight></codeline>
<codeline lineno="1666"><highlight class="stringliteral"><sp/><sp/>spaces<sp/>between<sp/>code<sp/>and<sp/>comment,<sp/>don&apos;t<sp/>start<sp/>a<sp/>block<sp/>with<sp/>a<sp/>blank</highlight></codeline>
<codeline lineno="1667"><highlight class="stringliteral"><sp/><sp/>line,<sp/>don&apos;t<sp/>end<sp/>a<sp/>function<sp/>with<sp/>a<sp/>blank<sp/>line,<sp/>don&apos;t<sp/>add<sp/>a<sp/>blank<sp/>line</highlight></codeline>
<codeline lineno="1668"><highlight class="stringliteral"><sp/><sp/>after<sp/>public/protected/private,<sp/>don&apos;t<sp/>have<sp/>too<sp/>many<sp/>blank<sp/>lines<sp/>in<sp/>a<sp/>row.</highlight></codeline>
<codeline lineno="1669"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1670"><highlight class="stringliteral"><sp/><sp/>Args:</highlight></codeline>
<codeline lineno="1671"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>filename:<sp/>The<sp/>name<sp/>of<sp/>the<sp/>current<sp/>file.</highlight></codeline>
<codeline lineno="1672"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>clean_lines:<sp/>A<sp/>CleansedLines<sp/>instance<sp/>containing<sp/>the<sp/>file.</highlight></codeline>
<codeline lineno="1673"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>linenum:<sp/>The<sp/>number<sp/>of<sp/>the<sp/>line<sp/>to<sp/>check.</highlight></codeline>
<codeline lineno="1674"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>error:<sp/>The<sp/>function<sp/>to<sp/>call<sp/>with<sp/>any<sp/>errors<sp/>found.</highlight></codeline>
<codeline lineno="1675"><highlight class="stringliteral"><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1676"><highlight class="normal"></highlight></codeline>
<codeline lineno="1677"><highlight class="normal"><sp/><sp/>raw<sp/>=<sp/>clean_lines.raw_lines</highlight></codeline>
<codeline lineno="1678"><highlight class="normal"><sp/><sp/>line<sp/>=<sp/>raw[linenum]</highlight></codeline>
<codeline lineno="1679"><highlight class="normal"></highlight></codeline>
<codeline lineno="1680"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>Before<sp/>nixing<sp/>comments,<sp/>check<sp/>if<sp/>the<sp/>line<sp/>is<sp/>blank<sp/>for<sp/>no<sp/>good</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1681"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>reason.<sp/><sp/>This<sp/>includes<sp/>the<sp/>first<sp/>line<sp/>after<sp/>a<sp/>block<sp/>is<sp/>opened,<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1682"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>blank<sp/>lines<sp/>at<sp/>the<sp/>end<sp/>of<sp/>a<sp/>function<sp/>(ie,<sp/>right<sp/>before<sp/>a<sp/>line<sp/>like<sp/>&apos;}&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1683"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>IsBlankLine(line):</highlight></codeline>
<codeline lineno="1684"><highlight class="normal"><sp/><sp/><sp/><sp/>elided<sp/>=<sp/>clean_lines.elided</highlight></codeline>
<codeline lineno="1685"><highlight class="normal"><sp/><sp/><sp/><sp/>prev_line<sp/>=<sp/>elided[linenum<sp/>-<sp/>1]</highlight></codeline>
<codeline lineno="1686"><highlight class="normal"><sp/><sp/><sp/><sp/>prevbrace<sp/>=<sp/>prev_line.rfind(</highlight><highlight class="stringliteral">&apos;{&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1687"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>TODO(unknown):<sp/>Don&apos;t<sp/>complain<sp/>if<sp/>line<sp/>before<sp/>blank<sp/>line,<sp/>and<sp/>line<sp/>after,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1688"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>both<sp/>start<sp/>with<sp/>alnums<sp/>and<sp/>are<sp/>indented<sp/>the<sp/>same<sp/>amount.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1689"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>This<sp/>ignores<sp/>whitespace<sp/>at<sp/>the<sp/>start<sp/>of<sp/>a<sp/>namespace<sp/>block</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1690"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>because<sp/>those<sp/>are<sp/>not<sp/>usually<sp/>indented.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1691"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(prevbrace<sp/>!=<sp/>-1<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>prev_line[prevbrace:].find(</highlight><highlight class="stringliteral">&apos;}&apos;</highlight><highlight class="normal">)<sp/>==<sp/>-1</highlight></codeline>
<codeline lineno="1692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>prev_line[:prevbrace].find(</highlight><highlight class="stringliteral">&apos;namespace&apos;</highlight><highlight class="normal">)<sp/>==<sp/>-1):</highlight></codeline>
<codeline lineno="1693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>OK,<sp/>we<sp/>have<sp/>a<sp/>blank<sp/>line<sp/>at<sp/>the<sp/>start<sp/>of<sp/>a<sp/>code<sp/>block.<sp/><sp/>Before<sp/>we</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>complain,<sp/>we<sp/>check<sp/>if<sp/>it<sp/>is<sp/>an<sp/>exception<sp/>to<sp/>the<sp/>rule:<sp/>The<sp/>previous</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>non-empty<sp/>line<sp/>has<sp/>the<sp/>parameters<sp/>of<sp/>a<sp/>function<sp/>header<sp/>that<sp/>are<sp/>indented</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>4<sp/>spaces<sp/>(because<sp/>they<sp/>did<sp/>not<sp/>fit<sp/>in<sp/>a<sp/>80<sp/>column<sp/>line<sp/>when<sp/>placed<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>the<sp/>same<sp/>line<sp/>as<sp/>the<sp/>function<sp/>name).<sp/><sp/>We<sp/>also<sp/>check<sp/>for<sp/>the<sp/>case<sp/>where</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>the<sp/>previous<sp/>line<sp/>is<sp/>indented<sp/>6<sp/>spaces,<sp/>which<sp/>may<sp/>happen<sp/>when<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>initializers<sp/>of<sp/>a<sp/>constructor<sp/>do<sp/>not<sp/>fit<sp/>into<sp/>a<sp/>80<sp/>column<sp/>line.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>exception<sp/>=<sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>Match(</highlight><highlight class="stringliteral">r&apos;<sp/>{6}\w&apos;</highlight><highlight class="normal">,<sp/>prev_line):<sp/><sp/></highlight><highlight class="comment">#<sp/>Initializer<sp/>list?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>We<sp/>are<sp/>looking<sp/>for<sp/>the<sp/>opening<sp/>column<sp/>of<sp/>initializer<sp/>list,<sp/>which</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>should<sp/>be<sp/>indented<sp/>4<sp/>spaces<sp/>to<sp/>cause<sp/>6<sp/>space<sp/>indentation<sp/>afterwards.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>search_position<sp/>=<sp/>linenum-2</highlight></codeline>
<codeline lineno="1705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(search_position<sp/>&gt;=<sp/>0</highlight></codeline>
<codeline lineno="1706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>Match(</highlight><highlight class="stringliteral">r&apos;<sp/>{6}\w&apos;</highlight><highlight class="normal">,<sp/>elided[search_position])):</highlight></codeline>
<codeline lineno="1707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>search_position<sp/>-=<sp/>1</highlight></codeline>
<codeline lineno="1708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exception<sp/>=<sp/>(search_position<sp/>&gt;=<sp/>0</highlight></codeline>
<codeline lineno="1709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>elided[search_position][:5]<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;<sp/><sp/><sp/><sp/>:&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Search<sp/>for<sp/>the<sp/>function<sp/>arguments<sp/>or<sp/>an<sp/>initializer<sp/>list.<sp/><sp/>We<sp/>use<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>simple<sp/>heuristic<sp/>here:<sp/>If<sp/>the<sp/>line<sp/>is<sp/>indented<sp/>4<sp/>spaces;<sp/>and<sp/>we<sp/>have<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>closing<sp/>paren,<sp/>without<sp/>the<sp/>opening<sp/>paren,<sp/>followed<sp/>by<sp/>an<sp/>opening<sp/>brace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>or<sp/>colon<sp/>(for<sp/>initializer<sp/>lists)<sp/>we<sp/>assume<sp/>that<sp/>it<sp/>is<sp/>the<sp/>last<sp/>line<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>a<sp/>function<sp/>header.<sp/><sp/>If<sp/>we<sp/>have<sp/>a<sp/>colon<sp/>indented<sp/>4<sp/>spaces,<sp/>it<sp/>is<sp/>an</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>initializer<sp/>list.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exception<sp/>=<sp/>(Match(</highlight><highlight class="stringliteral">r&apos;<sp/>{4}\w[^\(]*\)\s*(const\s*)?(\{\s*$|:)&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prev_line)</highlight></codeline>
<codeline lineno="1719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>Match(</highlight><highlight class="stringliteral">r&apos;<sp/>{4}:&apos;</highlight><highlight class="normal">,<sp/>prev_line))</highlight></codeline>
<codeline lineno="1720"><highlight class="normal"></highlight></codeline>
<codeline lineno="1721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>exception:</highlight></codeline>
<codeline lineno="1722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error(filename,<sp/>linenum,<sp/></highlight><highlight class="stringliteral">&apos;whitespace/blank_line&apos;</highlight><highlight class="normal">,<sp/>2,</highlight></codeline>
<codeline lineno="1723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;Blank<sp/>line<sp/>at<sp/>the<sp/>start<sp/>of<sp/>a<sp/>code<sp/>block.<sp/><sp/>Is<sp/>this<sp/>needed?&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1724"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>This<sp/>doesn&apos;t<sp/>ignore<sp/>whitespace<sp/>at<sp/>the<sp/>end<sp/>of<sp/>a<sp/>namespace<sp/>block</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1725"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>because<sp/>that<sp/>is<sp/>too<sp/>hard<sp/>without<sp/>pairing<sp/>open/close<sp/>braces;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1726"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>however,<sp/>a<sp/>special<sp/>exception<sp/>is<sp/>made<sp/>for<sp/>namespace<sp/>closing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1727"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>brackets<sp/>which<sp/>have<sp/>a<sp/>comment<sp/>containing<sp/>&quot;namespace&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1728"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1729"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Also,<sp/>ignore<sp/>blank<sp/>lines<sp/>at<sp/>the<sp/>end<sp/>of<sp/>a<sp/>block<sp/>in<sp/>a<sp/>long<sp/>if-else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1730"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>chain,<sp/>like<sp/>this:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1731"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/>if<sp/>(condition1)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1732"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/>//<sp/>Something<sp/>followed<sp/>by<sp/>a<sp/>blank<sp/>line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1733"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1734"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/>}<sp/>else<sp/>if<sp/>(condition2)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1735"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/>//<sp/>Something<sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1736"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1737"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>linenum<sp/>+<sp/>1<sp/>&lt;<sp/>clean_lines.NumLines():</highlight></codeline>
<codeline lineno="1738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>next_line<sp/>=<sp/>raw[linenum<sp/>+<sp/>1]</highlight></codeline>
<codeline lineno="1739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(next_line</highlight></codeline>
<codeline lineno="1740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>Match(</highlight><highlight class="stringliteral">r&apos;\s*}&apos;</highlight><highlight class="normal">,<sp/>next_line)</highlight></codeline>
<codeline lineno="1741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>next_line.find(</highlight><highlight class="stringliteral">&apos;namespace&apos;</highlight><highlight class="normal">)<sp/>==<sp/>-1</highlight></codeline>
<codeline lineno="1742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>next_line.find(</highlight><highlight class="stringliteral">&apos;}<sp/>else<sp/>&apos;</highlight><highlight class="normal">)<sp/>==<sp/>-1):</highlight></codeline>
<codeline lineno="1743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error(filename,<sp/>linenum,<sp/></highlight><highlight class="stringliteral">&apos;whitespace/blank_line&apos;</highlight><highlight class="normal">,<sp/>3,</highlight></codeline>
<codeline lineno="1744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;Blank<sp/>line<sp/>at<sp/>the<sp/>end<sp/>of<sp/>a<sp/>code<sp/>block.<sp/><sp/>Is<sp/>this<sp/>needed?&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1745"><highlight class="normal"></highlight></codeline>
<codeline lineno="1746"><highlight class="normal"><sp/><sp/><sp/><sp/>matched<sp/>=<sp/>Match(</highlight><highlight class="stringliteral">r&apos;\s*(public|protected|private):&apos;</highlight><highlight class="normal">,<sp/>prev_line)</highlight></codeline>
<codeline lineno="1747"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>matched:</highlight></codeline>
<codeline lineno="1748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(filename,<sp/>linenum,<sp/></highlight><highlight class="stringliteral">&apos;whitespace/blank_line&apos;</highlight><highlight class="normal">,<sp/>3,</highlight></codeline>
<codeline lineno="1749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;Do<sp/>not<sp/>leave<sp/>a<sp/>blank<sp/>line<sp/>after<sp/>&quot;%s:&quot;&apos;</highlight><highlight class="normal"><sp/>%<sp/>matched.group(1))</highlight></codeline>
<codeline lineno="1750"><highlight class="normal"></highlight></codeline>
<codeline lineno="1751"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>Next,<sp/>we<sp/>complain<sp/>if<sp/>there&apos;s<sp/>a<sp/>comment<sp/>too<sp/>near<sp/>the<sp/>text</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1752"><highlight class="normal"><sp/><sp/>commentpos<sp/>=<sp/>line.find(</highlight><highlight class="stringliteral">&apos;//&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1753"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>commentpos<sp/>!=<sp/>-1:</highlight></codeline>
<codeline lineno="1754"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Check<sp/>if<sp/>the<sp/>//<sp/>may<sp/>be<sp/>in<sp/>quotes.<sp/><sp/>If<sp/>so,<sp/>ignore<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1755"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Comparisons<sp/>made<sp/>explicit<sp/>for<sp/>clarity<sp/>--<sp/>pylint:<sp/>disable-msg=C6403</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1756"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(line.count(</highlight><highlight class="stringliteral">&apos;&quot;&apos;</highlight><highlight class="normal">,<sp/>0,<sp/>commentpos)<sp/>-</highlight></codeline>
<codeline lineno="1757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>line.count(</highlight><highlight class="stringliteral">&apos;\\&quot;&apos;</highlight><highlight class="normal">,<sp/>0,<sp/>commentpos))<sp/>%<sp/>2<sp/>==<sp/>0:<sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>not<sp/>in<sp/>quotes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Allow<sp/>one<sp/>space<sp/>for<sp/>new<sp/>scopes,<sp/>two<sp/>spaces<sp/>otherwise:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>Match(</highlight><highlight class="stringliteral">r&apos;^\s*{<sp/>//&apos;</highlight><highlight class="normal">,<sp/>line)<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((commentpos<sp/>&gt;=<sp/>1<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>line[commentpos-1]<sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>string.whitespace)<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(commentpos<sp/>&gt;=<sp/>2<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>line[commentpos-2]<sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>string.whitespace))):</highlight></codeline>
<codeline lineno="1764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error(filename,<sp/>linenum,<sp/></highlight><highlight class="stringliteral">&apos;whitespace/comments&apos;</highlight><highlight class="normal">,<sp/>2,</highlight></codeline>
<codeline lineno="1765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;At<sp/>least<sp/>two<sp/>spaces<sp/>is<sp/>best<sp/>between<sp/>code<sp/>and<sp/>comments&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>There<sp/>should<sp/>always<sp/>be<sp/>a<sp/>space<sp/>between<sp/>the<sp/>//<sp/>and<sp/>the<sp/>comment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>commentend<sp/>=<sp/>commentpos<sp/>+<sp/>2</highlight></codeline>
<codeline lineno="1768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>commentend<sp/>&lt;<sp/>len(line)<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>line[commentend]<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>but<sp/>some<sp/>lines<sp/>are<sp/>exceptions<sp/>--<sp/>e.g.<sp/>if<sp/>they&apos;re<sp/>big</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>comment<sp/>delimiters<sp/>like:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>//----------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>or<sp/>are<sp/>an<sp/>empty<sp/>C++<sp/>style<sp/>Doxygen<sp/>comment,<sp/>like:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>///</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>or<sp/>they<sp/>begin<sp/>with<sp/>multiple<sp/>slashes<sp/>followed<sp/>by<sp/>a<sp/>space:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>////////<sp/>Header<sp/>comment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>match<sp/>=<sp/>(Search(</highlight><highlight class="stringliteral">r&apos;[=/-]{4,}\s*$&apos;</highlight><highlight class="normal">,<sp/>line[commentend:])<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Search(</highlight><highlight class="stringliteral">r&apos;^/$&apos;</highlight><highlight class="normal">,<sp/>line[commentend:])<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Search(</highlight><highlight class="stringliteral">r&apos;^/+<sp/>&apos;</highlight><highlight class="normal">,<sp/>line[commentend:]))</highlight></codeline>
<codeline lineno="1779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>match:</highlight></codeline>
<codeline lineno="1780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error(filename,<sp/>linenum,<sp/></highlight><highlight class="stringliteral">&apos;whitespace/comments&apos;</highlight><highlight class="normal">,<sp/>4,</highlight></codeline>
<codeline lineno="1781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;Should<sp/>have<sp/>a<sp/>space<sp/>between<sp/>//<sp/>and<sp/>comment&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CheckComment(line[commentpos:],<sp/>filename,<sp/>linenum,<sp/>error)</highlight></codeline>
<codeline lineno="1783"><highlight class="normal"></highlight></codeline>
<codeline lineno="1784"><highlight class="normal"><sp/><sp/>line<sp/>=<sp/>clean_lines.elided[linenum]<sp/><sp/></highlight><highlight class="comment">#<sp/>get<sp/>rid<sp/>of<sp/>comments<sp/>and<sp/>strings</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1785"><highlight class="normal"></highlight></codeline>
<codeline lineno="1786"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>Don&apos;t<sp/>try<sp/>to<sp/>do<sp/>spacing<sp/>checks<sp/>for<sp/>operator<sp/>methods</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1787"><highlight class="normal"><sp/><sp/>line<sp/>=<sp/>re.sub(</highlight><highlight class="stringliteral">r&apos;operator(==|!=|&lt;|&lt;&lt;|&lt;=|&gt;=|&gt;&gt;|&gt;)\(&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;operator\(&apos;</highlight><highlight class="normal">,<sp/>line)</highlight></codeline>
<codeline lineno="1788"><highlight class="normal"></highlight></codeline>
<codeline lineno="1789"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>We<sp/>allow<sp/>no-spaces<sp/>around<sp/>=<sp/>within<sp/>an<sp/>if:<sp/>&quot;if<sp/>(<sp/>(a=Foo())<sp/>==<sp/>0<sp/>)&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1790"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>Otherwise<sp/>not.<sp/><sp/>Note<sp/>we<sp/>only<sp/>check<sp/>for<sp/>non-spaces<sp/>on<sp/>*both*<sp/>sides;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1791"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>sometimes<sp/>people<sp/>put<sp/>non-spaces<sp/>on<sp/>one<sp/>side<sp/>when<sp/>aligning<sp/>=&apos;s<sp/>among</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1792"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>many<sp/>lines<sp/>(not<sp/>that<sp/>this<sp/>is<sp/>behavior<sp/>that<sp/>I<sp/>approve<sp/>of...)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1793"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>Search(</highlight><highlight class="stringliteral">r&apos;[\w.]=[\w.]&apos;</highlight><highlight class="normal">,<sp/>line)<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>Search(</highlight><highlight class="stringliteral">r&apos;\b(if|while)<sp/>&apos;</highlight><highlight class="normal">,<sp/>line):</highlight></codeline>
<codeline lineno="1794"><highlight class="normal"><sp/><sp/><sp/><sp/>error(filename,<sp/>linenum,<sp/></highlight><highlight class="stringliteral">&apos;whitespace/operators&apos;</highlight><highlight class="normal">,<sp/>4,</highlight></codeline>
<codeline lineno="1795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;Missing<sp/>spaces<sp/>around<sp/>=&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1796"><highlight class="normal"></highlight></codeline>
<codeline lineno="1797"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>It&apos;s<sp/>ok<sp/>not<sp/>to<sp/>have<sp/>spaces<sp/>around<sp/>binary<sp/>operators<sp/>like<sp/>+<sp/>-<sp/>*<sp/>/,<sp/>but<sp/>if</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1798"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>there&apos;s<sp/>too<sp/>little<sp/>whitespace,<sp/>we<sp/>get<sp/>concerned.<sp/><sp/>It&apos;s<sp/>hard<sp/>to<sp/>tell,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1799"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>though,<sp/>so<sp/>we<sp/>punt<sp/>on<sp/>this<sp/>one<sp/>for<sp/>now.<sp/><sp/>TODO.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1800"><highlight class="normal"></highlight></codeline>
<codeline lineno="1801"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>You<sp/>should<sp/>always<sp/>have<sp/>whitespace<sp/>around<sp/>binary<sp/>operators.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1802"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>Alas,<sp/>we<sp/>can&apos;t<sp/>test<sp/>&lt;<sp/>or<sp/>&gt;<sp/>because<sp/>they&apos;re<sp/>legitimately<sp/>used<sp/>sans<sp/>spaces</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1803"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>(a-&gt;b,<sp/>vector&lt;int&gt;<sp/>a).<sp/><sp/>The<sp/>only<sp/>time<sp/>we<sp/>can<sp/>tell<sp/>is<sp/>a<sp/>&lt;<sp/>with<sp/>no<sp/>&gt;,<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1804"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>only<sp/>if<sp/>it&apos;s<sp/>not<sp/>template<sp/>params<sp/>list<sp/>spilling<sp/>into<sp/>the<sp/>next<sp/>line.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1805"><highlight class="normal"><sp/><sp/>match<sp/>=<sp/>Search(</highlight><highlight class="stringliteral">r&apos;[^&lt;&gt;=!\s](==|!=|&lt;=|&gt;=)[^&lt;&gt;=!\s]&apos;</highlight><highlight class="normal">,<sp/>line)</highlight></codeline>
<codeline lineno="1806"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>match:</highlight></codeline>
<codeline lineno="1807"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Note<sp/>that<sp/>while<sp/>it<sp/>seems<sp/>that<sp/>the<sp/>&apos;&lt;[^&lt;]*&apos;<sp/>term<sp/>in<sp/>the<sp/>following</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1808"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>regexp<sp/>could<sp/>be<sp/>simplified<sp/>to<sp/>&apos;&lt;.*&apos;,<sp/>which<sp/>would<sp/>indeed<sp/>match</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1809"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>the<sp/>same<sp/>class<sp/>of<sp/>strings,<sp/>the<sp/>[^&lt;]<sp/>means<sp/>that<sp/>searching<sp/>for<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1810"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>regexp<sp/>takes<sp/>linear<sp/>rather<sp/>than<sp/>quadratic<sp/>time.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1811"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>Search(</highlight><highlight class="stringliteral">r&apos;&lt;[^&lt;]*,\s*$&apos;</highlight><highlight class="normal">,<sp/>line):<sp/><sp/></highlight><highlight class="comment">#<sp/>template<sp/>params<sp/>spill</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>match<sp/>=<sp/>Search(</highlight><highlight class="stringliteral">r&apos;[^&lt;&gt;=!\s](&lt;)[^&lt;&gt;=!\s]([^&gt;]|-&gt;)*$&apos;</highlight><highlight class="normal">,<sp/>line)</highlight></codeline>
<codeline lineno="1813"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>match:</highlight></codeline>
<codeline lineno="1814"><highlight class="normal"><sp/><sp/><sp/><sp/>error(filename,<sp/>linenum,<sp/></highlight><highlight class="stringliteral">&apos;whitespace/operators&apos;</highlight><highlight class="normal">,<sp/>3,</highlight></codeline>
<codeline lineno="1815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;Missing<sp/>spaces<sp/>around<sp/>%s&apos;</highlight><highlight class="normal"><sp/>%<sp/>match.group(1))</highlight></codeline>
<codeline lineno="1816"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>We<sp/>allow<sp/>no-spaces<sp/>around<sp/>&lt;&lt;<sp/>and<sp/>&gt;&gt;<sp/>when<sp/>used<sp/>like<sp/>this:<sp/>10&lt;&lt;20,<sp/>but</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1817"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>not<sp/>otherwise<sp/>(particularly,<sp/>not<sp/>when<sp/>used<sp/>as<sp/>streams)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1818"><highlight class="normal"><sp/><sp/>match<sp/>=<sp/>Search(</highlight><highlight class="stringliteral">r&apos;[^0-9\s](&lt;&lt;|&gt;&gt;)[^0-9\s]&apos;</highlight><highlight class="normal">,<sp/>line)</highlight></codeline>
<codeline lineno="1819"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>match:</highlight></codeline>
<codeline lineno="1820"><highlight class="normal"><sp/><sp/><sp/><sp/>error(filename,<sp/>linenum,<sp/></highlight><highlight class="stringliteral">&apos;whitespace/operators&apos;</highlight><highlight class="normal">,<sp/>3,</highlight></codeline>
<codeline lineno="1821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;Missing<sp/>spaces<sp/>around<sp/>%s&apos;</highlight><highlight class="normal"><sp/>%<sp/>match.group(1))</highlight></codeline>
<codeline lineno="1822"><highlight class="normal"></highlight></codeline>
<codeline lineno="1823"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>There<sp/>shouldn&apos;t<sp/>be<sp/>space<sp/>around<sp/>unary<sp/>operators</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1824"><highlight class="normal"><sp/><sp/>match<sp/>=<sp/>Search(</highlight><highlight class="stringliteral">r&apos;(!\s|~\s|[\s]--[\s;]|[\s]\+\+[\s;])&apos;</highlight><highlight class="normal">,<sp/>line)</highlight></codeline>
<codeline lineno="1825"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>match:</highlight></codeline>
<codeline lineno="1826"><highlight class="normal"><sp/><sp/><sp/><sp/>error(filename,<sp/>linenum,<sp/></highlight><highlight class="stringliteral">&apos;whitespace/operators&apos;</highlight><highlight class="normal">,<sp/>4,</highlight></codeline>
<codeline lineno="1827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;Extra<sp/>space<sp/>for<sp/>operator<sp/>%s&apos;</highlight><highlight class="normal"><sp/>%<sp/>match.group(1))</highlight></codeline>
<codeline lineno="1828"><highlight class="normal"></highlight></codeline>
<codeline lineno="1829"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>A<sp/>pet<sp/>peeve<sp/>of<sp/>mine:<sp/>no<sp/>spaces<sp/>after<sp/>an<sp/>if,<sp/>while,<sp/>switch,<sp/>or<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1830"><highlight class="normal"><sp/><sp/>match<sp/>=<sp/>Search(</highlight><highlight class="stringliteral">r&apos;<sp/>(if\(|for\(|while\(|switch\()&apos;</highlight><highlight class="normal">,<sp/>line)</highlight></codeline>
<codeline lineno="1831"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>match:</highlight></codeline>
<codeline lineno="1832"><highlight class="normal"><sp/><sp/><sp/><sp/>error(filename,<sp/>linenum,<sp/></highlight><highlight class="stringliteral">&apos;whitespace/parens&apos;</highlight><highlight class="normal">,<sp/>5,</highlight></codeline>
<codeline lineno="1833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;Missing<sp/>space<sp/>before<sp/>(<sp/>in<sp/>%s&apos;</highlight><highlight class="normal"><sp/>%<sp/>match.group(1))</highlight></codeline>
<codeline lineno="1834"><highlight class="normal"></highlight></codeline>
<codeline lineno="1835"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>For<sp/>if/for/while/switch,<sp/>the<sp/>left<sp/>and<sp/>right<sp/>parens<sp/>should<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1836"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>consistent<sp/>about<sp/>how<sp/>many<sp/>spaces<sp/>are<sp/>inside<sp/>the<sp/>parens,<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1837"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>there<sp/>should<sp/>either<sp/>be<sp/>zero<sp/>or<sp/>one<sp/>spaces<sp/>inside<sp/>the<sp/>parens.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1838"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>We<sp/>don&apos;t<sp/>want:<sp/>&quot;if<sp/>(<sp/>foo)&quot;<sp/>or<sp/>&quot;if<sp/>(<sp/>foo<sp/><sp/><sp/>)&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1839"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>Exception:<sp/>&quot;for<sp/>(<sp/>;<sp/>foo;<sp/>bar)&quot;<sp/>and<sp/>&quot;for<sp/>(foo;<sp/>bar;<sp/>)&quot;<sp/>are<sp/>allowed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1840"><highlight class="normal"><sp/><sp/>match<sp/>=<sp/>Search(</highlight><highlight class="stringliteral">r&apos;\b(if|for|while|switch)\s*&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&apos;\(([<sp/>]*)(.).*[^<sp/>]+([<sp/>]*)\)\s*{\s*$&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>line)</highlight></codeline>
<codeline lineno="1843"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>match:</highlight></codeline>
<codeline lineno="1844"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>len(match.group(2))<sp/>!=<sp/>len(match.group(4)):</highlight></codeline>
<codeline lineno="1845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>(match.group(3)<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;;&apos;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>len(match.group(2))<sp/>==<sp/>1<sp/>+<sp/>len(match.group(4))<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>match.group(2)<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>Search(</highlight><highlight class="stringliteral">r&apos;\bfor\s*\(.*;<sp/>\)&apos;</highlight><highlight class="normal">,<sp/>line)):</highlight></codeline>
<codeline lineno="1848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error(filename,<sp/>linenum,<sp/></highlight><highlight class="stringliteral">&apos;whitespace/parens&apos;</highlight><highlight class="normal">,<sp/>5,</highlight></codeline>
<codeline lineno="1849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;Mismatching<sp/>spaces<sp/>inside<sp/>()<sp/>in<sp/>%s&apos;</highlight><highlight class="normal"><sp/>%<sp/>match.group(1))</highlight></codeline>
<codeline lineno="1850"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>len(match.group(2))<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>[0,<sp/>1]:</highlight></codeline>
<codeline lineno="1851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(filename,<sp/>linenum,<sp/></highlight><highlight class="stringliteral">&apos;whitespace/parens&apos;</highlight><highlight class="normal">,<sp/>5,</highlight></codeline>
<codeline lineno="1852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;Should<sp/>have<sp/>zero<sp/>or<sp/>one<sp/>spaces<sp/>inside<sp/>(<sp/>and<sp/>)<sp/>in<sp/>%s&apos;</highlight><highlight class="normal"><sp/>%</highlight></codeline>
<codeline lineno="1853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>match.group(1))</highlight></codeline>
<codeline lineno="1854"><highlight class="normal"></highlight></codeline>
<codeline lineno="1855"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>You<sp/>should<sp/>always<sp/>have<sp/>a<sp/>space<sp/>after<sp/>a<sp/>comma<sp/>(either<sp/>as<sp/>fn<sp/>arg<sp/>or<sp/>operator)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1856"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>Search(</highlight><highlight class="stringliteral">r&apos;,[^\s]&apos;</highlight><highlight class="normal">,<sp/>line):</highlight></codeline>
<codeline lineno="1857"><highlight class="normal"><sp/><sp/><sp/><sp/>error(filename,<sp/>linenum,<sp/></highlight><highlight class="stringliteral">&apos;whitespace/comma&apos;</highlight><highlight class="normal">,<sp/>3,</highlight></codeline>
<codeline lineno="1858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;Missing<sp/>space<sp/>after<sp/>,&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1859"><highlight class="normal"></highlight></codeline>
<codeline lineno="1860"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>You<sp/>should<sp/>always<sp/>have<sp/>a<sp/>space<sp/>after<sp/>a<sp/>semicolon</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1861"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>except<sp/>for<sp/>few<sp/>corner<sp/>cases</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1862"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>TODO(unknown):<sp/>clarify<sp/>if<sp/>&apos;if<sp/>(1)<sp/>{<sp/>return<sp/>1;}&apos;<sp/>is<sp/>requires<sp/>one<sp/>more</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1863"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>space<sp/>after<sp/>;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1864"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>Search(</highlight><highlight class="stringliteral">r&apos;;[^\s};\\)/]&apos;</highlight><highlight class="normal">,<sp/>line):</highlight></codeline>
<codeline lineno="1865"><highlight class="normal"><sp/><sp/><sp/><sp/>error(filename,<sp/>linenum,<sp/></highlight><highlight class="stringliteral">&apos;whitespace/semicolon&apos;</highlight><highlight class="normal">,<sp/>3,</highlight></codeline>
<codeline lineno="1866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;Missing<sp/>space<sp/>after<sp/>;&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1867"><highlight class="normal"></highlight></codeline>
<codeline lineno="1868"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>Next<sp/>we<sp/>will<sp/>look<sp/>for<sp/>issues<sp/>with<sp/>function<sp/>calls.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1869"><highlight class="normal"><sp/><sp/>CheckSpacingForFunctionCall(filename,<sp/>line,<sp/>linenum,<sp/>error)</highlight></codeline>
<codeline lineno="1870"><highlight class="normal"></highlight></codeline>
<codeline lineno="1871"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>Except<sp/>after<sp/>an<sp/>opening<sp/>paren,<sp/>or<sp/>after<sp/>another<sp/>opening<sp/>brace<sp/>(in<sp/>case<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1872"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>an<sp/>initializer<sp/>list,<sp/>for<sp/>instance),<sp/>you<sp/>should<sp/>have<sp/>spaces<sp/>before<sp/>your</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1873"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>braces.<sp/>And<sp/>since<sp/>you<sp/>should<sp/>never<sp/>have<sp/>braces<sp/>at<sp/>the<sp/>beginning<sp/>of<sp/>a<sp/>line,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1874"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>this<sp/>is<sp/>an<sp/>easy<sp/>test.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1875"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>Search(</highlight><highlight class="stringliteral">r&apos;[^<sp/>({]{&apos;</highlight><highlight class="normal">,<sp/>line):</highlight></codeline>
<codeline lineno="1876"><highlight class="normal"><sp/><sp/><sp/><sp/>error(filename,<sp/>linenum,<sp/></highlight><highlight class="stringliteral">&apos;whitespace/braces&apos;</highlight><highlight class="normal">,<sp/>5,</highlight></codeline>
<codeline lineno="1877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;Missing<sp/>space<sp/>before<sp/>{&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1878"><highlight class="normal"></highlight></codeline>
<codeline lineno="1879"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>Make<sp/>sure<sp/>&apos;}<sp/>else<sp/>{&apos;<sp/>has<sp/>spaces.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1880"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>Search(</highlight><highlight class="stringliteral">r&apos;}else&apos;</highlight><highlight class="normal">,<sp/>line):</highlight></codeline>
<codeline lineno="1881"><highlight class="normal"><sp/><sp/><sp/><sp/>error(filename,<sp/>linenum,<sp/></highlight><highlight class="stringliteral">&apos;whitespace/braces&apos;</highlight><highlight class="normal">,<sp/>5,</highlight></codeline>
<codeline lineno="1882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;Missing<sp/>space<sp/>before<sp/>else&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1883"><highlight class="normal"></highlight></codeline>
<codeline lineno="1884"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>You<sp/>shouldn&apos;t<sp/>have<sp/>spaces<sp/>before<sp/>your<sp/>brackets,<sp/>except<sp/>maybe<sp/>after</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1885"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>&apos;delete<sp/>[]&apos;<sp/>or<sp/>&apos;new<sp/>char<sp/>*<sp/>[]&apos;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1886"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>Search(</highlight><highlight class="stringliteral">r&apos;\w\s+\[&apos;</highlight><highlight class="normal">,<sp/>line)<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>Search(</highlight><highlight class="stringliteral">r&apos;delete\s+\[&apos;</highlight><highlight class="normal">,<sp/>line):</highlight></codeline>
<codeline lineno="1887"><highlight class="normal"><sp/><sp/><sp/><sp/>error(filename,<sp/>linenum,<sp/></highlight><highlight class="stringliteral">&apos;whitespace/braces&apos;</highlight><highlight class="normal">,<sp/>5,</highlight></codeline>
<codeline lineno="1888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;Extra<sp/>space<sp/>before<sp/>[&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1889"><highlight class="normal"></highlight></codeline>
<codeline lineno="1890"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>You<sp/>shouldn&apos;t<sp/>have<sp/>a<sp/>space<sp/>before<sp/>a<sp/>semicolon<sp/>at<sp/>the<sp/>end<sp/>of<sp/>the<sp/>line.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1891"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>There&apos;s<sp/>a<sp/>special<sp/>case<sp/>for<sp/>&quot;for&quot;<sp/>since<sp/>the<sp/>style<sp/>guide<sp/>allows<sp/>space<sp/>before</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1892"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>the<sp/>semicolon<sp/>there.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1893"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>Search(</highlight><highlight class="stringliteral">r&apos;:\s*;\s*$&apos;</highlight><highlight class="normal">,<sp/>line):</highlight></codeline>
<codeline lineno="1894"><highlight class="normal"><sp/><sp/><sp/><sp/>error(filename,<sp/>linenum,<sp/></highlight><highlight class="stringliteral">&apos;whitespace/semicolon&apos;</highlight><highlight class="normal">,<sp/>5,</highlight></codeline>
<codeline lineno="1895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;Semicolon<sp/>defining<sp/>empty<sp/>statement.<sp/>Use<sp/>{<sp/>}<sp/>instead.&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1896"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>Search(</highlight><highlight class="stringliteral">r&apos;^\s*;\s*$&apos;</highlight><highlight class="normal">,<sp/>line):</highlight></codeline>
<codeline lineno="1897"><highlight class="normal"><sp/><sp/><sp/><sp/>error(filename,<sp/>linenum,<sp/></highlight><highlight class="stringliteral">&apos;whitespace/semicolon&apos;</highlight><highlight class="normal">,<sp/>5,</highlight></codeline>
<codeline lineno="1898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;Line<sp/>contains<sp/>only<sp/>semicolon.<sp/>If<sp/>this<sp/>should<sp/>be<sp/>an<sp/>empty<sp/>statement,<sp/>&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;use<sp/>{<sp/>}<sp/>instead.&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1900"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>(Search(</highlight><highlight class="stringliteral">r&apos;\s+;\s*$&apos;</highlight><highlight class="normal">,<sp/>line)<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>Search(</highlight><highlight class="stringliteral">r&apos;\bfor\b&apos;</highlight><highlight class="normal">,<sp/>line)):</highlight></codeline>
<codeline lineno="1902"><highlight class="normal"><sp/><sp/><sp/><sp/>error(filename,<sp/>linenum,<sp/></highlight><highlight class="stringliteral">&apos;whitespace/semicolon&apos;</highlight><highlight class="normal">,<sp/>5,</highlight></codeline>
<codeline lineno="1903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;Extra<sp/>space<sp/>before<sp/>last<sp/>semicolon.<sp/>If<sp/>this<sp/>should<sp/>be<sp/>an<sp/>empty<sp/>&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;statement,<sp/>use<sp/>{<sp/>}<sp/>instead.&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1905"><highlight class="normal"></highlight></codeline>
<codeline lineno="1906"><highlight class="normal"></highlight></codeline>
<codeline lineno="1907"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">CheckSectionSpacing(filename,<sp/>clean_lines,<sp/>class_info,<sp/>linenum,<sp/>error):</highlight></codeline>
<codeline lineno="1908"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Checks<sp/>for<sp/>additional<sp/>blank<sp/>line<sp/>issues<sp/>related<sp/>to<sp/>sections.</highlight></codeline>
<codeline lineno="1909"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1910"><highlight class="stringliteral"><sp/><sp/>Currently<sp/>the<sp/>only<sp/>thing<sp/>checked<sp/>here<sp/>is<sp/>blank<sp/>line<sp/>before<sp/>protected/private.</highlight></codeline>
<codeline lineno="1911"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1912"><highlight class="stringliteral"><sp/><sp/>Args:</highlight></codeline>
<codeline lineno="1913"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>filename:<sp/>The<sp/>name<sp/>of<sp/>the<sp/>current<sp/>file.</highlight></codeline>
<codeline lineno="1914"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>clean_lines:<sp/>A<sp/>CleansedLines<sp/>instance<sp/>containing<sp/>the<sp/>file.</highlight></codeline>
<codeline lineno="1915"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>class_info:<sp/>A<sp/>_ClassInfo<sp/>objects.</highlight></codeline>
<codeline lineno="1916"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>linenum:<sp/>The<sp/>number<sp/>of<sp/>the<sp/>line<sp/>to<sp/>check.</highlight></codeline>
<codeline lineno="1917"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>error:<sp/>The<sp/>function<sp/>to<sp/>call<sp/>with<sp/>any<sp/>errors<sp/>found.</highlight></codeline>
<codeline lineno="1918"><highlight class="stringliteral"><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1919"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>Skip<sp/>checks<sp/>if<sp/>the<sp/>class<sp/>is<sp/>small,<sp/>where<sp/>small<sp/>means<sp/>25<sp/>lines<sp/>or<sp/>less.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1920"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>25<sp/>lines<sp/>seems<sp/>like<sp/>a<sp/>good<sp/>cutoff<sp/>since<sp/>that&apos;s<sp/>the<sp/>usual<sp/>height<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1921"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>terminals,<sp/>and<sp/>any<sp/>class<sp/>that<sp/>can&apos;t<sp/>fit<sp/>in<sp/>one<sp/>screen<sp/>can&apos;t<sp/>really</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1922"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>be<sp/>considered<sp/>&quot;small&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1923"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1924"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>Also<sp/>skip<sp/>checks<sp/>if<sp/>we<sp/>are<sp/>on<sp/>the<sp/>first<sp/>line.<sp/><sp/>This<sp/>accounts<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1925"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>classes<sp/>that<sp/>look<sp/>like</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1926"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/>class<sp/>Foo<sp/>{<sp/>public:<sp/>...<sp/>};</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1927"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1928"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>If<sp/>we<sp/>didn&apos;t<sp/>find<sp/>the<sp/>end<sp/>of<sp/>the<sp/>class,<sp/>last_line<sp/>would<sp/>be<sp/>zero,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1929"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>and<sp/>the<sp/>check<sp/>will<sp/>be<sp/>skipped<sp/>by<sp/>the<sp/>first<sp/>condition.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1930"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(class_info.last_line<sp/>-<sp/>class_info.linenum<sp/>&lt;=<sp/>24<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>linenum<sp/>&lt;=<sp/>class_info.linenum):</highlight></codeline>
<codeline lineno="1932"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1933"><highlight class="normal"></highlight></codeline>
<codeline lineno="1934"><highlight class="normal"><sp/><sp/>matched<sp/>=<sp/>Match(</highlight><highlight class="stringliteral">r&apos;\s*(public|protected|private):&apos;</highlight><highlight class="normal">,<sp/>clean_lines.lines[linenum])</highlight></codeline>
<codeline lineno="1935"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>matched:</highlight></codeline>
<codeline lineno="1936"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Issue<sp/>warning<sp/>if<sp/>the<sp/>line<sp/>before<sp/>public/protected/private<sp/>was</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1937"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>not<sp/>a<sp/>blank<sp/>line,<sp/>but<sp/>don&apos;t<sp/>do<sp/>this<sp/>if<sp/>the<sp/>previous<sp/>line<sp/>contains</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1938"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>&quot;class&quot;<sp/>or<sp/>&quot;struct&quot;.<sp/><sp/>This<sp/>can<sp/>happen<sp/>two<sp/>ways:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1939"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/>-<sp/>We<sp/>are<sp/>at<sp/>the<sp/>beginning<sp/>of<sp/>the<sp/>class.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1940"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/>-<sp/>We<sp/>are<sp/>forward-declaring<sp/>an<sp/>inner<sp/>class<sp/>that<sp/>is<sp/>semantically</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1941"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/>private,<sp/>but<sp/>needed<sp/>to<sp/>be<sp/>public<sp/>for<sp/>implementation<sp/>reasons.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1942"><highlight class="normal"><sp/><sp/><sp/><sp/>prev_line<sp/>=<sp/>clean_lines.lines[linenum<sp/>-<sp/>1]</highlight></codeline>
<codeline lineno="1943"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>IsBlankLine(prev_line)<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>Search(</highlight><highlight class="stringliteral">r&apos;\b(class|struct)\b&apos;</highlight><highlight class="normal">,<sp/>prev_line)):</highlight></codeline>
<codeline lineno="1945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Try<sp/>a<sp/>bit<sp/>harder<sp/>to<sp/>find<sp/>the<sp/>beginning<sp/>of<sp/>the<sp/>class.<sp/><sp/>This<sp/>is<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>account<sp/>for<sp/>multi-line<sp/>base-specifier<sp/>lists,<sp/>e.g.:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/>class<sp/>Derived</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>public<sp/>Base<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>end_class_head<sp/>=<sp/>class_info.linenum</highlight></codeline>
<codeline lineno="1950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(class_info.linenum,<sp/>linenum):</highlight></codeline>
<codeline lineno="1951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>Search(</highlight><highlight class="stringliteral">r&apos;\{\s*$&apos;</highlight><highlight class="normal">,<sp/>clean_lines.lines[i]):</highlight></codeline>
<codeline lineno="1952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>end_class_head<sp/>=<sp/>i</highlight></codeline>
<codeline lineno="1953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>end_class_head<sp/>&lt;<sp/>linenum<sp/>-<sp/>1:</highlight></codeline>
<codeline lineno="1955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error(filename,<sp/>linenum,<sp/></highlight><highlight class="stringliteral">&apos;whitespace/blank_line&apos;</highlight><highlight class="normal">,<sp/>3,</highlight></codeline>
<codeline lineno="1956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;&quot;%s:&quot;<sp/>should<sp/>be<sp/>preceded<sp/>by<sp/>a<sp/>blank<sp/>line&apos;</highlight><highlight class="normal"><sp/>%<sp/>matched.group(1))</highlight></codeline>
<codeline lineno="1957"><highlight class="normal"></highlight></codeline>
<codeline lineno="1958"><highlight class="normal"></highlight></codeline>
<codeline lineno="1959"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">GetPreviousNonBlankLine(clean_lines,<sp/>linenum):</highlight></codeline>
<codeline lineno="1960"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Return<sp/>the<sp/>most<sp/>recent<sp/>non-blank<sp/>line<sp/>and<sp/>its<sp/>line<sp/>number.</highlight></codeline>
<codeline lineno="1961"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1962"><highlight class="stringliteral"><sp/><sp/>Args:</highlight></codeline>
<codeline lineno="1963"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>clean_lines:<sp/>A<sp/>CleansedLines<sp/>instance<sp/>containing<sp/>the<sp/>file<sp/>contents.</highlight></codeline>
<codeline lineno="1964"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>linenum:<sp/>The<sp/>number<sp/>of<sp/>the<sp/>line<sp/>to<sp/>check.</highlight></codeline>
<codeline lineno="1965"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1966"><highlight class="stringliteral"><sp/><sp/>Returns:</highlight></codeline>
<codeline lineno="1967"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>A<sp/>tuple<sp/>with<sp/>two<sp/>elements.<sp/><sp/>The<sp/>first<sp/>element<sp/>is<sp/>the<sp/>contents<sp/>of<sp/>the<sp/>last</highlight></codeline>
<codeline lineno="1968"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>non-blank<sp/>line<sp/>before<sp/>the<sp/>current<sp/>line,<sp/>or<sp/>the<sp/>empty<sp/>string<sp/>if<sp/>this<sp/>is<sp/>the</highlight></codeline>
<codeline lineno="1969"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>first<sp/>non-blank<sp/>line.<sp/><sp/>The<sp/>second<sp/>is<sp/>the<sp/>line<sp/>number<sp/>of<sp/>that<sp/>line,<sp/>or<sp/>-1</highlight></codeline>
<codeline lineno="1970"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>if<sp/>this<sp/>is<sp/>the<sp/>first<sp/>non-blank<sp/>line.</highlight></codeline>
<codeline lineno="1971"><highlight class="stringliteral"><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1972"><highlight class="normal"></highlight></codeline>
<codeline lineno="1973"><highlight class="normal"><sp/><sp/>prevlinenum<sp/>=<sp/>linenum<sp/>-<sp/>1</highlight></codeline>
<codeline lineno="1974"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>prevlinenum<sp/>&gt;=<sp/>0:</highlight></codeline>
<codeline lineno="1975"><highlight class="normal"><sp/><sp/><sp/><sp/>prevline<sp/>=<sp/>clean_lines.elided[prevlinenum]</highlight></codeline>
<codeline lineno="1976"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>IsBlankLine(prevline):<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>if<sp/>not<sp/>a<sp/>blank<sp/>line...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(prevline,<sp/>prevlinenum)</highlight></codeline>
<codeline lineno="1978"><highlight class="normal"><sp/><sp/><sp/><sp/>prevlinenum<sp/>-=<sp/>1</highlight></codeline>
<codeline lineno="1979"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal">,<sp/>-1)</highlight></codeline>
<codeline lineno="1980"><highlight class="normal"></highlight></codeline>
<codeline lineno="1981"><highlight class="normal"></highlight></codeline>
<codeline lineno="1982"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">CheckBraces(filename,<sp/>clean_lines,<sp/>linenum,<sp/>error):</highlight></codeline>
<codeline lineno="1983"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Looks<sp/>for<sp/>misplaced<sp/>braces<sp/>(e.g.<sp/>at<sp/>the<sp/>end<sp/>of<sp/>line).</highlight></codeline>
<codeline lineno="1984"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1985"><highlight class="stringliteral"><sp/><sp/>Args:</highlight></codeline>
<codeline lineno="1986"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>filename:<sp/>The<sp/>name<sp/>of<sp/>the<sp/>current<sp/>file.</highlight></codeline>
<codeline lineno="1987"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>clean_lines:<sp/>A<sp/>CleansedLines<sp/>instance<sp/>containing<sp/>the<sp/>file.</highlight></codeline>
<codeline lineno="1988"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>linenum:<sp/>The<sp/>number<sp/>of<sp/>the<sp/>line<sp/>to<sp/>check.</highlight></codeline>
<codeline lineno="1989"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>error:<sp/>The<sp/>function<sp/>to<sp/>call<sp/>with<sp/>any<sp/>errors<sp/>found.</highlight></codeline>
<codeline lineno="1990"><highlight class="stringliteral"><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1991"><highlight class="normal"></highlight></codeline>
<codeline lineno="1992"><highlight class="normal"><sp/><sp/>line<sp/>=<sp/>clean_lines.elided[linenum]<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>get<sp/>rid<sp/>of<sp/>comments<sp/>and<sp/>strings</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1993"><highlight class="normal"></highlight></codeline>
<codeline lineno="1994"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>Match(</highlight><highlight class="stringliteral">r&apos;\s*{\s*$&apos;</highlight><highlight class="normal">,<sp/>line):</highlight></codeline>
<codeline lineno="1995"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>We<sp/>allow<sp/>an<sp/>open<sp/>brace<sp/>to<sp/>start<sp/>a<sp/>line<sp/>in<sp/>the<sp/>case<sp/>where<sp/>someone</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1996"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>is<sp/>using<sp/>braces<sp/>in<sp/>a<sp/>block<sp/>to<sp/>explicitly<sp/>create<sp/>a<sp/>new<sp/>scope,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1997"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>which<sp/>is<sp/>commonly<sp/>used<sp/>to<sp/>control<sp/>the<sp/>lifetime<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1998"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>stack-allocated<sp/>variables.<sp/><sp/>We<sp/>don&apos;t<sp/>detect<sp/>this<sp/>perfectly:<sp/>we</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1999"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>just<sp/>don&apos;t<sp/>complain<sp/>if<sp/>the<sp/>last<sp/>non-whitespace<sp/>character<sp/>on<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2000"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>previous<sp/>non-blank<sp/>line<sp/>is<sp/>&apos;;&apos;,<sp/>&apos;:&apos;,<sp/>&apos;{&apos;,<sp/>or<sp/>&apos;}&apos;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2001"><highlight class="normal"><sp/><sp/><sp/><sp/>prevline<sp/>=<sp/>GetPreviousNonBlankLine(clean_lines,<sp/>linenum)[0]</highlight></codeline>
<codeline lineno="2002"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>Search(</highlight><highlight class="stringliteral">r&apos;[;:}{]\s*$&apos;</highlight><highlight class="normal">,<sp/>prevline):</highlight></codeline>
<codeline lineno="2003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(filename,<sp/>linenum,<sp/></highlight><highlight class="stringliteral">&apos;whitespace/braces&apos;</highlight><highlight class="normal">,<sp/>4,</highlight></codeline>
<codeline lineno="2004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;{<sp/>should<sp/>almost<sp/>always<sp/>be<sp/>at<sp/>the<sp/>end<sp/>of<sp/>the<sp/>previous<sp/>line&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2005"><highlight class="normal"></highlight></codeline>
<codeline lineno="2006"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>An<sp/>else<sp/>clause<sp/>should<sp/>be<sp/>on<sp/>the<sp/>same<sp/>line<sp/>as<sp/>the<sp/>preceding<sp/>closing<sp/>brace.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2007"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>Match(</highlight><highlight class="stringliteral">r&apos;\s*else\s*&apos;</highlight><highlight class="normal">,<sp/>line):</highlight></codeline>
<codeline lineno="2008"><highlight class="normal"><sp/><sp/><sp/><sp/>prevline<sp/>=<sp/>GetPreviousNonBlankLine(clean_lines,<sp/>linenum)[0]</highlight></codeline>
<codeline lineno="2009"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>Match(</highlight><highlight class="stringliteral">r&apos;\s*}\s*$&apos;</highlight><highlight class="normal">,<sp/>prevline):</highlight></codeline>
<codeline lineno="2010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(filename,<sp/>linenum,<sp/></highlight><highlight class="stringliteral">&apos;whitespace/newline&apos;</highlight><highlight class="normal">,<sp/>4,</highlight></codeline>
<codeline lineno="2011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;An<sp/>else<sp/>should<sp/>appear<sp/>on<sp/>the<sp/>same<sp/>line<sp/>as<sp/>the<sp/>preceding<sp/>}&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2012"><highlight class="normal"></highlight></codeline>
<codeline lineno="2013"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>If<sp/>braces<sp/>come<sp/>on<sp/>one<sp/>side<sp/>of<sp/>an<sp/>else,<sp/>they<sp/>should<sp/>be<sp/>on<sp/>both.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2014"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>However,<sp/>we<sp/>have<sp/>to<sp/>worry<sp/>about<sp/>&quot;else<sp/>if&quot;<sp/>that<sp/>spans<sp/>multiple<sp/>lines!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2015"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>Search(</highlight><highlight class="stringliteral">r&apos;}\s*else[^{]*$&apos;</highlight><highlight class="normal">,<sp/>line)<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>Match(</highlight><highlight class="stringliteral">r&apos;[^}]*else\s*{&apos;</highlight><highlight class="normal">,<sp/>line):</highlight></codeline>
<codeline lineno="2016"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>Search(</highlight><highlight class="stringliteral">r&apos;}\s*else<sp/>if([^{]*)$&apos;</highlight><highlight class="normal">,<sp/>line):<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>could<sp/>be<sp/>multi-line<sp/>if</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>find<sp/>the<sp/>(<sp/>after<sp/>the<sp/>if</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pos<sp/>=<sp/>line.find(</highlight><highlight class="stringliteral">&apos;else<sp/>if&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pos<sp/>=<sp/>line.find(</highlight><highlight class="stringliteral">&apos;(&apos;</highlight><highlight class="normal">,<sp/>pos)</highlight></codeline>
<codeline lineno="2020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>pos<sp/>&gt;<sp/>0:</highlight></codeline>
<codeline lineno="2021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(endline,<sp/>_,<sp/>endpos)<sp/>=<sp/><ref refid="namespacecpplint_1a9713059a1f275ecb548f18733306791d" kindref="member">CloseExpression</ref>(clean_lines,<sp/>linenum,<sp/>pos)</highlight></codeline>
<codeline lineno="2022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>endline[endpos:].find(</highlight><highlight class="stringliteral">&apos;{&apos;</highlight><highlight class="normal">)<sp/>==<sp/>-1:<sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>must<sp/>be<sp/>brace<sp/>after<sp/>if</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error(filename,<sp/>linenum,<sp/></highlight><highlight class="stringliteral">&apos;readability/braces&apos;</highlight><highlight class="normal">,<sp/>5,</highlight></codeline>
<codeline lineno="2024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;If<sp/>an<sp/>else<sp/>has<sp/>a<sp/>brace<sp/>on<sp/>one<sp/>side,<sp/>it<sp/>should<sp/>have<sp/>it<sp/>on<sp/>both&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2025"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>common<sp/>case:<sp/>else<sp/>not<sp/>followed<sp/>by<sp/>a<sp/>multi-line<sp/>if</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(filename,<sp/>linenum,<sp/></highlight><highlight class="stringliteral">&apos;readability/braces&apos;</highlight><highlight class="normal">,<sp/>5,</highlight></codeline>
<codeline lineno="2027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;If<sp/>an<sp/>else<sp/>has<sp/>a<sp/>brace<sp/>on<sp/>one<sp/>side,<sp/>it<sp/>should<sp/>have<sp/>it<sp/>on<sp/>both&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2028"><highlight class="normal"></highlight></codeline>
<codeline lineno="2029"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>Likewise,<sp/>an<sp/>else<sp/>should<sp/>never<sp/>have<sp/>the<sp/>else<sp/>clause<sp/>on<sp/>the<sp/>same<sp/>line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2030"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>Search(</highlight><highlight class="stringliteral">r&apos;\belse<sp/>[^\s{]&apos;</highlight><highlight class="normal">,<sp/>line)<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>Search(</highlight><highlight class="stringliteral">r&apos;\belse<sp/>if\b&apos;</highlight><highlight class="normal">,<sp/>line):</highlight></codeline>
<codeline lineno="2031"><highlight class="normal"><sp/><sp/><sp/><sp/>error(filename,<sp/>linenum,<sp/></highlight><highlight class="stringliteral">&apos;whitespace/newline&apos;</highlight><highlight class="normal">,<sp/>4,</highlight></codeline>
<codeline lineno="2032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;Else<sp/>clause<sp/>should<sp/>never<sp/>be<sp/>on<sp/>same<sp/>line<sp/>as<sp/>else<sp/>(use<sp/>2<sp/>lines)&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2033"><highlight class="normal"></highlight></codeline>
<codeline lineno="2034"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>In<sp/>the<sp/>same<sp/>way,<sp/>a<sp/>do/while<sp/>should<sp/>never<sp/>be<sp/>on<sp/>one<sp/>line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2035"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>Match(</highlight><highlight class="stringliteral">r&apos;\s*do<sp/>[^\s{]&apos;</highlight><highlight class="normal">,<sp/>line):</highlight></codeline>
<codeline lineno="2036"><highlight class="normal"><sp/><sp/><sp/><sp/>error(filename,<sp/>linenum,<sp/></highlight><highlight class="stringliteral">&apos;whitespace/newline&apos;</highlight><highlight class="normal">,<sp/>4,</highlight></codeline>
<codeline lineno="2037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;do/while<sp/>clauses<sp/>should<sp/>not<sp/>be<sp/>on<sp/>a<sp/>single<sp/>line&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2038"><highlight class="normal"></highlight></codeline>
<codeline lineno="2039"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>Braces<sp/>shouldn&apos;t<sp/>be<sp/>followed<sp/>by<sp/>a<sp/>;<sp/>unless<sp/>they&apos;re<sp/>defining<sp/>a<sp/>struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2040"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>or<sp/>initializing<sp/>an<sp/>array.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2041"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>We<sp/>can&apos;t<sp/>tell<sp/>in<sp/>general,<sp/>but<sp/>we<sp/>can<sp/>for<sp/>some<sp/>common<sp/>cases.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2042"><highlight class="normal"><sp/><sp/>prevlinenum<sp/>=<sp/>linenum</highlight></codeline>
<codeline lineno="2043"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2044"><highlight class="normal"><sp/><sp/><sp/><sp/>(prevline,<sp/>prevlinenum)<sp/>=<sp/>GetPreviousNonBlankLine(clean_lines,<sp/>prevlinenum)</highlight></codeline>
<codeline lineno="2045"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>Match(</highlight><highlight class="stringliteral">r&apos;\s+{.*}\s*;&apos;</highlight><highlight class="normal">,<sp/>line)<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>prevline.count(</highlight><highlight class="stringliteral">&apos;;&apos;</highlight><highlight class="normal">):</highlight></codeline>
<codeline lineno="2046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>line<sp/>=<sp/>prevline<sp/>+<sp/>line</highlight></codeline>
<codeline lineno="2047"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2049"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Search(</highlight><highlight class="stringliteral">r&apos;{.*}\s*;&apos;</highlight><highlight class="normal">,<sp/>line)<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>line.count(</highlight><highlight class="stringliteral">&apos;{&apos;</highlight><highlight class="normal">)<sp/>==<sp/>line.count(</highlight><highlight class="stringliteral">&apos;}&apos;</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>Search(</highlight><highlight class="stringliteral">r&apos;struct|class|enum|\s*=\s*{&apos;</highlight><highlight class="normal">,<sp/>line)):</highlight></codeline>
<codeline lineno="2052"><highlight class="normal"><sp/><sp/><sp/><sp/>error(filename,<sp/>linenum,<sp/></highlight><highlight class="stringliteral">&apos;readability/braces&apos;</highlight><highlight class="normal">,<sp/>4,</highlight></codeline>
<codeline lineno="2053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;You<sp/>don&apos;t<sp/>need<sp/>a<sp/>;<sp/>after<sp/>a<sp/>}&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2054"><highlight class="normal"></highlight></codeline>
<codeline lineno="2055"><highlight class="normal"></highlight></codeline>
<codeline lineno="2056"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">ReplaceableCheck(operator,<sp/>macro,<sp/>line):</highlight></codeline>
<codeline lineno="2057"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Determine<sp/>whether<sp/>a<sp/>basic<sp/>CHECK<sp/>can<sp/>be<sp/>replaced<sp/>with<sp/>a<sp/>more<sp/>specific<sp/>one.</highlight></codeline>
<codeline lineno="2058"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="2059"><highlight class="stringliteral"><sp/><sp/>For<sp/>example<sp/>suggest<sp/>using<sp/>CHECK_EQ<sp/>instead<sp/>of<sp/>CHECK(a<sp/>==<sp/>b)<sp/>and</highlight></codeline>
<codeline lineno="2060"><highlight class="stringliteral"><sp/><sp/>similarly<sp/>for<sp/>CHECK_GE,<sp/>CHECK_GT,<sp/>CHECK_LE,<sp/>CHECK_LT,<sp/>CHECK_NE.</highlight></codeline>
<codeline lineno="2061"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="2062"><highlight class="stringliteral"><sp/><sp/>Args:</highlight></codeline>
<codeline lineno="2063"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>operator:<sp/>The<sp/>C++<sp/>operator<sp/>used<sp/>in<sp/>the<sp/>CHECK.</highlight></codeline>
<codeline lineno="2064"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>macro:<sp/>The<sp/>CHECK<sp/>or<sp/>EXPECT<sp/>macro<sp/>being<sp/>called.</highlight></codeline>
<codeline lineno="2065"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>line:<sp/>The<sp/>current<sp/>source<sp/>line.</highlight></codeline>
<codeline lineno="2066"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="2067"><highlight class="stringliteral"><sp/><sp/>Returns:</highlight></codeline>
<codeline lineno="2068"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>True<sp/>if<sp/>the<sp/>CHECK<sp/>can<sp/>be<sp/>replaced<sp/>with<sp/>a<sp/>more<sp/>specific<sp/>one.</highlight></codeline>
<codeline lineno="2069"><highlight class="stringliteral"><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2070"><highlight class="normal"></highlight></codeline>
<codeline lineno="2071"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>This<sp/>matches<sp/>decimal<sp/>and<sp/>hex<sp/>integers,<sp/>strings,<sp/>and<sp/>chars<sp/>(in<sp/>that<sp/>order).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2072"><highlight class="normal"><sp/><sp/>match_constant<sp/>=<sp/></highlight><highlight class="stringliteral">r&apos;([-+]?(\d+|0[xX][0-9a-fA-F]+)[lLuU]{0,3}|&quot;.*&quot;|\&apos;.*\&apos;)&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2073"><highlight class="normal"></highlight></codeline>
<codeline lineno="2074"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>Expression<sp/>to<sp/>match<sp/>two<sp/>sides<sp/>of<sp/>the<sp/>operator<sp/>with<sp/>something<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2075"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>looks<sp/>like<sp/>a<sp/>literal,<sp/>since<sp/>CHECK(x<sp/>==<sp/>iterator)<sp/>won&apos;t<sp/>compile.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2076"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>This<sp/>means<sp/>we<sp/>can&apos;t<sp/>catch<sp/>all<sp/>the<sp/>cases<sp/>where<sp/>a<sp/>more<sp/>specific</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2077"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>CHECK<sp/>is<sp/>possible,<sp/>but<sp/>it&apos;s<sp/>less<sp/>annoying<sp/>than<sp/>dealing<sp/>with</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2078"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>extraneous<sp/>warnings.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2079"><highlight class="normal"><sp/><sp/>match_this<sp/>=<sp/>(</highlight><highlight class="stringliteral">r&apos;\s*&apos;</highlight><highlight class="normal"><sp/>+<sp/>macro<sp/>+<sp/></highlight><highlight class="stringliteral">r&apos;\((\s*&apos;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="2080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>match_constant<sp/>+<sp/></highlight><highlight class="stringliteral">r&apos;\s*&apos;</highlight><highlight class="normal"><sp/>+<sp/>operator<sp/>+<sp/></highlight><highlight class="stringliteral">r&apos;[^&lt;&gt;].*|&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&apos;.*[^&lt;&gt;]&apos;</highlight><highlight class="normal"><sp/>+<sp/>operator<sp/>+<sp/></highlight><highlight class="stringliteral">r&apos;\s*&apos;</highlight><highlight class="normal"><sp/>+<sp/>match_constant<sp/>+</highlight></codeline>
<codeline lineno="2082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&apos;\s*\))&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2083"><highlight class="normal"></highlight></codeline>
<codeline lineno="2084"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>Don&apos;t<sp/>complain<sp/>about<sp/>CHECK(x<sp/>==<sp/>NULL)<sp/>or<sp/>similar<sp/>because</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2085"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>CHECK_EQ(x,<sp/>NULL)<sp/>won&apos;t<sp/>compile<sp/>(requires<sp/>a<sp/>cast).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2086"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>Also,<sp/>don&apos;t<sp/>complain<sp/>about<sp/>more<sp/>complex<sp/>boolean<sp/>expressions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2087"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>involving<sp/>&amp;&amp;<sp/>or<sp/>||<sp/>such<sp/>as<sp/>CHECK(a<sp/>==<sp/>b<sp/>||<sp/>c<sp/>==<sp/>d).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2088"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Match(match_this,<sp/>line)<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>Search(</highlight><highlight class="stringliteral">r&apos;NULL|&amp;&amp;|\|\|&apos;</highlight><highlight class="normal">,<sp/>line)</highlight></codeline>
<codeline lineno="2089"><highlight class="normal"></highlight></codeline>
<codeline lineno="2090"><highlight class="normal"></highlight></codeline>
<codeline lineno="2091"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">CheckCheck(filename,<sp/>clean_lines,<sp/>linenum,<sp/>error):</highlight></codeline>
<codeline lineno="2092"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Checks<sp/>the<sp/>use<sp/>of<sp/>CHECK<sp/>and<sp/>EXPECT<sp/>macros.</highlight></codeline>
<codeline lineno="2093"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="2094"><highlight class="stringliteral"><sp/><sp/>Args:</highlight></codeline>
<codeline lineno="2095"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>filename:<sp/>The<sp/>name<sp/>of<sp/>the<sp/>current<sp/>file.</highlight></codeline>
<codeline lineno="2096"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>clean_lines:<sp/>A<sp/>CleansedLines<sp/>instance<sp/>containing<sp/>the<sp/>file.</highlight></codeline>
<codeline lineno="2097"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>linenum:<sp/>The<sp/>number<sp/>of<sp/>the<sp/>line<sp/>to<sp/>check.</highlight></codeline>
<codeline lineno="2098"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>error:<sp/>The<sp/>function<sp/>to<sp/>call<sp/>with<sp/>any<sp/>errors<sp/>found.</highlight></codeline>
<codeline lineno="2099"><highlight class="stringliteral"><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2100"><highlight class="normal"></highlight></codeline>
<codeline lineno="2101"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>Decide<sp/>the<sp/>set<sp/>of<sp/>replacement<sp/>macros<sp/>that<sp/>should<sp/>be<sp/>suggested</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2102"><highlight class="normal"><sp/><sp/>raw_lines<sp/>=<sp/>clean_lines.raw_lines</highlight></codeline>
<codeline lineno="2103"><highlight class="normal"><sp/><sp/>current_macro<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2104"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>macro<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>_CHECK_MACROS:</highlight></codeline>
<codeline lineno="2105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>raw_lines[linenum].find(macro)<sp/>&gt;=<sp/>0:</highlight></codeline>
<codeline lineno="2106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>current_macro<sp/>=<sp/>macro</highlight></codeline>
<codeline lineno="2107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2108"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>current_macro:</highlight></codeline>
<codeline lineno="2109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Don&apos;t<sp/>waste<sp/>time<sp/>here<sp/>if<sp/>line<sp/>doesn&apos;t<sp/>contain<sp/>&apos;CHECK&apos;<sp/>or<sp/>&apos;EXPECT&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2111"><highlight class="normal"></highlight></codeline>
<codeline lineno="2112"><highlight class="normal"><sp/><sp/>line<sp/>=<sp/>clean_lines.elided[linenum]<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>get<sp/>rid<sp/>of<sp/>comments<sp/>and<sp/>strings</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2113"><highlight class="normal"></highlight></codeline>
<codeline lineno="2114"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>Encourage<sp/>replacing<sp/>plain<sp/>CHECKs<sp/>with<sp/>CHECK_EQ/CHECK_NE/etc.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2115"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>operator<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>[</highlight><highlight class="stringliteral">&apos;==&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;!=&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;&gt;=&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;&gt;&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;&lt;=&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;&lt;&apos;</highlight><highlight class="normal">]:</highlight></codeline>
<codeline lineno="2116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>ReplaceableCheck(operator,<sp/>current_macro,<sp/>line):</highlight></codeline>
<codeline lineno="2117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(filename,<sp/>linenum,<sp/></highlight><highlight class="stringliteral">&apos;readability/check&apos;</highlight><highlight class="normal">,<sp/>2,</highlight></codeline>
<codeline lineno="2118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;Consider<sp/>using<sp/>%s<sp/>instead<sp/>of<sp/>%s(a<sp/>%s<sp/>b)&apos;</highlight><highlight class="normal"><sp/>%<sp/>(</highlight></codeline>
<codeline lineno="2119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_CHECK_REPLACEMENT[current_macro][operator],</highlight></codeline>
<codeline lineno="2120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current_macro,<sp/>operator))</highlight></codeline>
<codeline lineno="2121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2122"><highlight class="normal"></highlight></codeline>
<codeline lineno="2123"><highlight class="normal"></highlight></codeline>
<codeline lineno="2124"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">GetLineWidth(line):</highlight></codeline>
<codeline lineno="2125"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Determines<sp/>the<sp/>width<sp/>of<sp/>the<sp/>line<sp/>in<sp/>column<sp/>positions.</highlight></codeline>
<codeline lineno="2126"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="2127"><highlight class="stringliteral"><sp/><sp/>Args:</highlight></codeline>
<codeline lineno="2128"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>line:<sp/>A<sp/>string,<sp/>which<sp/>may<sp/>be<sp/>a<sp/>Unicode<sp/>string.</highlight></codeline>
<codeline lineno="2129"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="2130"><highlight class="stringliteral"><sp/><sp/>Returns:</highlight></codeline>
<codeline lineno="2131"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>The<sp/>width<sp/>of<sp/>the<sp/>line<sp/>in<sp/>column<sp/>positions,<sp/>accounting<sp/>for<sp/>Unicode</highlight></codeline>
<codeline lineno="2132"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>combining<sp/>characters<sp/>and<sp/>wide<sp/>characters.</highlight></codeline>
<codeline lineno="2133"><highlight class="stringliteral"><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2134"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>isinstance(line,<sp/>unicode):</highlight></codeline>
<codeline lineno="2135"><highlight class="normal"><sp/><sp/><sp/><sp/>width<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="2136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>uc<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>unicodedata.normalize(</highlight><highlight class="stringliteral">&apos;NFC&apos;</highlight><highlight class="normal">,<sp/>line):</highlight></codeline>
<codeline lineno="2137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>unicodedata.east_asian_width(uc)<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&apos;W&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;F&apos;</highlight><highlight class="normal">):</highlight></codeline>
<codeline lineno="2138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>width<sp/>+=<sp/>2</highlight></codeline>
<codeline lineno="2139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>unicodedata.combining(uc):</highlight></codeline>
<codeline lineno="2140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>width<sp/>+=<sp/>1</highlight></codeline>
<codeline lineno="2141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>width</highlight></codeline>
<codeline lineno="2142"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>len(line)</highlight></codeline>
<codeline lineno="2144"><highlight class="normal"></highlight></codeline>
<codeline lineno="2145"><highlight class="normal"></highlight></codeline>
<codeline lineno="2146"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">CheckStyle(filename,<sp/>clean_lines,<sp/>linenum,<sp/>file_extension,<sp/>class_state,</highlight></codeline>
<codeline lineno="2147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error):</highlight></codeline>
<codeline lineno="2148"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Checks<sp/>rules<sp/>from<sp/>the<sp/>&apos;C++<sp/>style<sp/>rules&apos;<sp/>section<sp/>of<sp/>cppguide.html.</highlight></codeline>
<codeline lineno="2149"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="2150"><highlight class="stringliteral"><sp/><sp/>Most<sp/>of<sp/>these<sp/>rules<sp/>are<sp/>hard<sp/>to<sp/>test<sp/>(naming,<sp/>comment<sp/>style),<sp/>but<sp/>we</highlight></codeline>
<codeline lineno="2151"><highlight class="stringliteral"><sp/><sp/>do<sp/>what<sp/>we<sp/>can.<sp/><sp/>In<sp/>particular<sp/>we<sp/>check<sp/>for<sp/>2-space<sp/>indents,<sp/>line<sp/>lengths,</highlight></codeline>
<codeline lineno="2152"><highlight class="stringliteral"><sp/><sp/>tab<sp/>usage,<sp/>spaces<sp/>inside<sp/>code,<sp/>etc.</highlight></codeline>
<codeline lineno="2153"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="2154"><highlight class="stringliteral"><sp/><sp/>Args:</highlight></codeline>
<codeline lineno="2155"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>filename:<sp/>The<sp/>name<sp/>of<sp/>the<sp/>current<sp/>file.</highlight></codeline>
<codeline lineno="2156"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>clean_lines:<sp/>A<sp/>CleansedLines<sp/>instance<sp/>containing<sp/>the<sp/>file.</highlight></codeline>
<codeline lineno="2157"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>linenum:<sp/>The<sp/>number<sp/>of<sp/>the<sp/>line<sp/>to<sp/>check.</highlight></codeline>
<codeline lineno="2158"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>file_extension:<sp/>The<sp/>extension<sp/>(without<sp/>the<sp/>dot)<sp/>of<sp/>the<sp/>filename.</highlight></codeline>
<codeline lineno="2159"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>error:<sp/>The<sp/>function<sp/>to<sp/>call<sp/>with<sp/>any<sp/>errors<sp/>found.</highlight></codeline>
<codeline lineno="2160"><highlight class="stringliteral"><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2161"><highlight class="normal"></highlight></codeline>
<codeline lineno="2162"><highlight class="normal"><sp/><sp/>raw_lines<sp/>=<sp/>clean_lines.raw_lines</highlight></codeline>
<codeline lineno="2163"><highlight class="normal"><sp/><sp/>line<sp/>=<sp/>raw_lines[linenum]</highlight></codeline>
<codeline lineno="2164"><highlight class="normal"></highlight></codeline>
<codeline lineno="2165"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>line.find(</highlight><highlight class="stringliteral">&apos;\t&apos;</highlight><highlight class="normal">)<sp/>!=<sp/>-1:</highlight></codeline>
<codeline lineno="2166"><highlight class="normal"><sp/><sp/><sp/><sp/>error(filename,<sp/>linenum,<sp/></highlight><highlight class="stringliteral">&apos;whitespace/tab&apos;</highlight><highlight class="normal">,<sp/>1,</highlight></codeline>
<codeline lineno="2167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;Tab<sp/>found;<sp/>better<sp/>to<sp/>use<sp/>spaces&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2168"><highlight class="normal"></highlight></codeline>
<codeline lineno="2169"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>One<sp/>or<sp/>three<sp/>blank<sp/>spaces<sp/>at<sp/>the<sp/>beginning<sp/>of<sp/>the<sp/>line<sp/>is<sp/>weird;<sp/>it&apos;s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2170"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>hard<sp/>to<sp/>reconcile<sp/>that<sp/>with<sp/>2-space<sp/>indents.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2171"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>NOTE:<sp/>here<sp/>are<sp/>the<sp/>conditions<sp/>rob<sp/>pike<sp/>used<sp/>for<sp/>his<sp/>tests.<sp/><sp/>Mine<sp/>aren&apos;t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2172"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>as<sp/>sophisticated,<sp/>but<sp/>it<sp/>may<sp/>be<sp/>worth<sp/>becoming<sp/>so:<sp/><sp/>RLENGTH==initial_spaces</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2173"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>if(RLENGTH<sp/>&gt;<sp/>20)<sp/>complain<sp/>=<sp/>0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2174"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>if(match($0,<sp/>&quot;<sp/>+(error|private|public|protected):&quot;))<sp/>complain<sp/>=<sp/>0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2175"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>if(match(prev,<sp/>&quot;&amp;&amp;<sp/>*$&quot;))<sp/>complain<sp/>=<sp/>0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2176"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>if(match(prev,<sp/>&quot;\\|\\|<sp/>*$&quot;))<sp/>complain<sp/>=<sp/>0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2177"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>if(match(prev,<sp/>&quot;[\&quot;,=&gt;&lt;]<sp/>*$&quot;))<sp/>complain<sp/>=<sp/>0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2178"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>if(match($0,<sp/>&quot;<sp/>&lt;&lt;&quot;))<sp/>complain<sp/>=<sp/>0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2179"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>if(match(prev,<sp/>&quot;<sp/>+for<sp/>\\(&quot;))<sp/>complain<sp/>=<sp/>0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2180"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>if(prevodd<sp/>&amp;&amp;<sp/>match(prevprev,<sp/>&quot;<sp/>+for<sp/>\\(&quot;))<sp/>complain<sp/>=<sp/>0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2181"><highlight class="normal"><sp/><sp/>initial_spaces<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="2182"><highlight class="normal"><sp/><sp/>cleansed_line<sp/>=<sp/>clean_lines.elided[linenum]</highlight></codeline>
<codeline lineno="2183"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>initial_spaces<sp/>&lt;<sp/>len(line)<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>line[initial_spaces]<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2184"><highlight class="normal"><sp/><sp/><sp/><sp/>initial_spaces<sp/>+=<sp/>1</highlight></codeline>
<codeline lineno="2185"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>line<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>line[-1].isspace():</highlight></codeline>
<codeline lineno="2186"><highlight class="normal"><sp/><sp/><sp/><sp/>error(filename,<sp/>linenum,<sp/></highlight><highlight class="stringliteral">&apos;whitespace/end_of_line&apos;</highlight><highlight class="normal">,<sp/>4,</highlight></codeline>
<codeline lineno="2187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;Line<sp/>ends<sp/>in<sp/>whitespace.<sp/><sp/>Consider<sp/>deleting<sp/>these<sp/>extra<sp/>spaces.&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2188"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>There<sp/>are<sp/>certain<sp/>situations<sp/>we<sp/>allow<sp/>one<sp/>space,<sp/>notably<sp/>for<sp/>labels</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2189"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>((initial_spaces<sp/>%<sp/>2<sp/>==<sp/>1)<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>Match(</highlight><highlight class="stringliteral">r&apos;\s*\w+\s*\w*\s*:\s*$&apos;</highlight><highlight class="normal">,<sp/>cleansed_line)):</highlight></codeline>
<codeline lineno="2191"><highlight class="normal"><sp/><sp/><sp/><sp/>error(filename,<sp/>linenum,<sp/></highlight><highlight class="stringliteral">&apos;whitespace/indent&apos;</highlight><highlight class="normal">,<sp/>3,</highlight></codeline>
<codeline lineno="2192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;Weird<sp/>number<sp/>of<sp/>spaces<sp/>at<sp/>line-start.<sp/><sp/>&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;Are<sp/>you<sp/>using<sp/>a<sp/>2-space<sp/>indent?&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2194"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>Labels<sp/>should<sp/>always<sp/>be<sp/>indented<sp/>at<sp/>least<sp/>one<sp/>space.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2195"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>initial_spaces<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>line[:2]<sp/>!=<sp/></highlight><highlight class="stringliteral">&apos;//&apos;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>Search(</highlight><highlight class="stringliteral">r&apos;[^:]:\s*$&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>line):</highlight></codeline>
<codeline lineno="2197"><highlight class="normal"><sp/><sp/><sp/><sp/>error(filename,<sp/>linenum,<sp/></highlight><highlight class="stringliteral">&apos;whitespace/labels&apos;</highlight><highlight class="normal">,<sp/>4,</highlight></codeline>
<codeline lineno="2198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;Labels<sp/>should<sp/>always<sp/>be<sp/>indented<sp/>at<sp/>least<sp/>one<sp/>space.<sp/><sp/>&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;If<sp/>this<sp/>is<sp/>a<sp/>member-initializer<sp/>list<sp/>in<sp/>a<sp/>constructor<sp/>or<sp/>&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;the<sp/>base<sp/>class<sp/>list<sp/>in<sp/>a<sp/>class<sp/>definition,<sp/>the<sp/>colon<sp/>should<sp/>&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;be<sp/>on<sp/>the<sp/>following<sp/>line.&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2202"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>The<sp/>public:,<sp/>protected:,<sp/>and<sp/>private:<sp/>keywords<sp/>should<sp/>be<sp/>indented<sp/>one<sp/>space.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2203"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>Match(</highlight><highlight class="stringliteral">r&apos;\s\s+(public)|(protected)|(private)\s*:&apos;</highlight><highlight class="normal">,<sp/>cleansed_line):</highlight></codeline>
<codeline lineno="2204"><highlight class="normal"><sp/><sp/><sp/><sp/>error(filename,<sp/>linenum,<sp/></highlight><highlight class="stringliteral">&apos;whitespace/indent&apos;</highlight><highlight class="normal">,<sp/>3,</highlight></codeline>
<codeline lineno="2205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;The<sp/>public:,<sp/>protected:,<sp/>and<sp/>private:<sp/>keywords<sp/>should<sp/>be<sp/>indented<sp/>one<sp/>space.&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2206"><highlight class="normal"></highlight></codeline>
<codeline lineno="2207"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>Check<sp/>if<sp/>the<sp/>line<sp/>is<sp/>a<sp/>header<sp/>guard.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2208"><highlight class="normal"><sp/><sp/>is_header_guard<sp/>=<sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2209"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>file_extension<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;h&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2210"><highlight class="normal"><sp/><sp/><sp/><sp/>cppvar<sp/>=<sp/><ref refid="namespacecpplint_1a8eedb7313093d59b41bd7c5b19c2ddaf" kindref="member">GetHeaderGuardCPPVariable</ref>(filename)</highlight></codeline>
<codeline lineno="2211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(line.startswith(</highlight><highlight class="stringliteral">&apos;#ifndef<sp/>%s&apos;</highlight><highlight class="normal"><sp/>%<sp/>cppvar)<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>line.startswith(</highlight><highlight class="stringliteral">&apos;#define<sp/>%s&apos;</highlight><highlight class="normal"><sp/>%<sp/>cppvar)<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>line.startswith(</highlight><highlight class="stringliteral">&apos;#endif<sp/><sp/>//<sp/>%s&apos;</highlight><highlight class="normal"><sp/>%<sp/>cppvar)):</highlight></codeline>
<codeline lineno="2214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>is_header_guard<sp/>=<sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2215"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>#include<sp/>lines<sp/>and<sp/>header<sp/>guards<sp/>can<sp/>be<sp/>long,<sp/>since<sp/>there&apos;s<sp/>no<sp/>clean<sp/>way<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2216"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>split<sp/>them.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2217"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2218"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>URLs<sp/>can<sp/>be<sp/>long<sp/>too.<sp/><sp/>It&apos;s<sp/>possible<sp/>to<sp/>split<sp/>these,<sp/>but<sp/>it<sp/>makes<sp/>them</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2219"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>harder<sp/>to<sp/>cut&amp;paste.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2220"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2221"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>The<sp/>&quot;$Id:...$&quot;<sp/>comment<sp/>may<sp/>also<sp/>get<sp/>very<sp/>long<sp/>without<sp/>it<sp/>being<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2222"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>developers<sp/>fault.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2223"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>line.startswith(</highlight><highlight class="stringliteral">&apos;#include&apos;</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>is_header_guard<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>Match(</highlight><highlight class="stringliteral">r&apos;^\s*//.*http(s?)://\S*$&apos;</highlight><highlight class="normal">,<sp/>line)<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>Match(</highlight><highlight class="stringliteral">r&apos;^//<sp/>\$Id:.*#[0-9]+<sp/>\$$&apos;</highlight><highlight class="normal">,<sp/>line)):</highlight></codeline>
<codeline lineno="2226"><highlight class="normal"><sp/><sp/><sp/><sp/>line_width<sp/>=<sp/>GetLineWidth(line)</highlight></codeline>
<codeline lineno="2227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>line_width<sp/>&gt;<sp/>100:</highlight></codeline>
<codeline lineno="2228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(filename,<sp/>linenum,<sp/></highlight><highlight class="stringliteral">&apos;whitespace/line_length&apos;</highlight><highlight class="normal">,<sp/>4,</highlight></codeline>
<codeline lineno="2229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;Lines<sp/>should<sp/>very<sp/>rarely<sp/>be<sp/>longer<sp/>than<sp/>100<sp/>characters&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>line_width<sp/>&gt;<sp/>80:</highlight></codeline>
<codeline lineno="2231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(filename,<sp/>linenum,<sp/></highlight><highlight class="stringliteral">&apos;whitespace/line_length&apos;</highlight><highlight class="normal">,<sp/>2,</highlight></codeline>
<codeline lineno="2232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;Lines<sp/>should<sp/>be<sp/>&lt;=<sp/>80<sp/>characters<sp/>long&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2233"><highlight class="normal"></highlight></codeline>
<codeline lineno="2234"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cleansed_line.count(</highlight><highlight class="stringliteral">&apos;;&apos;</highlight><highlight class="normal">)<sp/>&gt;<sp/>1<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>for<sp/>loops<sp/>are<sp/>allowed<sp/>two<sp/>;&apos;s<sp/>(and<sp/>may<sp/>run<sp/>over<sp/>two<sp/>lines).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cleansed_line.find(</highlight><highlight class="stringliteral">&apos;for&apos;</highlight><highlight class="normal">)<sp/>==<sp/>-1<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(GetPreviousNonBlankLine(clean_lines,<sp/>linenum)[0].find(</highlight><highlight class="stringliteral">&apos;for&apos;</highlight><highlight class="normal">)<sp/>==<sp/>-1<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetPreviousNonBlankLine(clean_lines,<sp/>linenum)[0].find(</highlight><highlight class="stringliteral">&apos;;&apos;</highlight><highlight class="normal">)<sp/>!=<sp/>-1)<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>It&apos;s<sp/>ok<sp/>to<sp/>have<sp/>many<sp/>commands<sp/>in<sp/>a<sp/>switch<sp/>case<sp/>that<sp/>fits<sp/>in<sp/>1<sp/>line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>((cleansed_line.find(</highlight><highlight class="stringliteral">&apos;case<sp/>&apos;</highlight><highlight class="normal">)<sp/>!=<sp/>-1<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cleansed_line.find(</highlight><highlight class="stringliteral">&apos;default:&apos;</highlight><highlight class="normal">)<sp/>!=<sp/>-1)<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cleansed_line.find(</highlight><highlight class="stringliteral">&apos;break;&apos;</highlight><highlight class="normal">)<sp/>!=<sp/>-1)):</highlight></codeline>
<codeline lineno="2243"><highlight class="normal"><sp/><sp/><sp/><sp/>error(filename,<sp/>linenum,<sp/></highlight><highlight class="stringliteral">&apos;whitespace/newline&apos;</highlight><highlight class="normal">,<sp/>4,</highlight></codeline>
<codeline lineno="2244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;More<sp/>than<sp/>one<sp/>command<sp/>on<sp/>the<sp/>same<sp/>line&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2245"><highlight class="normal"></highlight></codeline>
<codeline lineno="2246"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>Some<sp/>more<sp/>style<sp/>checks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2247"><highlight class="normal"><sp/><sp/>CheckBraces(filename,<sp/>clean_lines,<sp/>linenum,<sp/>error)</highlight></codeline>
<codeline lineno="2248"><highlight class="normal"><sp/><sp/>CheckSpacing(filename,<sp/>clean_lines,<sp/>linenum,<sp/>error)</highlight></codeline>
<codeline lineno="2249"><highlight class="normal"><sp/><sp/>CheckCheck(filename,<sp/>clean_lines,<sp/>linenum,<sp/>error)</highlight></codeline>
<codeline lineno="2250"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>class_state<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>class_state.classinfo_stack:</highlight></codeline>
<codeline lineno="2251"><highlight class="normal"><sp/><sp/><sp/><sp/>CheckSectionSpacing(filename,<sp/>clean_lines,</highlight></codeline>
<codeline lineno="2252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>class_state.classinfo_stack[-1],<sp/>linenum,<sp/>error)</highlight></codeline>
<codeline lineno="2253"><highlight class="normal"></highlight></codeline>
<codeline lineno="2254"><highlight class="normal"></highlight></codeline>
<codeline lineno="2255"><highlight class="normal">_RE_PATTERN_INCLUDE_NEW_STYLE<sp/>=<sp/>re.compile(</highlight><highlight class="stringliteral">r&apos;#include<sp/>+&quot;[^/]+\.h&quot;&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2256"><highlight class="normal">_RE_PATTERN_INCLUDE<sp/>=<sp/>re.compile(</highlight><highlight class="stringliteral">r&apos;^\s*#\s*include\s*([&lt;&quot;])([^&gt;&quot;]*)[&gt;&quot;].*$&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2257"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Matches<sp/>the<sp/>first<sp/>component<sp/>of<sp/>a<sp/>filename<sp/>delimited<sp/>by<sp/>-s<sp/>and<sp/>_s.<sp/>That<sp/>is:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2258"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/>_RE_FIRST_COMPONENT.match(&apos;foo&apos;).group(0)<sp/>==<sp/>&apos;foo&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2259"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/>_RE_FIRST_COMPONENT.match(&apos;foo.cc&apos;).group(0)<sp/>==<sp/>&apos;foo&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2260"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/>_RE_FIRST_COMPONENT.match(&apos;foo-bar_baz.cc&apos;).group(0)<sp/>==<sp/>&apos;foo&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2261"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/>_RE_FIRST_COMPONENT.match(&apos;foo_bar-baz.cc&apos;).group(0)<sp/>==<sp/>&apos;foo&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2262"><highlight class="normal">_RE_FIRST_COMPONENT<sp/>=<sp/>re.compile(</highlight><highlight class="stringliteral">r&apos;^[^-_.]+&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2263"><highlight class="normal"></highlight></codeline>
<codeline lineno="2264"><highlight class="normal"></highlight></codeline>
<codeline lineno="2265"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">_DropCommonSuffixes(filename):</highlight></codeline>
<codeline lineno="2266"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Drops<sp/>common<sp/>suffixes<sp/>like<sp/>_test.cc<sp/>or<sp/>-inl.h<sp/>from<sp/>filename.</highlight></codeline>
<codeline lineno="2267"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="2268"><highlight class="stringliteral"><sp/><sp/>For<sp/>example:</highlight></codeline>
<codeline lineno="2269"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>_DropCommonSuffixes(&apos;foo/foo-inl.h&apos;)</highlight></codeline>
<codeline lineno="2270"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&apos;foo/foo&apos;</highlight></codeline>
<codeline lineno="2271"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>_DropCommonSuffixes(&apos;foo/bar/foo.cc&apos;)</highlight></codeline>
<codeline lineno="2272"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&apos;foo/bar/foo&apos;</highlight></codeline>
<codeline lineno="2273"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>_DropCommonSuffixes(&apos;foo/foo_internal.h&apos;)</highlight></codeline>
<codeline lineno="2274"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&apos;foo/foo&apos;</highlight></codeline>
<codeline lineno="2275"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>_DropCommonSuffixes(&apos;foo/foo_unusualinternal.h&apos;)</highlight></codeline>
<codeline lineno="2276"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&apos;foo/foo_unusualinternal&apos;</highlight></codeline>
<codeline lineno="2277"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="2278"><highlight class="stringliteral"><sp/><sp/>Args:</highlight></codeline>
<codeline lineno="2279"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>filename:<sp/>The<sp/>input<sp/>filename.</highlight></codeline>
<codeline lineno="2280"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="2281"><highlight class="stringliteral"><sp/><sp/>Returns:</highlight></codeline>
<codeline lineno="2282"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>The<sp/>filename<sp/>with<sp/>the<sp/>common<sp/>suffix<sp/>removed.</highlight></codeline>
<codeline lineno="2283"><highlight class="stringliteral"><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2284"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>suffix<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&apos;test.cc&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;regtest.cc&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;unittest.cc&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;inl.h&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;impl.h&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;internal.h&apos;</highlight><highlight class="normal">):</highlight></codeline>
<codeline lineno="2286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(filename.endswith(suffix)<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>len(filename)<sp/>&gt;<sp/>len(suffix)<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>filename[-len(suffix)<sp/>-<sp/>1]<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&apos;-&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;_&apos;</highlight><highlight class="normal">)):</highlight></codeline>
<codeline lineno="2288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>filename[:-len(suffix)<sp/>-<sp/>1]</highlight></codeline>
<codeline lineno="2289"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os.path.splitext(filename)[0]</highlight></codeline>
<codeline lineno="2290"><highlight class="normal"></highlight></codeline>
<codeline lineno="2291"><highlight class="normal"></highlight></codeline>
<codeline lineno="2292"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">_IsTestFilename(filename):</highlight></codeline>
<codeline lineno="2293"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Determines<sp/>if<sp/>the<sp/>given<sp/>filename<sp/>has<sp/>a<sp/>suffix<sp/>that<sp/>identifies<sp/>it<sp/>as<sp/>a<sp/>test.</highlight></codeline>
<codeline lineno="2294"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="2295"><highlight class="stringliteral"><sp/><sp/>Args:</highlight></codeline>
<codeline lineno="2296"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>filename:<sp/>The<sp/>input<sp/>filename.</highlight></codeline>
<codeline lineno="2297"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="2298"><highlight class="stringliteral"><sp/><sp/>Returns:</highlight></codeline>
<codeline lineno="2299"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>True<sp/>if<sp/>&apos;filename&apos;<sp/>looks<sp/>like<sp/>a<sp/>test,<sp/>False<sp/>otherwise.</highlight></codeline>
<codeline lineno="2300"><highlight class="stringliteral"><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2301"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(filename.endswith(</highlight><highlight class="stringliteral">&apos;_test.cc&apos;</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>filename.endswith(</highlight><highlight class="stringliteral">&apos;_unittest.cc&apos;</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>filename.endswith(</highlight><highlight class="stringliteral">&apos;_regtest.cc&apos;</highlight><highlight class="normal">)):</highlight></codeline>
<codeline lineno="2304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2305"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2307"><highlight class="normal"></highlight></codeline>
<codeline lineno="2308"><highlight class="normal"></highlight></codeline>
<codeline lineno="2309"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">_ClassifyInclude(fileinfo,<sp/>include,<sp/>is_system):</highlight></codeline>
<codeline lineno="2310"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Figures<sp/>out<sp/>what<sp/>kind<sp/>of<sp/>header<sp/>&apos;include&apos;<sp/>is.</highlight></codeline>
<codeline lineno="2311"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="2312"><highlight class="stringliteral"><sp/><sp/>Args:</highlight></codeline>
<codeline lineno="2313"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>fileinfo:<sp/>The<sp/>current<sp/>file<sp/>cpplint<sp/>is<sp/>running<sp/>over.<sp/>A<sp/>FileInfo<sp/>instance.</highlight></codeline>
<codeline lineno="2314"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>include:<sp/>The<sp/>path<sp/>to<sp/>a<sp/>#included<sp/>file.</highlight></codeline>
<codeline lineno="2315"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>is_system:<sp/>True<sp/>if<sp/>the<sp/>#include<sp/>used<sp/>&lt;&gt;<sp/>rather<sp/>than<sp/>&quot;&quot;.</highlight></codeline>
<codeline lineno="2316"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="2317"><highlight class="stringliteral"><sp/><sp/>Returns:</highlight></codeline>
<codeline lineno="2318"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>One<sp/>of<sp/>the<sp/>_XXX_HEADER<sp/>constants.</highlight></codeline>
<codeline lineno="2319"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="2320"><highlight class="stringliteral"><sp/><sp/>For<sp/>example:</highlight></codeline>
<codeline lineno="2321"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>_ClassifyInclude(FileInfo(&apos;foo/foo.cc&apos;),<sp/>&apos;stdio.h&apos;,<sp/>True)</highlight></codeline>
<codeline lineno="2322"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>_C_SYS_HEADER</highlight></codeline>
<codeline lineno="2323"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>_ClassifyInclude(FileInfo(&apos;foo/foo.cc&apos;),<sp/>&apos;string&apos;,<sp/>True)</highlight></codeline>
<codeline lineno="2324"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>_CPP_SYS_HEADER</highlight></codeline>
<codeline lineno="2325"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>_ClassifyInclude(FileInfo(&apos;foo/foo.cc&apos;),<sp/>&apos;foo/foo.h&apos;,<sp/>False)</highlight></codeline>
<codeline lineno="2326"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>_LIKELY_MY_HEADER</highlight></codeline>
<codeline lineno="2327"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>_ClassifyInclude(FileInfo(&apos;foo/foo_unknown_extension.cc&apos;),</highlight></codeline>
<codeline lineno="2328"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>...<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;bar/foo_other_ext.h&apos;,<sp/>False)</highlight></codeline>
<codeline lineno="2329"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>_POSSIBLE_MY_HEADER</highlight></codeline>
<codeline lineno="2330"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>_ClassifyInclude(FileInfo(&apos;foo/foo.cc&apos;),<sp/>&apos;foo/bar.h&apos;,<sp/>False)</highlight></codeline>
<codeline lineno="2331"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>_OTHER_HEADER</highlight></codeline>
<codeline lineno="2332"><highlight class="stringliteral"><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2333"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>This<sp/>is<sp/>a<sp/>list<sp/>of<sp/>all<sp/>standard<sp/>c++<sp/>header<sp/>files,<sp/>except</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2334"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>those<sp/>already<sp/>checked<sp/>for<sp/>above.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2335"><highlight class="normal"><sp/><sp/>is_stl_h<sp/>=<sp/>include<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>_STL_HEADERS</highlight></codeline>
<codeline lineno="2336"><highlight class="normal"><sp/><sp/>is_cpp_h<sp/>=<sp/>is_stl_h<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>include<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>_CPP_HEADERS</highlight></codeline>
<codeline lineno="2337"><highlight class="normal"></highlight></codeline>
<codeline lineno="2338"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>is_system:</highlight></codeline>
<codeline lineno="2339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>is_cpp_h:</highlight></codeline>
<codeline lineno="2340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_CPP_SYS_HEADER</highlight></codeline>
<codeline lineno="2341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_C_SYS_HEADER</highlight></codeline>
<codeline lineno="2343"><highlight class="normal"></highlight></codeline>
<codeline lineno="2344"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>If<sp/>the<sp/>target<sp/>file<sp/>and<sp/>the<sp/>include<sp/>we&apos;re<sp/>checking<sp/>share<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2345"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>basename<sp/>when<sp/>we<sp/>drop<sp/>common<sp/>extensions,<sp/>and<sp/>the<sp/>include</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2346"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>lives<sp/>in<sp/>.<sp/>,<sp/>then<sp/>it&apos;s<sp/>likely<sp/>to<sp/>be<sp/>owned<sp/>by<sp/>the<sp/>target<sp/>file.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2347"><highlight class="normal"><sp/><sp/>target_dir,<sp/>target_base<sp/>=<sp/>(</highlight></codeline>
<codeline lineno="2348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>os.path.split(_DropCommonSuffixes(fileinfo.RepositoryName())))</highlight></codeline>
<codeline lineno="2349"><highlight class="normal"><sp/><sp/>include_dir,<sp/>include_base<sp/>=<sp/>os.path.split(_DropCommonSuffixes(include))</highlight></codeline>
<codeline lineno="2350"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>target_base<sp/>==<sp/>include_base<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>(</highlight></codeline>
<codeline lineno="2351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>include_dir<sp/>==<sp/>target_dir<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>include_dir<sp/>==<sp/>os.path.normpath(target_dir<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;/../public&apos;</highlight><highlight class="normal">)):</highlight></codeline>
<codeline lineno="2353"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_LIKELY_MY_HEADER</highlight></codeline>
<codeline lineno="2354"><highlight class="normal"></highlight></codeline>
<codeline lineno="2355"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>If<sp/>the<sp/>target<sp/>and<sp/>include<sp/>share<sp/>some<sp/>initial<sp/>basename</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2356"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>component,<sp/>it&apos;s<sp/>possible<sp/>the<sp/>target<sp/>is<sp/>implementing<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2357"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>include,<sp/>so<sp/>it&apos;s<sp/>allowed<sp/>to<sp/>be<sp/>first,<sp/>but<sp/>we&apos;ll<sp/>never</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2358"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>complain<sp/>if<sp/>it&apos;s<sp/>not<sp/>there.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2359"><highlight class="normal"><sp/><sp/>target_first_component<sp/>=<sp/>_RE_FIRST_COMPONENT.match(target_base)</highlight></codeline>
<codeline lineno="2360"><highlight class="normal"><sp/><sp/>include_first_component<sp/>=<sp/>_RE_FIRST_COMPONENT.match(include_base)</highlight></codeline>
<codeline lineno="2361"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(target_first_component<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>include_first_component<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>target_first_component.group(0)<sp/>==</highlight></codeline>
<codeline lineno="2363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>include_first_component.group(0)):</highlight></codeline>
<codeline lineno="2364"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_POSSIBLE_MY_HEADER</highlight></codeline>
<codeline lineno="2365"><highlight class="normal"></highlight></codeline>
<codeline lineno="2366"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_OTHER_HEADER</highlight></codeline>
<codeline lineno="2367"><highlight class="normal"></highlight></codeline>
<codeline lineno="2368"><highlight class="normal"></highlight></codeline>
<codeline lineno="2369"><highlight class="normal"></highlight></codeline>
<codeline lineno="2370"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">CheckIncludeLine(filename,<sp/>clean_lines,<sp/>linenum,<sp/>include_state,<sp/>error):</highlight></codeline>
<codeline lineno="2371"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Check<sp/>rules<sp/>that<sp/>are<sp/>applicable<sp/>to<sp/>#include<sp/>lines.</highlight></codeline>
<codeline lineno="2372"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="2373"><highlight class="stringliteral"><sp/><sp/>Strings<sp/>on<sp/>#include<sp/>lines<sp/>are<sp/>NOT<sp/>removed<sp/>from<sp/>elided<sp/>line,<sp/>to<sp/>make</highlight></codeline>
<codeline lineno="2374"><highlight class="stringliteral"><sp/><sp/>certain<sp/>tasks<sp/>easier.<sp/>However,<sp/>to<sp/>prevent<sp/>false<sp/>positives,<sp/>checks</highlight></codeline>
<codeline lineno="2375"><highlight class="stringliteral"><sp/><sp/>applicable<sp/>to<sp/>#include<sp/>lines<sp/>in<sp/>CheckLanguage<sp/>must<sp/>be<sp/>put<sp/>here.</highlight></codeline>
<codeline lineno="2376"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="2377"><highlight class="stringliteral"><sp/><sp/>Args:</highlight></codeline>
<codeline lineno="2378"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>filename:<sp/>The<sp/>name<sp/>of<sp/>the<sp/>current<sp/>file.</highlight></codeline>
<codeline lineno="2379"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>clean_lines:<sp/>A<sp/>CleansedLines<sp/>instance<sp/>containing<sp/>the<sp/>file.</highlight></codeline>
<codeline lineno="2380"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>linenum:<sp/>The<sp/>number<sp/>of<sp/>the<sp/>line<sp/>to<sp/>check.</highlight></codeline>
<codeline lineno="2381"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>include_state:<sp/>An<sp/>_IncludeState<sp/>instance<sp/>in<sp/>which<sp/>the<sp/>headers<sp/>are<sp/>inserted.</highlight></codeline>
<codeline lineno="2382"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>error:<sp/>The<sp/>function<sp/>to<sp/>call<sp/>with<sp/>any<sp/>errors<sp/>found.</highlight></codeline>
<codeline lineno="2383"><highlight class="stringliteral"><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2384"><highlight class="normal"><sp/><sp/>fileinfo<sp/>=<sp/>FileInfo(filename)</highlight></codeline>
<codeline lineno="2385"><highlight class="normal"></highlight></codeline>
<codeline lineno="2386"><highlight class="normal"><sp/><sp/>line<sp/>=<sp/>clean_lines.lines[linenum]</highlight></codeline>
<codeline lineno="2387"><highlight class="normal"></highlight></codeline>
<codeline lineno="2388"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>&quot;include&quot;<sp/>should<sp/>use<sp/>the<sp/>new<sp/>style<sp/>&quot;foo/bar.h&quot;<sp/>instead<sp/>of<sp/>just<sp/>&quot;bar.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2389"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#if<sp/>_RE_PATTERN_INCLUDE_NEW_STYLE.search(line):</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2390"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/>error(filename,<sp/>linenum,<sp/>&apos;build/include&apos;,<sp/>4,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2391"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;Include<sp/>the<sp/>directory<sp/>when<sp/>naming<sp/>.h<sp/>files&apos;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2392"><highlight class="normal"></highlight></codeline>
<codeline lineno="2393"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>we<sp/>shouldn&apos;t<sp/>include<sp/>a<sp/>file<sp/>more<sp/>than<sp/>once.<sp/>actually,<sp/>there<sp/>are<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2394"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>handful<sp/>of<sp/>instances<sp/>where<sp/>doing<sp/>so<sp/>is<sp/>okay,<sp/>but<sp/>in<sp/>general<sp/>it&apos;s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2395"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>not.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2396"><highlight class="normal"><sp/><sp/>match<sp/>=<sp/>_RE_PATTERN_INCLUDE.search(line)</highlight></codeline>
<codeline lineno="2397"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>match:</highlight></codeline>
<codeline lineno="2398"><highlight class="normal"><sp/><sp/><sp/><sp/>include<sp/>=<sp/>match.group(2)</highlight></codeline>
<codeline lineno="2399"><highlight class="normal"><sp/><sp/><sp/><sp/>is_system<sp/>=<sp/>(match.group(1)<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;&lt;&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2400"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>include<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>include_state:</highlight></codeline>
<codeline lineno="2401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(filename,<sp/>linenum,<sp/></highlight><highlight class="stringliteral">&apos;build/include&apos;</highlight><highlight class="normal">,<sp/>4,</highlight></codeline>
<codeline lineno="2402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;&quot;%s&quot;<sp/>already<sp/>included<sp/>at<sp/>%s:%s&apos;</highlight><highlight class="normal"><sp/>%</highlight></codeline>
<codeline lineno="2403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(include,<sp/>filename,<sp/>include_state[include]))</highlight></codeline>
<codeline lineno="2404"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>include_state[include]<sp/>=<sp/>linenum</highlight></codeline>
<codeline lineno="2406"><highlight class="normal"></highlight></codeline>
<codeline lineno="2407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>We<sp/>want<sp/>to<sp/>ensure<sp/>that<sp/>headers<sp/>appear<sp/>in<sp/>the<sp/>right<sp/>order:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>1)<sp/>for<sp/>foo.cc,<sp/>foo.h<sp/><sp/>(preferred<sp/>location)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>2)<sp/>c<sp/>system<sp/>files</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>3)<sp/>cpp<sp/>system<sp/>files</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>4)<sp/>for<sp/>foo.cc,<sp/>foo.h<sp/><sp/>(deprecated<sp/>location)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>5)<sp/>other<sp/>google<sp/>headers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>We<sp/>classify<sp/>each<sp/>include<sp/>statement<sp/>as<sp/>one<sp/>of<sp/>those<sp/>5<sp/>types</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>using<sp/>a<sp/>number<sp/>of<sp/>techniques.<sp/>The<sp/>include_state<sp/>object<sp/>keeps</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>track<sp/>of<sp/>the<sp/>highest<sp/>type<sp/>seen,<sp/>and<sp/>complains<sp/>if<sp/>we<sp/>see<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>lower<sp/>type<sp/>after<sp/>that.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error_message<sp/>=<sp/>include_state.CheckNextIncludeOrder(</highlight></codeline>
<codeline lineno="2419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_ClassifyInclude(fileinfo,<sp/>include,<sp/>is_system))</highlight></codeline>
<codeline lineno="2420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>error_message:</highlight></codeline>
<codeline lineno="2421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error(filename,<sp/>linenum,<sp/></highlight><highlight class="stringliteral">&apos;build/include_order&apos;</highlight><highlight class="normal">,<sp/>4,</highlight></codeline>
<codeline lineno="2422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;%s.<sp/>Should<sp/>be:<sp/>%s.h,<sp/>c<sp/>system,<sp/>c++<sp/>system,<sp/>other.&apos;</highlight><highlight class="normal"><sp/>%</highlight></codeline>
<codeline lineno="2423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(error_message,<sp/>fileinfo.BaseName()))</highlight></codeline>
<codeline lineno="2424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>include_state.IsInAlphabeticalOrder(include):</highlight></codeline>
<codeline lineno="2425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error(filename,<sp/>linenum,<sp/></highlight><highlight class="stringliteral">&apos;build/include_alpha&apos;</highlight><highlight class="normal">,<sp/>4,</highlight></codeline>
<codeline lineno="2426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;Include<sp/>&quot;%s&quot;<sp/>not<sp/>in<sp/>alphabetical<sp/>order&apos;</highlight><highlight class="normal"><sp/>%<sp/>include)</highlight></codeline>
<codeline lineno="2427"><highlight class="normal"></highlight></codeline>
<codeline lineno="2428"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>Look<sp/>for<sp/>any<sp/>of<sp/>the<sp/>stream<sp/>classes<sp/>that<sp/>are<sp/>part<sp/>of<sp/>standard<sp/>C++.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2429"><highlight class="normal"><sp/><sp/>match<sp/>=<sp/>_RE_PATTERN_INCLUDE.match(line)</highlight></codeline>
<codeline lineno="2430"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>match:</highlight></codeline>
<codeline lineno="2431"><highlight class="normal"><sp/><sp/><sp/><sp/>include<sp/>=<sp/>match.group(2)</highlight></codeline>
<codeline lineno="2432"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>Match(</highlight><highlight class="stringliteral">r&apos;(f|ind|io|i|o|parse|pf|stdio|str|)?stream$&apos;</highlight><highlight class="normal">,<sp/>include):</highlight></codeline>
<codeline lineno="2433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Many<sp/>unit<sp/>tests<sp/>use<sp/>cout,<sp/>so<sp/>we<sp/>exempt<sp/>them.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>_IsTestFilename(filename):</highlight></codeline>
<codeline lineno="2435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error(filename,<sp/>linenum,<sp/></highlight><highlight class="stringliteral">&apos;readability/streams&apos;</highlight><highlight class="normal">,<sp/>3,</highlight></codeline>
<codeline lineno="2436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;Streams<sp/>are<sp/>highly<sp/>discouraged.&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2437"><highlight class="normal"></highlight></codeline>
<codeline lineno="2438"><highlight class="normal"></highlight></codeline>
<codeline lineno="2439"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">_GetTextInside(text,<sp/>start_pattern):</highlight></codeline>
<codeline lineno="2440"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Retrieves<sp/>all<sp/>the<sp/>text<sp/>between<sp/>matching<sp/>open<sp/>and<sp/>close<sp/>parentheses.</highlight></codeline>
<codeline lineno="2441"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="2442"><highlight class="stringliteral"><sp/><sp/>Given<sp/>a<sp/>string<sp/>of<sp/>lines<sp/>and<sp/>a<sp/>regular<sp/>expression<sp/>string,<sp/>retrieve<sp/>all<sp/>the<sp/>text</highlight></codeline>
<codeline lineno="2443"><highlight class="stringliteral"><sp/><sp/>following<sp/>the<sp/>expression<sp/>and<sp/>between<sp/>opening<sp/>punctuation<sp/>symbols<sp/>like</highlight></codeline>
<codeline lineno="2444"><highlight class="stringliteral"><sp/><sp/>(,<sp/>[,<sp/>or<sp/>{,<sp/>and<sp/>the<sp/>matching<sp/>close-punctuation<sp/>symbol.<sp/>This<sp/>properly<sp/>nested</highlight></codeline>
<codeline lineno="2445"><highlight class="stringliteral"><sp/><sp/>occurrences<sp/>of<sp/>the<sp/>punctuations,<sp/>so<sp/>for<sp/>the<sp/>text<sp/>like</highlight></codeline>
<codeline lineno="2446"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>printf(a(),<sp/>b(c()));</highlight></codeline>
<codeline lineno="2447"><highlight class="stringliteral"><sp/><sp/>a<sp/>call<sp/>to<sp/>_GetTextInside(text,<sp/>r&apos;printf\(&apos;)<sp/>will<sp/>return<sp/>&apos;a(),<sp/>b(c())&apos;.</highlight></codeline>
<codeline lineno="2448"><highlight class="stringliteral"><sp/><sp/>start_pattern<sp/>must<sp/>match<sp/>string<sp/>having<sp/>an<sp/>open<sp/>punctuation<sp/>symbol<sp/>at<sp/>the<sp/>end.</highlight></codeline>
<codeline lineno="2449"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="2450"><highlight class="stringliteral"><sp/><sp/>Args:</highlight></codeline>
<codeline lineno="2451"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>text:<sp/>The<sp/>lines<sp/>to<sp/>extract<sp/>text.<sp/>Its<sp/>comments<sp/>and<sp/>strings<sp/>must<sp/>be<sp/>elided.</highlight></codeline>
<codeline lineno="2452"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>It<sp/>can<sp/>be<sp/>single<sp/>line<sp/>and<sp/>can<sp/>span<sp/>multiple<sp/>lines.</highlight></codeline>
<codeline lineno="2453"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>start_pattern:<sp/>The<sp/>regexp<sp/>string<sp/>indicating<sp/>where<sp/>to<sp/>start<sp/>extracting</highlight></codeline>
<codeline lineno="2454"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>text.</highlight></codeline>
<codeline lineno="2455"><highlight class="stringliteral"><sp/><sp/>Returns:</highlight></codeline>
<codeline lineno="2456"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>The<sp/>extracted<sp/>text.</highlight></codeline>
<codeline lineno="2457"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>None<sp/>if<sp/>either<sp/>the<sp/>opening<sp/>string<sp/>or<sp/>ending<sp/>punctuation<sp/>could<sp/>not<sp/>be<sp/>found.</highlight></codeline>
<codeline lineno="2458"><highlight class="stringliteral"><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2459"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>TODO(sugawarayu):<sp/>Audit<sp/>cpplint.py<sp/>to<sp/>see<sp/>what<sp/>places<sp/>could<sp/>be<sp/>profitably</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2460"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>rewritten<sp/>to<sp/>use<sp/>_GetTextInside<sp/>(and<sp/>use<sp/>inferior<sp/>regexp<sp/>matching<sp/>today).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2461"><highlight class="normal"></highlight></codeline>
<codeline lineno="2462"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>Give<sp/>opening<sp/>punctuations<sp/>to<sp/>get<sp/>the<sp/>matching<sp/>close-punctuations.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2463"><highlight class="normal"><sp/><sp/>matching_punctuation<sp/>=<sp/>{</highlight><highlight class="stringliteral">&apos;(&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="stringliteral">&apos;)&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;{&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="stringliteral">&apos;}&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;[&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="stringliteral">&apos;]&apos;</highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="2464"><highlight class="normal"><sp/><sp/>closing_punctuation<sp/>=<sp/>set(matching_punctuation.itervalues())</highlight></codeline>
<codeline lineno="2465"><highlight class="normal"></highlight></codeline>
<codeline lineno="2466"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>Find<sp/>the<sp/>position<sp/>to<sp/>start<sp/>extracting<sp/>text.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2467"><highlight class="normal"><sp/><sp/>match<sp/>=<sp/>re.search(start_pattern,<sp/>text,<sp/>re.M)</highlight></codeline>
<codeline lineno="2468"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>match:<sp/><sp/></highlight><highlight class="comment">#<sp/>start_pattern<sp/>not<sp/>found<sp/>in<sp/>text.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2469"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2470"><highlight class="normal"><sp/><sp/>start_position<sp/>=<sp/>match.end(0)</highlight></codeline>
<codeline lineno="2471"><highlight class="normal"></highlight></codeline>
<codeline lineno="2472"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">assert</highlight><highlight class="normal"><sp/>start_position<sp/>&gt;<sp/>0,<sp/>(</highlight></codeline>
<codeline lineno="2473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;start_pattern<sp/>must<sp/>ends<sp/>with<sp/>an<sp/>opening<sp/>punctuation.&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2474"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">assert</highlight><highlight class="normal"><sp/>text[start_position<sp/>-<sp/>1]<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>matching_punctuation,<sp/>(</highlight></codeline>
<codeline lineno="2475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;start_pattern<sp/>must<sp/>ends<sp/>with<sp/>an<sp/>opening<sp/>punctuation.&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2476"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>Stack<sp/>of<sp/>closing<sp/>punctuations<sp/>we<sp/>expect<sp/>to<sp/>have<sp/>in<sp/>text<sp/>after<sp/>position.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2477"><highlight class="normal"><sp/><sp/>punctuation_stack<sp/>=<sp/>[matching_punctuation[text[start_position<sp/>-<sp/>1]]]</highlight></codeline>
<codeline lineno="2478"><highlight class="normal"><sp/><sp/>position<sp/>=<sp/>start_position</highlight></codeline>
<codeline lineno="2479"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>punctuation_stack<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>position<sp/>&lt;<sp/>len(text):</highlight></codeline>
<codeline lineno="2480"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>text[position]<sp/>==<sp/>punctuation_stack[-1]:</highlight></codeline>
<codeline lineno="2481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>punctuation_stack.pop()</highlight></codeline>
<codeline lineno="2482"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>text[position]<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>closing_punctuation:</highlight></codeline>
<codeline lineno="2483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>A<sp/>closing<sp/>punctuation<sp/>without<sp/>matching<sp/>opening<sp/>punctuations.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2485"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>text[position]<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>matching_punctuation:</highlight></codeline>
<codeline lineno="2486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>punctuation_stack.append(matching_punctuation[text[position]])</highlight></codeline>
<codeline lineno="2487"><highlight class="normal"><sp/><sp/><sp/><sp/>position<sp/>+=<sp/>1</highlight></codeline>
<codeline lineno="2488"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>punctuation_stack:</highlight></codeline>
<codeline lineno="2489"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Opening<sp/>punctuations<sp/>left<sp/>without<sp/>matching<sp/>close-punctuations.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2490"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2491"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>punctuations<sp/>match.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2492"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>text[start_position:position<sp/>-<sp/>1]</highlight></codeline>
<codeline lineno="2493"><highlight class="normal"></highlight></codeline>
<codeline lineno="2494"><highlight class="normal"></highlight></codeline>
<codeline lineno="2495"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">CheckLanguage(filename,<sp/>clean_lines,<sp/>linenum,<sp/>file_extension,<sp/>include_state,</highlight></codeline>
<codeline lineno="2496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error):</highlight></codeline>
<codeline lineno="2497"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Checks<sp/>rules<sp/>from<sp/>the<sp/>&apos;C++<sp/>language<sp/>rules&apos;<sp/>section<sp/>of<sp/>cppguide.html.</highlight></codeline>
<codeline lineno="2498"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="2499"><highlight class="stringliteral"><sp/><sp/>Some<sp/>of<sp/>these<sp/>rules<sp/>are<sp/>hard<sp/>to<sp/>test<sp/>(function<sp/>overloading,<sp/>using</highlight></codeline>
<codeline lineno="2500"><highlight class="stringliteral"><sp/><sp/>uint32<sp/>inappropriately),<sp/>but<sp/>we<sp/>do<sp/>the<sp/>best<sp/>we<sp/>can.</highlight></codeline>
<codeline lineno="2501"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="2502"><highlight class="stringliteral"><sp/><sp/>Args:</highlight></codeline>
<codeline lineno="2503"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>filename:<sp/>The<sp/>name<sp/>of<sp/>the<sp/>current<sp/>file.</highlight></codeline>
<codeline lineno="2504"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>clean_lines:<sp/>A<sp/>CleansedLines<sp/>instance<sp/>containing<sp/>the<sp/>file.</highlight></codeline>
<codeline lineno="2505"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>linenum:<sp/>The<sp/>number<sp/>of<sp/>the<sp/>line<sp/>to<sp/>check.</highlight></codeline>
<codeline lineno="2506"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>file_extension:<sp/>The<sp/>extension<sp/>(without<sp/>the<sp/>dot)<sp/>of<sp/>the<sp/>filename.</highlight></codeline>
<codeline lineno="2507"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>include_state:<sp/>An<sp/>_IncludeState<sp/>instance<sp/>in<sp/>which<sp/>the<sp/>headers<sp/>are<sp/>inserted.</highlight></codeline>
<codeline lineno="2508"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>error:<sp/>The<sp/>function<sp/>to<sp/>call<sp/>with<sp/>any<sp/>errors<sp/>found.</highlight></codeline>
<codeline lineno="2509"><highlight class="stringliteral"><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2510"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>If<sp/>the<sp/>line<sp/>is<sp/>empty<sp/>or<sp/>consists<sp/>of<sp/>entirely<sp/>a<sp/>comment,<sp/>no<sp/>need<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2511"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>check<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2512"><highlight class="normal"><sp/><sp/>line<sp/>=<sp/>clean_lines.elided[linenum]</highlight></codeline>
<codeline lineno="2513"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>line:</highlight></codeline>
<codeline lineno="2514"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2515"><highlight class="normal"></highlight></codeline>
<codeline lineno="2516"><highlight class="normal"><sp/><sp/>match<sp/>=<sp/>_RE_PATTERN_INCLUDE.search(line)</highlight></codeline>
<codeline lineno="2517"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>match:</highlight></codeline>
<codeline lineno="2518"><highlight class="normal"><sp/><sp/><sp/><sp/>CheckIncludeLine(filename,<sp/>clean_lines,<sp/>linenum,<sp/>include_state,<sp/>error)</highlight></codeline>
<codeline lineno="2519"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2520"><highlight class="normal"></highlight></codeline>
<codeline lineno="2521"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>Create<sp/>an<sp/>extended_line,<sp/>which<sp/>is<sp/>the<sp/>concatenation<sp/>of<sp/>the<sp/>current<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2522"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>next<sp/>lines,<sp/>for<sp/>more<sp/>effective<sp/>checking<sp/>of<sp/>code<sp/>that<sp/>may<sp/>span<sp/>more<sp/>than<sp/>one</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2523"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>line.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2524"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>linenum<sp/>+<sp/>1<sp/>&lt;<sp/>clean_lines.NumLines():</highlight></codeline>
<codeline lineno="2525"><highlight class="normal"><sp/><sp/><sp/><sp/>extended_line<sp/>=<sp/>line<sp/>+<sp/>clean_lines.elided[linenum<sp/>+<sp/>1]</highlight></codeline>
<codeline lineno="2526"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2527"><highlight class="normal"><sp/><sp/><sp/><sp/>extended_line<sp/>=<sp/>line</highlight></codeline>
<codeline lineno="2528"><highlight class="normal"></highlight></codeline>
<codeline lineno="2529"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>Make<sp/>Windows<sp/>paths<sp/>like<sp/>Unix.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2530"><highlight class="normal"><sp/><sp/>fullname<sp/>=<sp/>os.path.abspath(filename).replace(</highlight><highlight class="stringliteral">&apos;\\&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;/&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2531"><highlight class="normal"></highlight></codeline>
<codeline lineno="2532"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>TODO(unknown):<sp/>figure<sp/>out<sp/>if<sp/>they&apos;re<sp/>using<sp/>default<sp/>arguments<sp/>in<sp/>fn<sp/>proto.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2533"><highlight class="normal"></highlight></codeline>
<codeline lineno="2534"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>Check<sp/>for<sp/>non-const<sp/>references<sp/>in<sp/>functions.<sp/><sp/>This<sp/>is<sp/>tricky<sp/>because<sp/>&amp;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2535"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>is<sp/>also<sp/>used<sp/>to<sp/>take<sp/>the<sp/>address<sp/>of<sp/>something.<sp/><sp/>We<sp/>allow<sp/>&lt;&gt;<sp/>for<sp/>templates,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2536"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>(ignoring<sp/>whatever<sp/>is<sp/>between<sp/>the<sp/>braces)<sp/>and<sp/>:<sp/>for<sp/>classes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2537"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>These<sp/>are<sp/>complicated<sp/>re&apos;s.<sp/><sp/>They<sp/>try<sp/>to<sp/>capture<sp/>the<sp/>following:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2538"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>paren<sp/>(for<sp/>fn-prototype<sp/>start),<sp/>typename,<sp/>&amp;,<sp/>varname.<sp/><sp/>For<sp/>the<sp/>const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2539"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>version,<sp/>we&apos;re<sp/>willing<sp/>for<sp/>const<sp/>to<sp/>be<sp/>before<sp/>typename<sp/>or<sp/>after</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2540"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>Don&apos;t<sp/>check<sp/>the<sp/>implementation<sp/>on<sp/>same<sp/>line.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2541"><highlight class="normal"><sp/><sp/>fnline<sp/>=<sp/>line.split(</highlight><highlight class="stringliteral">&apos;{&apos;</highlight><highlight class="normal">,<sp/>1)[0]</highlight></codeline>
<codeline lineno="2542"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len(re.findall(</highlight><highlight class="stringliteral">r&apos;\([^()]*\b(?:[\w:]|&lt;[^()]*&gt;)+(\s?&amp;|&amp;\s?)\w+&apos;</highlight><highlight class="normal">,<sp/>fnline))<sp/>&gt;</highlight></codeline>
<codeline lineno="2543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>len(re.findall(</highlight><highlight class="stringliteral">r&apos;\([^()]*\bconst\s+(?:typename\s+)?(?:struct\s+)?&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&apos;(?:[\w:]|&lt;[^()]*&gt;)+(\s?&amp;|&amp;\s?)\w+&apos;</highlight><highlight class="normal">,<sp/>fnline))<sp/>+</highlight></codeline>
<codeline lineno="2545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>len(re.findall(</highlight><highlight class="stringliteral">r&apos;\([^()]*\b(?:[\w:]|&lt;[^()]*&gt;)+\s+const(\s?&amp;|&amp;\s?)[\w]+&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fnline))):</highlight></codeline>
<codeline lineno="2547"><highlight class="normal"></highlight></codeline>
<codeline lineno="2548"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>We<sp/>allow<sp/>non-const<sp/>references<sp/>in<sp/>a<sp/>few<sp/>standard<sp/>places,<sp/>like<sp/>functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2549"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>called<sp/>&quot;swap()&quot;<sp/>or<sp/>iostream<sp/>operators<sp/>like<sp/>&quot;&lt;&lt;&quot;<sp/>or<sp/>&quot;&gt;&gt;&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2550"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>Search(</highlight></codeline>
<codeline lineno="2551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&apos;(swap|Swap|operator[&lt;&gt;][&lt;&gt;])\s*\(\s*(?:[\w:]|&lt;.*&gt;)+\s*&amp;&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fnline):</highlight></codeline>
<codeline lineno="2553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(filename,<sp/>linenum,<sp/></highlight><highlight class="stringliteral">&apos;runtime/references&apos;</highlight><highlight class="normal">,<sp/>2,</highlight></codeline>
<codeline lineno="2554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;Is<sp/>this<sp/>a<sp/>non-const<sp/>reference?<sp/>&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;If<sp/>so,<sp/>make<sp/>const<sp/>or<sp/>use<sp/>a<sp/>pointer.&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2556"><highlight class="normal"></highlight></codeline>
<codeline lineno="2557"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>Check<sp/>to<sp/>see<sp/>if<sp/>they&apos;re<sp/>using<sp/>an<sp/>conversion<sp/>function<sp/>cast.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2558"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>I<sp/>just<sp/>try<sp/>to<sp/>capture<sp/>the<sp/>most<sp/>common<sp/>basic<sp/>types,<sp/>though<sp/>there<sp/>are<sp/>more.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2559"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>Parameterless<sp/>conversion<sp/>functions,<sp/>such<sp/>as<sp/>bool(),<sp/>are<sp/>allowed<sp/>as<sp/>they<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2560"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>probably<sp/>a<sp/>member<sp/>operator<sp/>declaration<sp/>or<sp/>default<sp/>constructor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2561"><highlight class="normal"><sp/><sp/>match<sp/>=<sp/>Search(</highlight></codeline>
<codeline lineno="2562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&apos;(\bnew\s+)?\b&apos;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>Grab<sp/>&apos;new&apos;<sp/>operator,<sp/>if<sp/>it&apos;s<sp/>there</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&apos;(int|float|double|bool|char|int32|uint32|int64|uint64)\([^)]&apos;</highlight><highlight class="normal">,<sp/>line)</highlight></codeline>
<codeline lineno="2564"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>match:</highlight></codeline>
<codeline lineno="2565"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>gMock<sp/>methods<sp/>are<sp/>defined<sp/>using<sp/>some<sp/>variant<sp/>of<sp/>MOCK_METHODx(name,<sp/>type)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2566"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>where<sp/>type<sp/>may<sp/>be<sp/>float(),<sp/>int(string),<sp/>etc.<sp/><sp/>Without<sp/>context<sp/>they<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2567"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>virtually<sp/>indistinguishable<sp/>from<sp/>int(x)<sp/>casts.<sp/>Likewise,<sp/>gMock&apos;s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2568"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>MockCallback<sp/>takes<sp/>a<sp/>template<sp/>parameter<sp/>of<sp/>the<sp/>form<sp/>return_type(arg_type),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2569"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>which<sp/>looks<sp/>much<sp/>like<sp/>the<sp/>cast<sp/>we&apos;re<sp/>trying<sp/>to<sp/>detect.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2570"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(match.group(1)<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>If<sp/>new<sp/>operator,<sp/>then<sp/>this<sp/>isn&apos;t<sp/>a<sp/>cast</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>(Match(</highlight><highlight class="stringliteral">r&apos;^\s*MOCK_(CONST_)?METHOD\d+(_T)?\(&apos;</highlight><highlight class="normal">,<sp/>line)<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Match(</highlight><highlight class="stringliteral">r&apos;^\s*MockCallback&lt;.*&gt;&apos;</highlight><highlight class="normal">,<sp/>line))):</highlight></codeline>
<codeline lineno="2573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(filename,<sp/>linenum,<sp/></highlight><highlight class="stringliteral">&apos;readability/casting&apos;</highlight><highlight class="normal">,<sp/>4,</highlight></codeline>
<codeline lineno="2574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;Using<sp/>deprecated<sp/>casting<sp/>style.<sp/><sp/>&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;Use<sp/>static_cast&lt;%s&gt;(...)<sp/>instead&apos;</highlight><highlight class="normal"><sp/>%</highlight></codeline>
<codeline lineno="2576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>match.group(2))</highlight></codeline>
<codeline lineno="2577"><highlight class="normal"></highlight></codeline>
<codeline lineno="2578"><highlight class="normal"><sp/><sp/>CheckCStyleCast(filename,<sp/>linenum,<sp/>line,<sp/>clean_lines.raw_lines[linenum],</highlight></codeline>
<codeline lineno="2579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;static_cast&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&apos;\((int|float|double|bool|char|u?int(16|32|64))\)&apos;</highlight><highlight class="normal">,<sp/>error)</highlight></codeline>
<codeline lineno="2581"><highlight class="normal"></highlight></codeline>
<codeline lineno="2582"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>This<sp/>doesn&apos;t<sp/>catch<sp/>all<sp/>cases.<sp/>Consider<sp/>(const<sp/>char<sp/>*<sp/>const)&quot;hello&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2583"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2584"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>(char<sp/>*)<sp/>&quot;foo&quot;<sp/>should<sp/>always<sp/>be<sp/>a<sp/>const_cast<sp/>(reinterpret_cast<sp/>won&apos;t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2585"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>compile).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2586"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>CheckCStyleCast(filename,<sp/>linenum,<sp/>line,<sp/>clean_lines.raw_lines[linenum],</highlight></codeline>
<codeline lineno="2587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;const_cast&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">r&apos;\((char\s?\*+\s?)\)\s*&quot;&apos;</highlight><highlight class="normal">,<sp/>error):</highlight></codeline>
<codeline lineno="2588"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">pass</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2589"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2590"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Check<sp/>pointer<sp/>casts<sp/>for<sp/>other<sp/>than<sp/>string<sp/>constants</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2591"><highlight class="normal"><sp/><sp/><sp/><sp/>CheckCStyleCast(filename,<sp/>linenum,<sp/>line,<sp/>clean_lines.raw_lines[linenum],</highlight></codeline>
<codeline lineno="2592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;reinterpret_cast&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">r&apos;\((\w+\s?\*+\s?)\)&apos;</highlight><highlight class="normal">,<sp/>error)</highlight></codeline>
<codeline lineno="2593"><highlight class="normal"></highlight></codeline>
<codeline lineno="2594"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>In<sp/>addition,<sp/>we<sp/>look<sp/>for<sp/>people<sp/>taking<sp/>the<sp/>address<sp/>of<sp/>a<sp/>cast.<sp/><sp/>This</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2595"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>is<sp/>dangerous<sp/>--<sp/>casts<sp/>can<sp/>assign<sp/>to<sp/>temporaries,<sp/>so<sp/>the<sp/>pointer<sp/>doesn&apos;t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2596"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>point<sp/>where<sp/>you<sp/>think.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2597"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>Search(</highlight></codeline>
<codeline lineno="2598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&apos;(&amp;\([^)]+\)[\w(])|(&amp;(static|dynamic|reinterpret)_cast\b)&apos;</highlight><highlight class="normal">,<sp/>line):</highlight></codeline>
<codeline lineno="2599"><highlight class="normal"><sp/><sp/><sp/><sp/>error(filename,<sp/>linenum,<sp/></highlight><highlight class="stringliteral">&apos;runtime/casting&apos;</highlight><highlight class="normal">,<sp/>4,</highlight></codeline>
<codeline lineno="2600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="stringliteral">&apos;Are<sp/>you<sp/>taking<sp/>an<sp/>address<sp/>of<sp/>a<sp/>cast?<sp/><sp/>&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;This<sp/>is<sp/>dangerous:<sp/>could<sp/>be<sp/>a<sp/>temp<sp/>var.<sp/><sp/>&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;Take<sp/>the<sp/>address<sp/>before<sp/>doing<sp/>the<sp/>cast,<sp/>rather<sp/>than<sp/>after&apos;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="2603"><highlight class="normal"></highlight></codeline>
<codeline lineno="2604"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>Check<sp/>for<sp/>people<sp/>declaring<sp/>static/global<sp/>STL<sp/>strings<sp/>at<sp/>the<sp/>top<sp/>level.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2605"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>This<sp/>is<sp/>dangerous<sp/>because<sp/>the<sp/>C++<sp/>language<sp/>does<sp/>not<sp/>guarantee<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2606"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>globals<sp/>with<sp/>constructors<sp/>are<sp/>initialized<sp/>before<sp/>the<sp/>first<sp/>access.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2607"><highlight class="normal"><sp/><sp/>match<sp/>=<sp/>Match(</highlight></codeline>
<codeline lineno="2608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&apos;((?:|static<sp/>+)(?:|const<sp/>+))string<sp/>+([a-zA-Z0-9_:]+)\b(.*)&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>line)</highlight></codeline>
<codeline lineno="2610"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>Make<sp/>sure<sp/>it&apos;s<sp/>not<sp/>a<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2611"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>Function<sp/>template<sp/>specialization<sp/>looks<sp/>like:<sp/>&quot;string<sp/>foo&lt;Type&gt;(...&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2612"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>Class<sp/>template<sp/>definitions<sp/>look<sp/>like:<sp/>&quot;string<sp/>Foo&lt;Type&gt;::Method(...&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2613"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>match<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>Match(</highlight><highlight class="stringliteral">r&apos;\s*(&lt;.*&gt;)?(::[a-zA-Z0-9_]+)?\s*\(([^&quot;]|$)&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>match.group(3)):</highlight></codeline>
<codeline lineno="2615"><highlight class="normal"><sp/><sp/><sp/><sp/>error(filename,<sp/>linenum,<sp/></highlight><highlight class="stringliteral">&apos;runtime/string&apos;</highlight><highlight class="normal">,<sp/>4,</highlight></codeline>
<codeline lineno="2616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;For<sp/>a<sp/>static/global<sp/>string<sp/>constant,<sp/>use<sp/>a<sp/>C<sp/>style<sp/>string<sp/>instead:<sp/>&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;&quot;%schar<sp/>%s[]&quot;.&apos;</highlight><highlight class="normal"><sp/>%</highlight></codeline>
<codeline lineno="2618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(match.group(1),<sp/>match.group(2)))</highlight></codeline>
<codeline lineno="2619"><highlight class="normal"></highlight></codeline>
<codeline lineno="2620"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>Check<sp/>that<sp/>we&apos;re<sp/>not<sp/>using<sp/>RTTI<sp/>outside<sp/>of<sp/>testing<sp/>code.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2621"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>Search(</highlight><highlight class="stringliteral">r&apos;\bdynamic_cast&lt;&apos;</highlight><highlight class="normal">,<sp/>line)<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>_IsTestFilename(filename):</highlight></codeline>
<codeline lineno="2622"><highlight class="normal"><sp/><sp/><sp/><sp/>error(filename,<sp/>linenum,<sp/></highlight><highlight class="stringliteral">&apos;runtime/rtti&apos;</highlight><highlight class="normal">,<sp/>5,</highlight></codeline>
<codeline lineno="2623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;Do<sp/>not<sp/>use<sp/>dynamic_cast&lt;&gt;.<sp/><sp/>If<sp/>you<sp/>need<sp/>to<sp/>cast<sp/>within<sp/>a<sp/>class<sp/>&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;hierarchy,<sp/>use<sp/>static_cast&lt;&gt;<sp/>to<sp/>upcast.<sp/><sp/>Google<sp/>doesn&apos;t<sp/>support<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;RTTI.&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2626"><highlight class="normal"></highlight></codeline>
<codeline lineno="2627"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>Search(</highlight><highlight class="stringliteral">r&apos;\b([A-Za-z0-9_]*_)\(\1\)&apos;</highlight><highlight class="normal">,<sp/>line):</highlight></codeline>
<codeline lineno="2628"><highlight class="normal"><sp/><sp/><sp/><sp/>error(filename,<sp/>linenum,<sp/></highlight><highlight class="stringliteral">&apos;runtime/init&apos;</highlight><highlight class="normal">,<sp/>4,</highlight></codeline>
<codeline lineno="2629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;You<sp/>seem<sp/>to<sp/>be<sp/>initializing<sp/>a<sp/>member<sp/>variable<sp/>with<sp/>itself.&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2630"><highlight class="normal"></highlight></codeline>
<codeline lineno="2631"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>file_extension<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;h&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2632"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>TODO(unknown):<sp/>check<sp/>that<sp/>1-arg<sp/>constructors<sp/>are<sp/>explicit.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2633"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>How<sp/>to<sp/>tell<sp/>it&apos;s<sp/>a<sp/>constructor?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2634"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(handled<sp/>in<sp/>CheckForNonStandardConstructs<sp/>for<sp/>now)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2635"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>TODO(unknown):<sp/>check<sp/>that<sp/>classes<sp/>have<sp/>DISALLOW_EVIL_CONSTRUCTORS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2636"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(level<sp/>1<sp/>error)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2637"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">pass</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2638"><highlight class="normal"></highlight></codeline>
<codeline lineno="2639"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>Check<sp/>if<sp/>people<sp/>are<sp/>using<sp/>the<sp/>verboten<sp/>C<sp/>basic<sp/>types.<sp/><sp/>The<sp/>only<sp/>exception</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2640"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>we<sp/>regularly<sp/>allow<sp/>is<sp/>&quot;unsigned<sp/>short<sp/>port&quot;<sp/>for<sp/>port.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2641"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>Search(</highlight><highlight class="stringliteral">r&apos;\bshort<sp/>port\b&apos;</highlight><highlight class="normal">,<sp/>line):</highlight></codeline>
<codeline lineno="2642"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>Search(</highlight><highlight class="stringliteral">r&apos;\bunsigned<sp/>short<sp/>port\b&apos;</highlight><highlight class="normal">,<sp/>line):</highlight></codeline>
<codeline lineno="2643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(filename,<sp/>linenum,<sp/></highlight><highlight class="stringliteral">&apos;runtime/int&apos;</highlight><highlight class="normal">,<sp/>4,</highlight></codeline>
<codeline lineno="2644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;Use<sp/>&quot;unsigned<sp/>short&quot;<sp/>for<sp/>ports,<sp/>not<sp/>&quot;short&quot;&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2645"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2646"><highlight class="normal"><sp/><sp/><sp/><sp/>match<sp/>=<sp/>Search(</highlight><highlight class="stringliteral">r&apos;\b(short|long(?!<sp/>+double)|long<sp/>long)\b&apos;</highlight><highlight class="normal">,<sp/>line)</highlight></codeline>
<codeline lineno="2647"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>match:</highlight></codeline>
<codeline lineno="2648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(filename,<sp/>linenum,<sp/></highlight><highlight class="stringliteral">&apos;runtime/int&apos;</highlight><highlight class="normal">,<sp/>4,</highlight></codeline>
<codeline lineno="2649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;Use<sp/>int16/int64/etc,<sp/>rather<sp/>than<sp/>the<sp/>C<sp/>type<sp/>%s&apos;</highlight><highlight class="normal"><sp/>%<sp/>match.group(1))</highlight></codeline>
<codeline lineno="2650"><highlight class="normal"></highlight></codeline>
<codeline lineno="2651"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>When<sp/>snprintf<sp/>is<sp/>used,<sp/>the<sp/>second<sp/>argument<sp/>shouldn&apos;t<sp/>be<sp/>a<sp/>literal.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2652"><highlight class="normal"><sp/><sp/>match<sp/>=<sp/>Search(</highlight><highlight class="stringliteral">r&apos;snprintf\s*\(([^,]*),\s*([0-9]*)\s*,&apos;</highlight><highlight class="normal">,<sp/>line)</highlight></codeline>
<codeline lineno="2653"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>match<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>match.group(2)<sp/>!=<sp/></highlight><highlight class="stringliteral">&apos;0&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2654"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>If<sp/>2nd<sp/>arg<sp/>is<sp/>zero,<sp/>snprintf<sp/>is<sp/>used<sp/>to<sp/>calculate<sp/>size.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2655"><highlight class="normal"><sp/><sp/><sp/><sp/>error(filename,<sp/>linenum,<sp/></highlight><highlight class="stringliteral">&apos;runtime/printf&apos;</highlight><highlight class="normal">,<sp/>3,</highlight></codeline>
<codeline lineno="2656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;If<sp/>you<sp/>can,<sp/>use<sp/>sizeof(%s)<sp/>instead<sp/>of<sp/>%s<sp/>as<sp/>the<sp/>2nd<sp/>arg<sp/>&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;to<sp/>snprintf.&apos;</highlight><highlight class="normal"><sp/>%<sp/>(match.group(1),<sp/>match.group(2)))</highlight></codeline>
<codeline lineno="2658"><highlight class="normal"></highlight></codeline>
<codeline lineno="2659"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>Check<sp/>if<sp/>some<sp/>verboten<sp/>C<sp/>functions<sp/>are<sp/>being<sp/>used.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2660"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>Search(</highlight><highlight class="stringliteral">r&apos;\bsprintf\b&apos;</highlight><highlight class="normal">,<sp/>line):</highlight></codeline>
<codeline lineno="2661"><highlight class="normal"><sp/><sp/><sp/><sp/>error(filename,<sp/>linenum,<sp/></highlight><highlight class="stringliteral">&apos;runtime/printf&apos;</highlight><highlight class="normal">,<sp/>5,</highlight></codeline>
<codeline lineno="2662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;Never<sp/>use<sp/>sprintf.<sp/><sp/>Use<sp/>snprintf<sp/>instead.&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2663"><highlight class="normal"><sp/><sp/>match<sp/>=<sp/>Search(</highlight><highlight class="stringliteral">r&apos;\b(strcpy|strcat)\b&apos;</highlight><highlight class="normal">,<sp/>line)</highlight></codeline>
<codeline lineno="2664"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>match:</highlight></codeline>
<codeline lineno="2665"><highlight class="normal"><sp/><sp/><sp/><sp/>error(filename,<sp/>linenum,<sp/></highlight><highlight class="stringliteral">&apos;runtime/printf&apos;</highlight><highlight class="normal">,<sp/>4,</highlight></codeline>
<codeline lineno="2666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;Almost<sp/>always,<sp/>snprintf<sp/>is<sp/>better<sp/>than<sp/>%s&apos;</highlight><highlight class="normal"><sp/>%<sp/>match.group(1))</highlight></codeline>
<codeline lineno="2667"><highlight class="normal"></highlight></codeline>
<codeline lineno="2668"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>Search(</highlight><highlight class="stringliteral">r&apos;\bsscanf\b&apos;</highlight><highlight class="normal">,<sp/>line):</highlight></codeline>
<codeline lineno="2669"><highlight class="normal"><sp/><sp/><sp/><sp/>error(filename,<sp/>linenum,<sp/></highlight><highlight class="stringliteral">&apos;runtime/printf&apos;</highlight><highlight class="normal">,<sp/>1,</highlight></codeline>
<codeline lineno="2670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;sscanf<sp/>can<sp/>be<sp/>ok,<sp/>but<sp/>is<sp/>slow<sp/>and<sp/>can<sp/>overflow<sp/>buffers.&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2671"><highlight class="normal"></highlight></codeline>
<codeline lineno="2672"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>Check<sp/>if<sp/>some<sp/>verboten<sp/>operator<sp/>overloading<sp/>is<sp/>going<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2673"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>TODO(unknown):<sp/>catch<sp/>out-of-line<sp/>unary<sp/>operator&amp;:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2674"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/>class<sp/>X<sp/>{};</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2675"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/>int<sp/>operator&amp;(const<sp/>X&amp;<sp/>x)<sp/>{<sp/>return<sp/>42;<sp/>}<sp/><sp/>//<sp/>unary<sp/>operator&amp;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2676"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>The<sp/>trick<sp/>is<sp/>it&apos;s<sp/>hard<sp/>to<sp/>tell<sp/>apart<sp/>from<sp/>binary<sp/>operator&amp;:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2677"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/>class<sp/>Y<sp/>{<sp/>int<sp/>operator&amp;(const<sp/>Y&amp;<sp/>x)<sp/>{<sp/>return<sp/>23;<sp/>}<sp/>};<sp/>//<sp/>binary<sp/>operator&amp;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2678"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>Search(</highlight><highlight class="stringliteral">r&apos;\boperator\s*&amp;\s*\(\s*\)&apos;</highlight><highlight class="normal">,<sp/>line):</highlight></codeline>
<codeline lineno="2679"><highlight class="normal"><sp/><sp/><sp/><sp/>error(filename,<sp/>linenum,<sp/></highlight><highlight class="stringliteral">&apos;runtime/operator&apos;</highlight><highlight class="normal">,<sp/>4,</highlight></codeline>
<codeline lineno="2680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;Unary<sp/>operator&amp;<sp/>is<sp/>dangerous.<sp/><sp/>Do<sp/>not<sp/>use<sp/>it.&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2681"><highlight class="normal"></highlight></codeline>
<codeline lineno="2682"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>Check<sp/>for<sp/>suspicious<sp/>usage<sp/>of<sp/>&quot;if&quot;<sp/>like</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2683"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>}<sp/>if<sp/>(a<sp/>==<sp/>b)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2684"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>Search(</highlight><highlight class="stringliteral">r&apos;\}\s*if\s*\(&apos;</highlight><highlight class="normal">,<sp/>line):</highlight></codeline>
<codeline lineno="2685"><highlight class="normal"><sp/><sp/><sp/><sp/>error(filename,<sp/>linenum,<sp/></highlight><highlight class="stringliteral">&apos;readability/braces&apos;</highlight><highlight class="normal">,<sp/>4,</highlight></codeline>
<codeline lineno="2686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;Did<sp/>you<sp/>mean<sp/>&quot;else<sp/>if&quot;?<sp/>If<sp/>not,<sp/>start<sp/>a<sp/>new<sp/>line<sp/>for<sp/>&quot;if&quot;.&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2687"><highlight class="normal"></highlight></codeline>
<codeline lineno="2688"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>Check<sp/>for<sp/>potential<sp/>format<sp/>string<sp/>bugs<sp/>like<sp/>printf(foo).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2689"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>We<sp/>constrain<sp/>the<sp/>pattern<sp/>not<sp/>to<sp/>pick<sp/>things<sp/>like<sp/>DocidForPrintf(foo).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2690"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>Not<sp/>perfect<sp/>but<sp/>it<sp/>can<sp/>catch<sp/>printf(foo.c_str())<sp/>and<sp/>printf(foo-&gt;c_str())</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2691"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>TODO(sugawarayu):<sp/>Catch<sp/>the<sp/>following<sp/>case.<sp/>Need<sp/>to<sp/>change<sp/>the<sp/>calling</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2692"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>convention<sp/>of<sp/>the<sp/>whole<sp/>function<sp/>to<sp/>process<sp/>multiple<sp/>line<sp/>to<sp/>handle<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2693"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/>printf(</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2694"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>boy_this_is_a_really_long_variable_that_cannot_fit_on_the_prev_line);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2695"><highlight class="normal"><sp/><sp/>printf_args<sp/>=<sp/>_GetTextInside(line,<sp/></highlight><highlight class="stringliteral">r&apos;(?i)\b(string)?printf\s*\(&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2696"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>printf_args:</highlight></codeline>
<codeline lineno="2697"><highlight class="normal"><sp/><sp/><sp/><sp/>match<sp/>=<sp/>Match(</highlight><highlight class="stringliteral">r&apos;([\w.\-&gt;()]+)$&apos;</highlight><highlight class="normal">,<sp/>printf_args)</highlight></codeline>
<codeline lineno="2698"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>match:</highlight></codeline>
<codeline lineno="2699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>function_name<sp/>=<sp/>re.search(</highlight><highlight class="stringliteral">r&apos;\b((?:string)?printf)\s*\(&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>line,<sp/>re.I).group(1)</highlight></codeline>
<codeline lineno="2701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(filename,<sp/>linenum,<sp/></highlight><highlight class="stringliteral">&apos;runtime/printf&apos;</highlight><highlight class="normal">,<sp/>4,</highlight></codeline>
<codeline lineno="2702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;Potential<sp/>format<sp/>string<sp/>bug.<sp/>Do<sp/>%s(&quot;%%s&quot;,<sp/>%s)<sp/>instead.&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>%<sp/>(function_name,<sp/>match.group(1)))</highlight></codeline>
<codeline lineno="2704"><highlight class="normal"></highlight></codeline>
<codeline lineno="2705"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>Check<sp/>for<sp/>potential<sp/>memset<sp/>bugs<sp/>like<sp/>memset(buf,<sp/>sizeof(buf),<sp/>0).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2706"><highlight class="normal"><sp/><sp/>match<sp/>=<sp/>Search(</highlight><highlight class="stringliteral">r&apos;memset\s*\(([^,]*),\s*([^,]*),\s*0\s*\)&apos;</highlight><highlight class="normal">,<sp/>line)</highlight></codeline>
<codeline lineno="2707"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>match<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>Match(</highlight><highlight class="stringliteral">r&quot;^&apos;&apos;|-?[0-9]+|0x[0-9A-Fa-f]$&quot;</highlight><highlight class="normal">,<sp/>match.group(2)):</highlight></codeline>
<codeline lineno="2708"><highlight class="normal"><sp/><sp/><sp/><sp/>error(filename,<sp/>linenum,<sp/></highlight><highlight class="stringliteral">&apos;runtime/memset&apos;</highlight><highlight class="normal">,<sp/>4,</highlight></codeline>
<codeline lineno="2709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;Did<sp/>you<sp/>mean<sp/>&quot;memset(%s,<sp/>0,<sp/>%s)&quot;?&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>%<sp/>(match.group(1),<sp/>match.group(2)))</highlight></codeline>
<codeline lineno="2711"><highlight class="normal"></highlight></codeline>
<codeline lineno="2712"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>Search(</highlight><highlight class="stringliteral">r&apos;\busing<sp/>namespace\b&apos;</highlight><highlight class="normal">,<sp/>line):</highlight></codeline>
<codeline lineno="2713"><highlight class="normal"><sp/><sp/><sp/><sp/>error(filename,<sp/>linenum,<sp/></highlight><highlight class="stringliteral">&apos;build/namespaces&apos;</highlight><highlight class="normal">,<sp/>5,</highlight></codeline>
<codeline lineno="2714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;Do<sp/>not<sp/>use<sp/>namespace<sp/>using-directives.<sp/><sp/>&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;Use<sp/>using-declarations<sp/>instead.&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2716"><highlight class="normal"></highlight></codeline>
<codeline lineno="2717"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>Detect<sp/>variable-length<sp/>arrays.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2718"><highlight class="normal"><sp/><sp/>match<sp/>=<sp/>Match(</highlight><highlight class="stringliteral">r&apos;\s*(.+::)?(\w+)<sp/>[a-z]\w*\[(.+)];&apos;</highlight><highlight class="normal">,<sp/>line)</highlight></codeline>
<codeline lineno="2719"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(match<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>match.group(2)<sp/>!=<sp/></highlight><highlight class="stringliteral">&apos;return&apos;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>match.group(2)<sp/>!=<sp/></highlight><highlight class="stringliteral">&apos;delete&apos;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>match.group(3).find(</highlight><highlight class="stringliteral">&apos;]&apos;</highlight><highlight class="normal">)<sp/>==<sp/>-1):</highlight></codeline>
<codeline lineno="2721"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Split<sp/>the<sp/>size<sp/>using<sp/>space<sp/>and<sp/>arithmetic<sp/>operators<sp/>as<sp/>delimiters.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2722"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>If<sp/>any<sp/>of<sp/>the<sp/>resulting<sp/>tokens<sp/>are<sp/>not<sp/>compile<sp/>time<sp/>constants<sp/>then</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2723"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>report<sp/>the<sp/>error.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2724"><highlight class="normal"><sp/><sp/><sp/><sp/>tokens<sp/>=<sp/>re.split(</highlight><highlight class="stringliteral">r&apos;\s|\+|\-|\*|\/|&lt;&lt;|&gt;&gt;]&apos;</highlight><highlight class="normal">,<sp/>match.group(3))</highlight></codeline>
<codeline lineno="2725"><highlight class="normal"><sp/><sp/><sp/><sp/>is_const<sp/>=<sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2726"><highlight class="normal"><sp/><sp/><sp/><sp/>skip_next<sp/>=<sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2727"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>tok<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>tokens:</highlight></codeline>
<codeline lineno="2728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>skip_next:</highlight></codeline>
<codeline lineno="2729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>skip_next<sp/>=<sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2731"><highlight class="normal"></highlight></codeline>
<codeline lineno="2732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>Search(</highlight><highlight class="stringliteral">r&apos;sizeof\(.+\)&apos;</highlight><highlight class="normal">,<sp/>tok):<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>Search(</highlight><highlight class="stringliteral">r&apos;arraysize\(\w+\)&apos;</highlight><highlight class="normal">,<sp/>tok):<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2734"><highlight class="normal"></highlight></codeline>
<codeline lineno="2735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tok<sp/>=<sp/>tok.lstrip(</highlight><highlight class="stringliteral">&apos;(&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tok<sp/>=<sp/>tok.rstrip(</highlight><highlight class="stringliteral">&apos;)&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>tok:<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>Match(</highlight><highlight class="stringliteral">r&apos;\d+&apos;</highlight><highlight class="normal">,<sp/>tok):<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>Match(</highlight><highlight class="stringliteral">r&apos;0[xX][0-9a-fA-F]+&apos;</highlight><highlight class="normal">,<sp/>tok):<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>Match(</highlight><highlight class="stringliteral">r&apos;k[A-Z0-9]\w*&apos;</highlight><highlight class="normal">,<sp/>tok):<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>Match(</highlight><highlight class="stringliteral">r&apos;(.+::)?k[A-Z0-9]\w*&apos;</highlight><highlight class="normal">,<sp/>tok):<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>Match(</highlight><highlight class="stringliteral">r&apos;(.+::)?[A-Z][A-Z0-9_]*&apos;</highlight><highlight class="normal">,<sp/>tok):<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>A<sp/>catch<sp/>all<sp/>for<sp/>tricky<sp/>sizeof<sp/>cases,<sp/>including<sp/>&apos;sizeof<sp/>expression&apos;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>&apos;sizeof(*type)&apos;,<sp/>&apos;sizeof(const<sp/>type)&apos;,<sp/>&apos;sizeof(struct<sp/>StructName)&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>requires<sp/>skipping<sp/>the<sp/>next<sp/>token<sp/>because<sp/>we<sp/>split<sp/>on<sp/>&apos;<sp/>&apos;<sp/>and<sp/>&apos;*&apos;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>tok.startswith(</highlight><highlight class="stringliteral">&apos;sizeof&apos;</highlight><highlight class="normal">):</highlight></codeline>
<codeline lineno="2747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>skip_next<sp/>=<sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>is_const<sp/>=<sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2751"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>is_const:</highlight></codeline>
<codeline lineno="2752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(filename,<sp/>linenum,<sp/></highlight><highlight class="stringliteral">&apos;runtime/arrays&apos;</highlight><highlight class="normal">,<sp/>1,</highlight></codeline>
<codeline lineno="2753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;Do<sp/>not<sp/>use<sp/>variable-length<sp/>arrays.<sp/><sp/>Use<sp/>an<sp/>appropriately<sp/>named<sp/>&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;(&apos;k&apos;<sp/>followed<sp/>by<sp/>CamelCase)<sp/>compile-time<sp/>constant<sp/>for<sp/>the<sp/>size.&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2755"><highlight class="normal"></highlight></codeline>
<codeline lineno="2756"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>If<sp/>DISALLOW_EVIL_CONSTRUCTORS,<sp/>DISALLOW_COPY_AND_ASSIGN,<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2757"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>DISALLOW_IMPLICIT_CONSTRUCTORS<sp/>is<sp/>present,<sp/>then<sp/>it<sp/>should<sp/>be<sp/>the<sp/>last<sp/>thing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2758"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>in<sp/>the<sp/>class<sp/>declaration.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2759"><highlight class="normal"><sp/><sp/>match<sp/>=<sp/>Match(</highlight></codeline>
<codeline lineno="2760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="stringliteral">r&apos;\s*&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&apos;(DISALLOW_(EVIL_CONSTRUCTORS|COPY_AND_ASSIGN|IMPLICIT_CONSTRUCTORS))&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&apos;\(.*\);$&apos;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="2763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>line)</highlight></codeline>
<codeline lineno="2764"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>match<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>linenum<sp/>+<sp/>1<sp/>&lt;<sp/>clean_lines.NumLines():</highlight></codeline>
<codeline lineno="2765"><highlight class="normal"><sp/><sp/><sp/><sp/>next_line<sp/>=<sp/>clean_lines.elided[linenum<sp/>+<sp/>1]</highlight></codeline>
<codeline lineno="2766"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>We<sp/>allow<sp/>some,<sp/>but<sp/>not<sp/>all,<sp/>declarations<sp/>of<sp/>variables<sp/>to<sp/>be<sp/>present</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2767"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>in<sp/>the<sp/>statement<sp/>that<sp/>defines<sp/>the<sp/>class.<sp/><sp/>The<sp/>[\w\*,\s]*<sp/>fragment<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2768"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>the<sp/>regular<sp/>expression<sp/>below<sp/>allows<sp/>users<sp/>to<sp/>declare<sp/>instances<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2769"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>the<sp/>class<sp/>or<sp/>pointers<sp/>to<sp/>instances,<sp/>but<sp/>not<sp/>less<sp/>common<sp/>types<sp/>such</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2770"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>as<sp/>function<sp/>pointers<sp/>or<sp/>arrays.<sp/><sp/>It&apos;s<sp/>a<sp/>tradeoff<sp/>between<sp/>allowing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2771"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>reasonable<sp/>code<sp/>and<sp/>avoiding<sp/>trying<sp/>to<sp/>parse<sp/>more<sp/>C++<sp/>using<sp/>regexps.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2772"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>Search(</highlight><highlight class="stringliteral">r&apos;^\s*}[\w\*,\s]*;&apos;</highlight><highlight class="normal">,<sp/>next_line):</highlight></codeline>
<codeline lineno="2773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(filename,<sp/>linenum,<sp/></highlight><highlight class="stringliteral">&apos;readability/constructors&apos;</highlight><highlight class="normal">,<sp/>3,</highlight></codeline>
<codeline lineno="2774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>match.group(1)<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;<sp/>should<sp/>be<sp/>the<sp/>last<sp/>thing<sp/>in<sp/>the<sp/>class&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2775"><highlight class="normal"></highlight></codeline>
<codeline lineno="2776"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>Check<sp/>for<sp/>use<sp/>of<sp/>unnamed<sp/>namespaces<sp/>in<sp/>header<sp/>files.<sp/><sp/>Registration</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2777"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>macros<sp/>are<sp/>typically<sp/>OK,<sp/>so<sp/>we<sp/>allow<sp/>use<sp/>of<sp/>&quot;namespace<sp/>{&quot;<sp/>on<sp/>lines</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2778"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>that<sp/>end<sp/>with<sp/>backslashes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2779"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(file_extension<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;h&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>Search(</highlight><highlight class="stringliteral">r&apos;\bnamespace\s*{&apos;</highlight><highlight class="normal">,<sp/>line)</highlight></codeline>
<codeline lineno="2781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>line[-1]<sp/>!=<sp/></highlight><highlight class="stringliteral">&apos;\\&apos;</highlight><highlight class="normal">):</highlight></codeline>
<codeline lineno="2782"><highlight class="normal"><sp/><sp/><sp/><sp/>error(filename,<sp/>linenum,<sp/></highlight><highlight class="stringliteral">&apos;build/namespaces&apos;</highlight><highlight class="normal">,<sp/>4,</highlight></codeline>
<codeline lineno="2783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;Do<sp/>not<sp/>use<sp/>unnamed<sp/>namespaces<sp/>in<sp/>header<sp/>files.<sp/><sp/>See<sp/>&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;http://google-styleguide.googlecode.com/svn/trunk/cppguide.xml#Namespaces&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;<sp/>for<sp/>more<sp/>information.&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2786"><highlight class="normal"></highlight></codeline>
<codeline lineno="2787"><highlight class="normal"></highlight></codeline>
<codeline lineno="2788"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">CheckCStyleCast(filename,<sp/>linenum,<sp/>line,<sp/>raw_line,<sp/>cast_type,<sp/>pattern,</highlight></codeline>
<codeline lineno="2789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error):</highlight></codeline>
<codeline lineno="2790"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Checks<sp/>for<sp/>a<sp/>C-style<sp/>cast<sp/>by<sp/>looking<sp/>for<sp/>the<sp/>pattern.</highlight></codeline>
<codeline lineno="2791"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="2792"><highlight class="stringliteral"><sp/><sp/>This<sp/>also<sp/>handles<sp/>sizeof(type)<sp/>warnings,<sp/>due<sp/>to<sp/>similarity<sp/>of<sp/>content.</highlight></codeline>
<codeline lineno="2793"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="2794"><highlight class="stringliteral"><sp/><sp/>Args:</highlight></codeline>
<codeline lineno="2795"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>filename:<sp/>The<sp/>name<sp/>of<sp/>the<sp/>current<sp/>file.</highlight></codeline>
<codeline lineno="2796"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>linenum:<sp/>The<sp/>number<sp/>of<sp/>the<sp/>line<sp/>to<sp/>check.</highlight></codeline>
<codeline lineno="2797"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>line:<sp/>The<sp/>line<sp/>of<sp/>code<sp/>to<sp/>check.</highlight></codeline>
<codeline lineno="2798"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>raw_line:<sp/>The<sp/>raw<sp/>line<sp/>of<sp/>code<sp/>to<sp/>check,<sp/>with<sp/>comments.</highlight></codeline>
<codeline lineno="2799"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>cast_type:<sp/>The<sp/>string<sp/>for<sp/>the<sp/>C++<sp/>cast<sp/>to<sp/>recommend.<sp/><sp/>This<sp/>is<sp/>either</highlight></codeline>
<codeline lineno="2800"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>reinterpret_cast,<sp/>static_cast,<sp/>or<sp/>const_cast,<sp/>depending.</highlight></codeline>
<codeline lineno="2801"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>pattern:<sp/>The<sp/>regular<sp/>expression<sp/>used<sp/>to<sp/>find<sp/>C-style<sp/>casts.</highlight></codeline>
<codeline lineno="2802"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>error:<sp/>The<sp/>function<sp/>to<sp/>call<sp/>with<sp/>any<sp/>errors<sp/>found.</highlight></codeline>
<codeline lineno="2803"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="2804"><highlight class="stringliteral"><sp/><sp/>Returns:</highlight></codeline>
<codeline lineno="2805"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>True<sp/>if<sp/>an<sp/>error<sp/>was<sp/>emitted.</highlight></codeline>
<codeline lineno="2806"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>False<sp/>otherwise.</highlight></codeline>
<codeline lineno="2807"><highlight class="stringliteral"><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2808"><highlight class="normal"><sp/><sp/>match<sp/>=<sp/>Search(pattern,<sp/>line)</highlight></codeline>
<codeline lineno="2809"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>match:</highlight></codeline>
<codeline lineno="2810"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2811"><highlight class="normal"></highlight></codeline>
<codeline lineno="2812"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>e.g.,<sp/>sizeof(int)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2813"><highlight class="normal"><sp/><sp/>sizeof_match<sp/>=<sp/>Match(</highlight><highlight class="stringliteral">r&apos;.*sizeof\s*$&apos;</highlight><highlight class="normal">,<sp/>line[0:match.start(1)<sp/>-<sp/>1])</highlight></codeline>
<codeline lineno="2814"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>sizeof_match:</highlight></codeline>
<codeline lineno="2815"><highlight class="normal"><sp/><sp/><sp/><sp/>error(filename,<sp/>linenum,<sp/></highlight><highlight class="stringliteral">&apos;runtime/sizeof&apos;</highlight><highlight class="normal">,<sp/>1,</highlight></codeline>
<codeline lineno="2816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;Using<sp/>sizeof(type).<sp/><sp/>Use<sp/>sizeof(varname)<sp/>instead<sp/>if<sp/>possible&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2817"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2818"><highlight class="normal"></highlight></codeline>
<codeline lineno="2819"><highlight class="normal"><sp/><sp/>remainder<sp/>=<sp/>line[match.end(0):]</highlight></codeline>
<codeline lineno="2820"><highlight class="normal"></highlight></codeline>
<codeline lineno="2821"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>The<sp/>close<sp/>paren<sp/>is<sp/>for<sp/>function<sp/>pointers<sp/>as<sp/>arguments<sp/>to<sp/>a<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2822"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>eg,<sp/>void<sp/>foo(void<sp/>(*bar)(int));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2823"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>The<sp/>semicolon<sp/>check<sp/>is<sp/>a<sp/>more<sp/>basic<sp/>function<sp/>check;<sp/>also<sp/>possibly<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2824"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>function<sp/>pointer<sp/>typedef.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2825"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>eg,<sp/>void<sp/>foo(int);<sp/>or<sp/>void<sp/>foo(int)<sp/>const;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2826"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>The<sp/>equals<sp/>check<sp/>is<sp/>for<sp/>function<sp/>pointer<sp/>assignment.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2827"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>eg,<sp/>void<sp/>*(*foo)(int)<sp/>=<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2828"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>The<sp/>&gt;<sp/>is<sp/>for<sp/>MockCallback&lt;...&gt;<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2829"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2830"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>Right<sp/>now,<sp/>this<sp/>will<sp/>only<sp/>catch<sp/>cases<sp/>where<sp/>there&apos;s<sp/>a<sp/>single<sp/>argument,<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2831"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>it&apos;s<sp/>unnamed.<sp/><sp/>It<sp/>should<sp/>probably<sp/>be<sp/>expanded<sp/>to<sp/>check<sp/>for<sp/>multiple</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2832"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>arguments<sp/>with<sp/>some<sp/>unnamed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2833"><highlight class="normal"><sp/><sp/>function_match<sp/>=<sp/>Match(</highlight><highlight class="stringliteral">r&apos;\s*(\)|=|(const)?\s*(;|\{|throw\(\)|&gt;))&apos;</highlight><highlight class="normal">,<sp/>remainder)</highlight></codeline>
<codeline lineno="2834"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>function_match:</highlight></codeline>
<codeline lineno="2835"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>function_match.group(3)<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>function_match.group(3)<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;;&apos;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="stringliteral">&apos;MockCallback&lt;&apos;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>raw_line<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;/*&apos;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>raw_line)):</highlight></codeline>
<codeline lineno="2839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(filename,<sp/>linenum,<sp/></highlight><highlight class="stringliteral">&apos;readability/function&apos;</highlight><highlight class="normal">,<sp/>3,</highlight></codeline>
<codeline lineno="2840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;All<sp/>parameters<sp/>should<sp/>be<sp/>named<sp/>in<sp/>a<sp/>function&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2841"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2842"><highlight class="normal"></highlight></codeline>
<codeline lineno="2843"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>At<sp/>this<sp/>point,<sp/>all<sp/>that<sp/>should<sp/>be<sp/>left<sp/>is<sp/>actual<sp/>casts.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2844"><highlight class="normal"><sp/><sp/>error(filename,<sp/>linenum,<sp/></highlight><highlight class="stringliteral">&apos;readability/casting&apos;</highlight><highlight class="normal">,<sp/>4,</highlight></codeline>
<codeline lineno="2845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;Using<sp/>C-style<sp/>cast.<sp/><sp/>Use<sp/>%s&lt;%s&gt;(...)<sp/>instead&apos;</highlight><highlight class="normal"><sp/>%</highlight></codeline>
<codeline lineno="2846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(cast_type,<sp/>match.group(1)))</highlight></codeline>
<codeline lineno="2847"><highlight class="normal"></highlight></codeline>
<codeline lineno="2848"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2849"><highlight class="normal"></highlight></codeline>
<codeline lineno="2850"><highlight class="normal"></highlight></codeline>
<codeline lineno="2851"><highlight class="normal">_HEADERS_CONTAINING_TEMPLATES<sp/>=<sp/>(</highlight></codeline>
<codeline lineno="2852"><highlight class="normal"><sp/><sp/><sp/><sp/>(</highlight><highlight class="stringliteral">&apos;&lt;deque&gt;&apos;</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="stringliteral">&apos;deque&apos;</highlight><highlight class="normal">,)),</highlight></codeline>
<codeline lineno="2853"><highlight class="normal"><sp/><sp/><sp/><sp/>(</highlight><highlight class="stringliteral">&apos;&lt;functional&gt;&apos;</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="stringliteral">&apos;unary_function&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;binary_function&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;plus&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;minus&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;multiplies&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;divides&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;modulus&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;negate&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;equal_to&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;not_equal_to&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;greater&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;less&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;greater_equal&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;less_equal&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;logical_and&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;logical_or&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;logical_not&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;unary_negate&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;not1&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;binary_negate&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;not2&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;bind1st&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;bind2nd&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;pointer_to_unary_function&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;pointer_to_binary_function&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;ptr_fun&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;mem_fun_t&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;mem_fun&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;mem_fun1_t&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;mem_fun1_ref_t&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;mem_fun_ref_t&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;const_mem_fun_t&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;const_mem_fun1_t&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;const_mem_fun_ref_t&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;const_mem_fun1_ref_t&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;mem_fun_ref&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)),</highlight></codeline>
<codeline lineno="2870"><highlight class="normal"><sp/><sp/><sp/><sp/>(</highlight><highlight class="stringliteral">&apos;&lt;limits&gt;&apos;</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="stringliteral">&apos;numeric_limits&apos;</highlight><highlight class="normal">,)),</highlight></codeline>
<codeline lineno="2871"><highlight class="normal"><sp/><sp/><sp/><sp/>(</highlight><highlight class="stringliteral">&apos;&lt;list&gt;&apos;</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="stringliteral">&apos;list&apos;</highlight><highlight class="normal">,)),</highlight></codeline>
<codeline lineno="2872"><highlight class="normal"><sp/><sp/><sp/><sp/>(</highlight><highlight class="stringliteral">&apos;&lt;map&gt;&apos;</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="stringliteral">&apos;map&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;multimap&apos;</highlight><highlight class="normal">,)),</highlight></codeline>
<codeline lineno="2873"><highlight class="normal"><sp/><sp/><sp/><sp/>(</highlight><highlight class="stringliteral">&apos;&lt;memory&gt;&apos;</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="stringliteral">&apos;allocator&apos;</highlight><highlight class="normal">,)),</highlight></codeline>
<codeline lineno="2874"><highlight class="normal"><sp/><sp/><sp/><sp/>(</highlight><highlight class="stringliteral">&apos;&lt;queue&gt;&apos;</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="stringliteral">&apos;queue&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;priority_queue&apos;</highlight><highlight class="normal">,)),</highlight></codeline>
<codeline lineno="2875"><highlight class="normal"><sp/><sp/><sp/><sp/>(</highlight><highlight class="stringliteral">&apos;&lt;set&gt;&apos;</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="stringliteral">&apos;set&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;multiset&apos;</highlight><highlight class="normal">,)),</highlight></codeline>
<codeline lineno="2876"><highlight class="normal"><sp/><sp/><sp/><sp/>(</highlight><highlight class="stringliteral">&apos;&lt;stack&gt;&apos;</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="stringliteral">&apos;stack&apos;</highlight><highlight class="normal">,)),</highlight></codeline>
<codeline lineno="2877"><highlight class="normal"><sp/><sp/><sp/><sp/>(</highlight><highlight class="stringliteral">&apos;&lt;string&gt;&apos;</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="stringliteral">&apos;char_traits&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;basic_string&apos;</highlight><highlight class="normal">,)),</highlight></codeline>
<codeline lineno="2878"><highlight class="normal"><sp/><sp/><sp/><sp/>(</highlight><highlight class="stringliteral">&apos;&lt;utility&gt;&apos;</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="stringliteral">&apos;pair&apos;</highlight><highlight class="normal">,)),</highlight></codeline>
<codeline lineno="2879"><highlight class="normal"><sp/><sp/><sp/><sp/>(</highlight><highlight class="stringliteral">&apos;&lt;vector&gt;&apos;</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="stringliteral">&apos;vector&apos;</highlight><highlight class="normal">,)),</highlight></codeline>
<codeline lineno="2880"><highlight class="normal"></highlight></codeline>
<codeline lineno="2881"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>gcc<sp/>extensions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2882"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Note:<sp/>std::hash<sp/>is<sp/>their<sp/>hash,<sp/>::hash<sp/>is<sp/>our<sp/>hash</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2883"><highlight class="normal"><sp/><sp/><sp/><sp/>(</highlight><highlight class="stringliteral">&apos;&lt;hash_map&gt;&apos;</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="stringliteral">&apos;hash_map&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;hash_multimap&apos;</highlight><highlight class="normal">,)),</highlight></codeline>
<codeline lineno="2884"><highlight class="normal"><sp/><sp/><sp/><sp/>(</highlight><highlight class="stringliteral">&apos;&lt;hash_set&gt;&apos;</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="stringliteral">&apos;hash_set&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;hash_multiset&apos;</highlight><highlight class="normal">,)),</highlight></codeline>
<codeline lineno="2885"><highlight class="normal"><sp/><sp/><sp/><sp/>(</highlight><highlight class="stringliteral">&apos;&lt;slist&gt;&apos;</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="stringliteral">&apos;slist&apos;</highlight><highlight class="normal">,)),</highlight></codeline>
<codeline lineno="2886"><highlight class="normal"><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="2887"><highlight class="normal"></highlight></codeline>
<codeline lineno="2888"><highlight class="normal">_RE_PATTERN_STRING<sp/>=<sp/>re.compile(</highlight><highlight class="stringliteral">r&apos;\bstring\b&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2889"><highlight class="normal"></highlight></codeline>
<codeline lineno="2890"><highlight class="normal">_re_pattern_algorithm_header<sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="2891"><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>_template<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&apos;copy&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;max&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;min&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;min_element&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;sort&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;swap&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;transform&apos;</highlight><highlight class="normal">):</highlight></codeline>
<codeline lineno="2893"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>Match<sp/>max&lt;type&gt;(...,<sp/>...),<sp/>max(...,<sp/>...),<sp/>but<sp/>not<sp/>foo-&gt;max,<sp/>foo.max<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2894"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>type::max().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2895"><highlight class="normal"><sp/><sp/>_re_pattern_algorithm_header.append(</highlight></codeline>
<codeline lineno="2896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(re.compile(</highlight><highlight class="stringliteral">r&apos;[^&gt;.]\b&apos;</highlight><highlight class="normal"><sp/>+<sp/>_template<sp/>+<sp/></highlight><highlight class="stringliteral">r&apos;(&lt;.*?&gt;)?\([^\)]&apos;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="2897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_template,</highlight></codeline>
<codeline lineno="2898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;&lt;algorithm&gt;&apos;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="2899"><highlight class="normal"></highlight></codeline>
<codeline lineno="2900"><highlight class="normal">_re_pattern_templates<sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="2901"><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>_header,<sp/>_templates<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>_HEADERS_CONTAINING_TEMPLATES:</highlight></codeline>
<codeline lineno="2902"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>_template<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>_templates:</highlight></codeline>
<codeline lineno="2903"><highlight class="normal"><sp/><sp/><sp/><sp/>_re_pattern_templates.append(</highlight></codeline>
<codeline lineno="2904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(re.compile(</highlight><highlight class="stringliteral">r&apos;(\&lt;|\b)&apos;</highlight><highlight class="normal"><sp/>+<sp/>_template<sp/>+<sp/></highlight><highlight class="stringliteral">r&apos;\s*\&lt;&apos;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="2905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_template<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;&lt;&gt;&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_header))</highlight></codeline>
<codeline lineno="2907"><highlight class="normal"></highlight></codeline>
<codeline lineno="2908"><highlight class="normal"></highlight></codeline>
<codeline lineno="2909"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">FilesBelongToSameModule(filename_cc,<sp/>filename_h):</highlight></codeline>
<codeline lineno="2910"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Check<sp/>if<sp/>these<sp/>two<sp/>filenames<sp/>belong<sp/>to<sp/>the<sp/>same<sp/>module.</highlight></codeline>
<codeline lineno="2911"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="2912"><highlight class="stringliteral"><sp/><sp/>The<sp/>concept<sp/>of<sp/>a<sp/>&apos;module&apos;<sp/>here<sp/>is<sp/>a<sp/>as<sp/>follows:</highlight></codeline>
<codeline lineno="2913"><highlight class="stringliteral"><sp/><sp/>foo.h,<sp/>foo-inl.h,<sp/>foo.cc,<sp/>foo_test.cc<sp/>and<sp/>foo_unittest.cc<sp/>belong<sp/>to<sp/>the</highlight></codeline>
<codeline lineno="2914"><highlight class="stringliteral"><sp/><sp/>same<sp/>&apos;module&apos;<sp/>if<sp/>they<sp/>are<sp/>in<sp/>the<sp/>same<sp/>directory.</highlight></codeline>
<codeline lineno="2915"><highlight class="stringliteral"><sp/><sp/>some/path/public/xyzzy<sp/>and<sp/>some/path/internal/xyzzy<sp/>are<sp/>also<sp/>considered</highlight></codeline>
<codeline lineno="2916"><highlight class="stringliteral"><sp/><sp/>to<sp/>belong<sp/>to<sp/>the<sp/>same<sp/>module<sp/>here.</highlight></codeline>
<codeline lineno="2917"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="2918"><highlight class="stringliteral"><sp/><sp/>If<sp/>the<sp/>filename_cc<sp/>contains<sp/>a<sp/>longer<sp/>path<sp/>than<sp/>the<sp/>filename_h,<sp/>for<sp/>example,</highlight></codeline>
<codeline lineno="2919"><highlight class="stringliteral"><sp/><sp/>&apos;/absolute/path/to/base/sysinfo.cc&apos;,<sp/>and<sp/>this<sp/>file<sp/>would<sp/>include</highlight></codeline>
<codeline lineno="2920"><highlight class="stringliteral"><sp/><sp/>&apos;base/sysinfo.h&apos;,<sp/>this<sp/>function<sp/>also<sp/>produces<sp/>the<sp/>prefix<sp/>needed<sp/>to<sp/>open<sp/>the</highlight></codeline>
<codeline lineno="2921"><highlight class="stringliteral"><sp/><sp/>header.<sp/>This<sp/>is<sp/>used<sp/>by<sp/>the<sp/>caller<sp/>of<sp/>this<sp/>function<sp/>to<sp/>more<sp/>robustly<sp/>open<sp/>the</highlight></codeline>
<codeline lineno="2922"><highlight class="stringliteral"><sp/><sp/>header<sp/>file.<sp/>We<sp/>don&apos;t<sp/>have<sp/>access<sp/>to<sp/>the<sp/>real<sp/>include<sp/>paths<sp/>in<sp/>this<sp/>context,</highlight></codeline>
<codeline lineno="2923"><highlight class="stringliteral"><sp/><sp/>so<sp/>we<sp/>need<sp/>this<sp/>guesswork<sp/>here.</highlight></codeline>
<codeline lineno="2924"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="2925"><highlight class="stringliteral"><sp/><sp/>Known<sp/>bugs:<sp/>tools/base/bar.cc<sp/>and<sp/>base/bar.h<sp/>belong<sp/>to<sp/>the<sp/>same<sp/>module</highlight></codeline>
<codeline lineno="2926"><highlight class="stringliteral"><sp/><sp/>according<sp/>to<sp/>this<sp/>implementation.<sp/>Because<sp/>of<sp/>this,<sp/>this<sp/>function<sp/>gives</highlight></codeline>
<codeline lineno="2927"><highlight class="stringliteral"><sp/><sp/>some<sp/>false<sp/>positives.<sp/>This<sp/>should<sp/>be<sp/>sufficiently<sp/>rare<sp/>in<sp/>practice.</highlight></codeline>
<codeline lineno="2928"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="2929"><highlight class="stringliteral"><sp/><sp/>Args:</highlight></codeline>
<codeline lineno="2930"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>filename_cc:<sp/>is<sp/>the<sp/>path<sp/>for<sp/>the<sp/>.cc<sp/>file</highlight></codeline>
<codeline lineno="2931"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>filename_h:<sp/>is<sp/>the<sp/>path<sp/>for<sp/>the<sp/>header<sp/>path</highlight></codeline>
<codeline lineno="2932"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="2933"><highlight class="stringliteral"><sp/><sp/>Returns:</highlight></codeline>
<codeline lineno="2934"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Tuple<sp/>with<sp/>a<sp/>bool<sp/>and<sp/>a<sp/>string:</highlight></codeline>
<codeline lineno="2935"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>bool:<sp/>True<sp/>if<sp/>filename_cc<sp/>and<sp/>filename_h<sp/>belong<sp/>to<sp/>the<sp/>same<sp/>module.</highlight></codeline>
<codeline lineno="2936"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>string:<sp/>the<sp/>additional<sp/>prefix<sp/>needed<sp/>to<sp/>open<sp/>the<sp/>header<sp/>file.</highlight></codeline>
<codeline lineno="2937"><highlight class="stringliteral"><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2938"><highlight class="normal"></highlight></codeline>
<codeline lineno="2939"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>filename_cc.endswith(</highlight><highlight class="stringliteral">&apos;.cc&apos;</highlight><highlight class="normal">):</highlight></codeline>
<codeline lineno="2940"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">False</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2941"><highlight class="normal"><sp/><sp/>filename_cc<sp/>=<sp/>filename_cc[:-len(</highlight><highlight class="stringliteral">&apos;.cc&apos;</highlight><highlight class="normal">)]</highlight></codeline>
<codeline lineno="2942"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>filename_cc.endswith(</highlight><highlight class="stringliteral">&apos;_unittest&apos;</highlight><highlight class="normal">):</highlight></codeline>
<codeline lineno="2943"><highlight class="normal"><sp/><sp/><sp/><sp/>filename_cc<sp/>=<sp/>filename_cc[:-len(</highlight><highlight class="stringliteral">&apos;_unittest&apos;</highlight><highlight class="normal">)]</highlight></codeline>
<codeline lineno="2944"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>filename_cc.endswith(</highlight><highlight class="stringliteral">&apos;_test&apos;</highlight><highlight class="normal">):</highlight></codeline>
<codeline lineno="2945"><highlight class="normal"><sp/><sp/><sp/><sp/>filename_cc<sp/>=<sp/>filename_cc[:-len(</highlight><highlight class="stringliteral">&apos;_test&apos;</highlight><highlight class="normal">)]</highlight></codeline>
<codeline lineno="2946"><highlight class="normal"><sp/><sp/>filename_cc<sp/>=<sp/>filename_cc.replace(</highlight><highlight class="stringliteral">&apos;/public/&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;/&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2947"><highlight class="normal"><sp/><sp/>filename_cc<sp/>=<sp/>filename_cc.replace(</highlight><highlight class="stringliteral">&apos;/internal/&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;/&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2948"><highlight class="normal"></highlight></codeline>
<codeline lineno="2949"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>filename_h.endswith(</highlight><highlight class="stringliteral">&apos;.h&apos;</highlight><highlight class="normal">):</highlight></codeline>
<codeline lineno="2950"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">False</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2951"><highlight class="normal"><sp/><sp/>filename_h<sp/>=<sp/>filename_h[:-len(</highlight><highlight class="stringliteral">&apos;.h&apos;</highlight><highlight class="normal">)]</highlight></codeline>
<codeline lineno="2952"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>filename_h.endswith(</highlight><highlight class="stringliteral">&apos;-inl&apos;</highlight><highlight class="normal">):</highlight></codeline>
<codeline lineno="2953"><highlight class="normal"><sp/><sp/><sp/><sp/>filename_h<sp/>=<sp/>filename_h[:-len(</highlight><highlight class="stringliteral">&apos;-inl&apos;</highlight><highlight class="normal">)]</highlight></codeline>
<codeline lineno="2954"><highlight class="normal"><sp/><sp/>filename_h<sp/>=<sp/>filename_h.replace(</highlight><highlight class="stringliteral">&apos;/public/&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;/&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2955"><highlight class="normal"><sp/><sp/>filename_h<sp/>=<sp/>filename_h.replace(</highlight><highlight class="stringliteral">&apos;/internal/&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;/&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2956"><highlight class="normal"></highlight></codeline>
<codeline lineno="2957"><highlight class="normal"><sp/><sp/>files_belong_to_same_module<sp/>=<sp/>filename_cc.endswith(filename_h)</highlight></codeline>
<codeline lineno="2958"><highlight class="normal"><sp/><sp/>common_path<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2959"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>files_belong_to_same_module:</highlight></codeline>
<codeline lineno="2960"><highlight class="normal"><sp/><sp/><sp/><sp/>common_path<sp/>=<sp/>filename_cc[:-len(filename_h)]</highlight></codeline>
<codeline lineno="2961"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>files_belong_to_same_module,<sp/>common_path</highlight></codeline>
<codeline lineno="2962"><highlight class="normal"></highlight></codeline>
<codeline lineno="2963"><highlight class="normal"></highlight></codeline>
<codeline lineno="2964"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">UpdateIncludeState(filename,<sp/>include_state,<sp/>io=codecs):</highlight></codeline>
<codeline lineno="2965"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Fill<sp/>up<sp/>the<sp/>include_state<sp/>with<sp/>new<sp/>includes<sp/>found<sp/>from<sp/>the<sp/>file.</highlight></codeline>
<codeline lineno="2966"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="2967"><highlight class="stringliteral"><sp/><sp/>Args:</highlight></codeline>
<codeline lineno="2968"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>filename:<sp/>the<sp/>name<sp/>of<sp/>the<sp/>header<sp/>to<sp/>read.</highlight></codeline>
<codeline lineno="2969"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>include_state:<sp/>an<sp/>_IncludeState<sp/>instance<sp/>in<sp/>which<sp/>the<sp/>headers<sp/>are<sp/>inserted.</highlight></codeline>
<codeline lineno="2970"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>io:<sp/>The<sp/>io<sp/>factory<sp/>to<sp/>use<sp/>to<sp/>read<sp/>the<sp/>file.<sp/>Provided<sp/>for<sp/>testability.</highlight></codeline>
<codeline lineno="2971"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="2972"><highlight class="stringliteral"><sp/><sp/>Returns:</highlight></codeline>
<codeline lineno="2973"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>True<sp/>if<sp/>a<sp/>header<sp/>was<sp/>succesfully<sp/>added.<sp/>False<sp/>otherwise.</highlight></codeline>
<codeline lineno="2974"><highlight class="stringliteral"><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2975"><highlight class="normal"><sp/><sp/>headerfile<sp/>=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2976"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2977"><highlight class="normal"><sp/><sp/><sp/><sp/>headerfile<sp/>=<sp/>io.open(filename,<sp/></highlight><highlight class="stringliteral">&apos;</highlight><highlight class="stringliteral">r&apos;,<sp/>&apos;</highlight><highlight class="normal">utf8&apos;,<sp/>&apos;replace&apos;)</highlight></codeline>
<codeline lineno="2978"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">except</highlight><highlight class="normal"><sp/>IOError:</highlight></codeline>
<codeline lineno="2979"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2980"><highlight class="normal"><sp/><sp/>linenum<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="2981"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>line<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>headerfile:</highlight></codeline>
<codeline lineno="2982"><highlight class="normal"><sp/><sp/><sp/><sp/>linenum<sp/>+=<sp/>1</highlight></codeline>
<codeline lineno="2983"><highlight class="normal"><sp/><sp/><sp/><sp/>clean_line<sp/>=<sp/>CleanseComments(line)</highlight></codeline>
<codeline lineno="2984"><highlight class="normal"><sp/><sp/><sp/><sp/>match<sp/>=<sp/>_RE_PATTERN_INCLUDE.search(clean_line)</highlight></codeline>
<codeline lineno="2985"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>match:</highlight></codeline>
<codeline lineno="2986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>include<sp/>=<sp/>match.group(2)</highlight></codeline>
<codeline lineno="2987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>The<sp/>value<sp/>formatting<sp/>is<sp/>cute,<sp/>but<sp/>not<sp/>really<sp/>used<sp/>right<sp/>now.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>What<sp/>matters<sp/>here<sp/>is<sp/>that<sp/>the<sp/>key<sp/>is<sp/>in<sp/>include_state.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>include_state.setdefault(include,<sp/></highlight><highlight class="stringliteral">&apos;%s:%d&apos;</highlight><highlight class="normal"><sp/>%<sp/>(filename,<sp/>linenum))</highlight></codeline>
<codeline lineno="2990"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2991"><highlight class="normal"></highlight></codeline>
<codeline lineno="2992"><highlight class="normal"></highlight></codeline>
<codeline lineno="2993"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">CheckForIncludeWhatYouUse(filename,<sp/>clean_lines,<sp/>include_state,<sp/>error,</highlight></codeline>
<codeline lineno="2994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>io=codecs):</highlight></codeline>
<codeline lineno="2995"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Reports<sp/>for<sp/>missing<sp/>stl<sp/>includes.</highlight></codeline>
<codeline lineno="2996"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="2997"><highlight class="stringliteral"><sp/><sp/>This<sp/>function<sp/>will<sp/>output<sp/>warnings<sp/>to<sp/>make<sp/>sure<sp/>you<sp/>are<sp/>including<sp/>the<sp/>headers</highlight></codeline>
<codeline lineno="2998"><highlight class="stringliteral"><sp/><sp/>necessary<sp/>for<sp/>the<sp/>stl<sp/>containers<sp/>and<sp/>functions<sp/>that<sp/>you<sp/>use.<sp/>We<sp/>only<sp/>give<sp/>one</highlight></codeline>
<codeline lineno="2999"><highlight class="stringliteral"><sp/><sp/>reason<sp/>to<sp/>include<sp/>a<sp/>header.<sp/>For<sp/>example,<sp/>if<sp/>you<sp/>use<sp/>both<sp/>equal_to&lt;&gt;<sp/>and</highlight></codeline>
<codeline lineno="3000"><highlight class="stringliteral"><sp/><sp/>less&lt;&gt;<sp/>in<sp/>a<sp/>.h<sp/>file,<sp/>only<sp/>one<sp/>(the<sp/>latter<sp/>in<sp/>the<sp/>file)<sp/>of<sp/>these<sp/>will<sp/>be</highlight></codeline>
<codeline lineno="3001"><highlight class="stringliteral"><sp/><sp/>reported<sp/>as<sp/>a<sp/>reason<sp/>to<sp/>include<sp/>the<sp/>&lt;functional&gt;.</highlight></codeline>
<codeline lineno="3002"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="3003"><highlight class="stringliteral"><sp/><sp/>Args:</highlight></codeline>
<codeline lineno="3004"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>filename:<sp/>The<sp/>name<sp/>of<sp/>the<sp/>current<sp/>file.</highlight></codeline>
<codeline lineno="3005"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>clean_lines:<sp/>A<sp/>CleansedLines<sp/>instance<sp/>containing<sp/>the<sp/>file.</highlight></codeline>
<codeline lineno="3006"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>include_state:<sp/>An<sp/>_IncludeState<sp/>instance.</highlight></codeline>
<codeline lineno="3007"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>error:<sp/>The<sp/>function<sp/>to<sp/>call<sp/>with<sp/>any<sp/>errors<sp/>found.</highlight></codeline>
<codeline lineno="3008"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>io:<sp/>The<sp/>IO<sp/>factory<sp/>to<sp/>use<sp/>to<sp/>read<sp/>the<sp/>header<sp/>file.<sp/>Provided<sp/>for<sp/>unittest</highlight></codeline>
<codeline lineno="3009"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>injection.</highlight></codeline>
<codeline lineno="3010"><highlight class="stringliteral"><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3011"><highlight class="normal"><sp/><sp/>required<sp/>=<sp/>{}<sp/><sp/></highlight><highlight class="comment">#<sp/>A<sp/>map<sp/>of<sp/>header<sp/>name<sp/>to<sp/>linenumber<sp/>and<sp/>the<sp/>template<sp/>entity.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Example<sp/>of<sp/>required:<sp/>{<sp/>&apos;&lt;functional&gt;&apos;:<sp/>(1219,<sp/>&apos;less&lt;&gt;&apos;)<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3013"><highlight class="normal"></highlight></codeline>
<codeline lineno="3014"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>linenum<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>xrange(clean_lines.NumLines()):</highlight></codeline>
<codeline lineno="3015"><highlight class="normal"><sp/><sp/><sp/><sp/>line<sp/>=<sp/>clean_lines.elided[linenum]</highlight></codeline>
<codeline lineno="3016"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>line<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>line[0]<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;#&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3018"><highlight class="normal"></highlight></codeline>
<codeline lineno="3019"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>String<sp/>is<sp/>special<sp/>--<sp/>it<sp/>is<sp/>a<sp/>non-templatized<sp/>type<sp/>in<sp/>STL.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3020"><highlight class="normal"><sp/><sp/><sp/><sp/>matched<sp/>=<sp/>_RE_PATTERN_STRING.search(line)</highlight></codeline>
<codeline lineno="3021"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>matched:</highlight></codeline>
<codeline lineno="3022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Don&apos;t<sp/>warn<sp/>about<sp/>strings<sp/>in<sp/>non-STL<sp/>namespaces:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>(We<sp/>check<sp/>only<sp/>the<sp/>first<sp/>match<sp/>per<sp/>line;<sp/>good<sp/>enough.)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>prefix<sp/>=<sp/>line[:matched.start()]</highlight></codeline>
<codeline lineno="3025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>prefix.endswith(</highlight><highlight class="stringliteral">&apos;std::&apos;</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>prefix.endswith(</highlight><highlight class="stringliteral">&apos;::&apos;</highlight><highlight class="normal">):</highlight></codeline>
<codeline lineno="3026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>required[</highlight><highlight class="stringliteral">&apos;&lt;string&gt;&apos;</highlight><highlight class="normal">]<sp/>=<sp/>(linenum,<sp/></highlight><highlight class="stringliteral">&apos;string&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="3027"><highlight class="normal"></highlight></codeline>
<codeline lineno="3028"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>pattern,<sp/>template,<sp/>header<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>_re_pattern_algorithm_header:</highlight></codeline>
<codeline lineno="3029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>pattern.search(line):</highlight></codeline>
<codeline lineno="3030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>required[header]<sp/>=<sp/>(linenum,<sp/>template)</highlight></codeline>
<codeline lineno="3031"><highlight class="normal"></highlight></codeline>
<codeline lineno="3032"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>The<sp/>following<sp/>function<sp/>is<sp/>just<sp/>a<sp/>speed<sp/>up,<sp/>no<sp/>semantics<sp/>are<sp/>changed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3033"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&apos;&lt;&apos;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>line:<sp/><sp/></highlight><highlight class="comment">#<sp/>Reduces<sp/>the<sp/>cpu<sp/>time<sp/>usage<sp/>by<sp/>skipping<sp/>lines.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3035"><highlight class="normal"></highlight></codeline>
<codeline lineno="3036"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>pattern,<sp/>template,<sp/>header<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>_re_pattern_templates:</highlight></codeline>
<codeline lineno="3037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>pattern.search(line):</highlight></codeline>
<codeline lineno="3038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>required[header]<sp/>=<sp/>(linenum,<sp/>template)</highlight></codeline>
<codeline lineno="3039"><highlight class="normal"></highlight></codeline>
<codeline lineno="3040"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>The<sp/>policy<sp/>is<sp/>that<sp/>if<sp/>you<sp/>#include<sp/>something<sp/>in<sp/>foo.h<sp/>you<sp/>don&apos;t<sp/>need<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3041"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>include<sp/>it<sp/>again<sp/>in<sp/>foo.cc.<sp/>Here,<sp/>we<sp/>will<sp/>look<sp/>at<sp/>possible<sp/>includes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3042"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>Let&apos;s<sp/>copy<sp/>the<sp/>include_state<sp/>so<sp/>it<sp/>is<sp/>only<sp/>messed<sp/>up<sp/>within<sp/>this<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3043"><highlight class="normal"><sp/><sp/>include_state<sp/>=<sp/>include_state.copy()</highlight></codeline>
<codeline lineno="3044"><highlight class="normal"></highlight></codeline>
<codeline lineno="3045"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>Did<sp/>we<sp/>find<sp/>the<sp/>header<sp/>for<sp/>this<sp/>file<sp/>(if<sp/>any)<sp/>and<sp/>succesfully<sp/>load<sp/>it?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3046"><highlight class="normal"><sp/><sp/>header_found<sp/>=<sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3047"><highlight class="normal"></highlight></codeline>
<codeline lineno="3048"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>Use<sp/>the<sp/>absolute<sp/>path<sp/>so<sp/>that<sp/>matching<sp/>works<sp/>properly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3049"><highlight class="normal"><sp/><sp/>abs_filename<sp/>=<sp/>os.path.abspath(filename)</highlight></codeline>
<codeline lineno="3050"><highlight class="normal"></highlight></codeline>
<codeline lineno="3051"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>For<sp/>Emacs&apos;s<sp/>flymake.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3052"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>If<sp/>cpplint<sp/>is<sp/>invoked<sp/>from<sp/>Emacs&apos;s<sp/>flymake,<sp/>a<sp/>temporary<sp/>file<sp/>is<sp/>generated</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3053"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>by<sp/>flymake<sp/>and<sp/>that<sp/>file<sp/>name<sp/>might<sp/>end<sp/>with<sp/>&apos;_flymake.cc&apos;.<sp/>In<sp/>that<sp/>case,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3054"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>restore<sp/>original<sp/>file<sp/>name<sp/>here<sp/>so<sp/>that<sp/>the<sp/>corresponding<sp/>header<sp/>file<sp/>can<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3055"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>found.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3056"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>e.g.<sp/>If<sp/>the<sp/>file<sp/>name<sp/>is<sp/>&apos;foo_flymake.cc&apos;,<sp/>we<sp/>should<sp/>search<sp/>for<sp/>&apos;foo.h&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3057"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>instead<sp/>of<sp/>&apos;foo_flymake.h&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3058"><highlight class="normal"><sp/><sp/>abs_filename<sp/>=<sp/>re.sub(</highlight><highlight class="stringliteral">r&apos;_flymake\.cc$&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;.cc&apos;</highlight><highlight class="normal">,<sp/>abs_filename)</highlight></codeline>
<codeline lineno="3059"><highlight class="normal"></highlight></codeline>
<codeline lineno="3060"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>include_state<sp/>is<sp/>modified<sp/>during<sp/>iteration,<sp/>so<sp/>we<sp/>iterate<sp/>over<sp/>a<sp/>copy<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3061"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>the<sp/>keys.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3062"><highlight class="normal"><sp/><sp/>header_keys<sp/>=<sp/>include_state.keys()</highlight></codeline>
<codeline lineno="3063"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>header<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>header_keys:</highlight></codeline>
<codeline lineno="3064"><highlight class="normal"><sp/><sp/><sp/><sp/>(same_module,<sp/>common_path)<sp/>=<sp/>FilesBelongToSameModule(abs_filename,<sp/>header)</highlight></codeline>
<codeline lineno="3065"><highlight class="normal"><sp/><sp/><sp/><sp/>fullpath<sp/>=<sp/>common_path<sp/>+<sp/>header</highlight></codeline>
<codeline lineno="3066"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>same_module<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>UpdateIncludeState(fullpath,<sp/>include_state,<sp/>io):</highlight></codeline>
<codeline lineno="3067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>header_found<sp/>=<sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3068"><highlight class="normal"></highlight></codeline>
<codeline lineno="3069"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>If<sp/>we<sp/>can&apos;t<sp/>find<sp/>the<sp/>header<sp/>file<sp/>for<sp/>a<sp/>.cc,<sp/>assume<sp/>it&apos;s<sp/>because<sp/>we<sp/>don&apos;t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3070"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>know<sp/>where<sp/>to<sp/>look.<sp/>In<sp/>that<sp/>case<sp/>we&apos;ll<sp/>give<sp/>up<sp/>as<sp/>we&apos;re<sp/>not<sp/>sure<sp/>they</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3071"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>didn&apos;t<sp/>include<sp/>it<sp/>in<sp/>the<sp/>.h<sp/>file.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3072"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>TODO(unknown):<sp/>Do<sp/>a<sp/>better<sp/>job<sp/>of<sp/>finding<sp/>.h<sp/>files<sp/>so<sp/>we<sp/>are<sp/>confident<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3073"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>not<sp/>having<sp/>the<sp/>.h<sp/>file<sp/>means<sp/>there<sp/>isn&apos;t<sp/>one.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3074"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>filename.endswith(</highlight><highlight class="stringliteral">&apos;.cc&apos;</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>header_found:</highlight></codeline>
<codeline lineno="3075"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3076"><highlight class="normal"></highlight></codeline>
<codeline lineno="3077"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>All<sp/>the<sp/>lines<sp/>have<sp/>been<sp/>processed,<sp/>report<sp/>the<sp/>errors<sp/>found.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3078"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>required_header_unstripped<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>required:</highlight></codeline>
<codeline lineno="3079"><highlight class="normal"><sp/><sp/><sp/><sp/>template<sp/>=<sp/>required[required_header_unstripped][1]</highlight></codeline>
<codeline lineno="3080"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>required_header_unstripped.strip(</highlight><highlight class="stringliteral">&apos;&lt;&gt;&quot;&apos;</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>include_state:</highlight></codeline>
<codeline lineno="3081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(filename,<sp/>required[required_header_unstripped][0],</highlight></codeline>
<codeline lineno="3082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;build/include_what_you_use&apos;</highlight><highlight class="normal">,<sp/>4,</highlight></codeline>
<codeline lineno="3083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;Add<sp/>#include<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>required_header_unstripped<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;<sp/>for<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>template)</highlight></codeline>
<codeline lineno="3084"><highlight class="normal"></highlight></codeline>
<codeline lineno="3085"><highlight class="normal"></highlight></codeline>
<codeline lineno="3086"><highlight class="normal">_RE_PATTERN_EXPLICIT_MAKEPAIR<sp/>=<sp/>re.compile(</highlight><highlight class="stringliteral">r&apos;\bmake_pair\s*&lt;&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="3087"><highlight class="normal"></highlight></codeline>
<codeline lineno="3088"><highlight class="normal"></highlight></codeline>
<codeline lineno="3089"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">CheckMakePairUsesDeduction(filename,<sp/>clean_lines,<sp/>linenum,<sp/>error):</highlight></codeline>
<codeline lineno="3090"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Check<sp/>that<sp/>make_pair&apos;s<sp/>template<sp/>arguments<sp/>are<sp/>deduced.</highlight></codeline>
<codeline lineno="3091"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="3092"><highlight class="stringliteral"><sp/><sp/>G++<sp/>4.6<sp/>in<sp/>C++0x<sp/>mode<sp/>fails<sp/>badly<sp/>if<sp/>make_pair&apos;s<sp/>template<sp/>arguments<sp/>are</highlight></codeline>
<codeline lineno="3093"><highlight class="stringliteral"><sp/><sp/>specified<sp/>explicitly,<sp/>and<sp/>such<sp/>use<sp/>isn&apos;t<sp/>intended<sp/>in<sp/>any<sp/>case.</highlight></codeline>
<codeline lineno="3094"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="3095"><highlight class="stringliteral"><sp/><sp/>Args:</highlight></codeline>
<codeline lineno="3096"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>filename:<sp/>The<sp/>name<sp/>of<sp/>the<sp/>current<sp/>file.</highlight></codeline>
<codeline lineno="3097"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>clean_lines:<sp/>A<sp/>CleansedLines<sp/>instance<sp/>containing<sp/>the<sp/>file.</highlight></codeline>
<codeline lineno="3098"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>linenum:<sp/>The<sp/>number<sp/>of<sp/>the<sp/>line<sp/>to<sp/>check.</highlight></codeline>
<codeline lineno="3099"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>error:<sp/>The<sp/>function<sp/>to<sp/>call<sp/>with<sp/>any<sp/>errors<sp/>found.</highlight></codeline>
<codeline lineno="3100"><highlight class="stringliteral"><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3101"><highlight class="normal"><sp/><sp/>raw<sp/>=<sp/>clean_lines.raw_lines</highlight></codeline>
<codeline lineno="3102"><highlight class="normal"><sp/><sp/>line<sp/>=<sp/>raw[linenum]</highlight></codeline>
<codeline lineno="3103"><highlight class="normal"><sp/><sp/>match<sp/>=<sp/>_RE_PATTERN_EXPLICIT_MAKEPAIR.search(line)</highlight></codeline>
<codeline lineno="3104"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>match:</highlight></codeline>
<codeline lineno="3105"><highlight class="normal"><sp/><sp/><sp/><sp/>error(filename,<sp/>linenum,<sp/></highlight><highlight class="stringliteral">&apos;build/explicit_make_pair&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>4,<sp/><sp/></highlight><highlight class="comment">#<sp/>4<sp/>=<sp/>high<sp/>confidence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;Omit<sp/>template<sp/>arguments<sp/>from<sp/>make_pair<sp/>OR<sp/>use<sp/>pair<sp/>directly<sp/>OR&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;<sp/>if<sp/>appropriate,<sp/>construct<sp/>a<sp/>pair<sp/>directly&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="3109"><highlight class="normal"></highlight></codeline>
<codeline lineno="3110"><highlight class="normal"></highlight></codeline>
<codeline lineno="3111"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">ProcessLine(filename,<sp/>file_extension,</highlight></codeline>
<codeline lineno="3112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clean_lines,<sp/>line,<sp/>include_state,<sp/>function_state,</highlight></codeline>
<codeline lineno="3113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>class_state,<sp/>error,<sp/>extra_check_functions=[]):</highlight></codeline>
<codeline lineno="3114"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Processes<sp/>a<sp/>single<sp/>line<sp/>in<sp/>the<sp/>file.</highlight></codeline>
<codeline lineno="3115"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="3116"><highlight class="stringliteral"><sp/><sp/>Args:</highlight></codeline>
<codeline lineno="3117"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>filename:<sp/>Filename<sp/>of<sp/>the<sp/>file<sp/>that<sp/>is<sp/>being<sp/>processed.</highlight></codeline>
<codeline lineno="3118"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>file_extension:<sp/>The<sp/>extension<sp/>(dot<sp/>not<sp/>included)<sp/>of<sp/>the<sp/>file.</highlight></codeline>
<codeline lineno="3119"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>clean_lines:<sp/>An<sp/>array<sp/>of<sp/>strings,<sp/>each<sp/>representing<sp/>a<sp/>line<sp/>of<sp/>the<sp/>file,</highlight></codeline>
<codeline lineno="3120"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>with<sp/>comments<sp/>stripped.</highlight></codeline>
<codeline lineno="3121"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>line:<sp/>Number<sp/>of<sp/>line<sp/>being<sp/>processed.</highlight></codeline>
<codeline lineno="3122"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>include_state:<sp/>An<sp/>_IncludeState<sp/>instance<sp/>in<sp/>which<sp/>the<sp/>headers<sp/>are<sp/>inserted.</highlight></codeline>
<codeline lineno="3123"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>function_state:<sp/>A<sp/>_FunctionState<sp/>instance<sp/>which<sp/>counts<sp/>function<sp/>lines,<sp/>etc.</highlight></codeline>
<codeline lineno="3124"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>class_state:<sp/>A<sp/>_ClassState<sp/>instance<sp/>which<sp/>maintains<sp/>information<sp/>about</highlight></codeline>
<codeline lineno="3125"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>current<sp/>stack<sp/>of<sp/>nested<sp/>class<sp/>declarations<sp/>being<sp/>parsed.</highlight></codeline>
<codeline lineno="3126"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>error:<sp/>A<sp/>callable<sp/>to<sp/>which<sp/>errors<sp/>are<sp/>reported,<sp/>which<sp/>takes<sp/>4<sp/>arguments:</highlight></codeline>
<codeline lineno="3127"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>filename,<sp/>line<sp/>number,<sp/>error<sp/>level,<sp/>and<sp/>message</highlight></codeline>
<codeline lineno="3128"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>extra_check_functions:<sp/>An<sp/>array<sp/>of<sp/>additional<sp/>check<sp/>functions<sp/>that<sp/>will<sp/>be</highlight></codeline>
<codeline lineno="3129"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>run<sp/>on<sp/>each<sp/>source<sp/>line.<sp/>Each<sp/>function<sp/>takes<sp/>4</highlight></codeline>
<codeline lineno="3130"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arguments:<sp/>filename,<sp/>clean_lines,<sp/>line,<sp/>error</highlight></codeline>
<codeline lineno="3131"><highlight class="stringliteral"><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3132"><highlight class="normal"><sp/><sp/>raw_lines<sp/>=<sp/>clean_lines.raw_lines</highlight></codeline>
<codeline lineno="3133"><highlight class="normal"><sp/><sp/>ParseNolintSuppressions(filename,<sp/>raw_lines[line],<sp/>line,<sp/>error)</highlight></codeline>
<codeline lineno="3134"><highlight class="normal"><sp/><sp/>CheckForFunctionLengths(filename,<sp/>clean_lines,<sp/>line,<sp/>function_state,<sp/>error)</highlight></codeline>
<codeline lineno="3135"><highlight class="normal"><sp/><sp/><ref refid="namespacecpplint_1ae319b3dce42ad005bcddfd3d4df9656d" kindref="member">CheckForMultilineCommentsAndStrings</ref>(filename,<sp/>clean_lines,<sp/>line,<sp/>error)</highlight></codeline>
<codeline lineno="3136"><highlight class="normal"><sp/><sp/>CheckStyle(filename,<sp/>clean_lines,<sp/>line,<sp/>file_extension,<sp/>class_state,<sp/>error)</highlight></codeline>
<codeline lineno="3137"><highlight class="normal"><sp/><sp/>CheckLanguage(filename,<sp/>clean_lines,<sp/>line,<sp/>file_extension,<sp/>include_state,</highlight></codeline>
<codeline lineno="3138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error)</highlight></codeline>
<codeline lineno="3139"><highlight class="normal"><sp/><sp/>CheckForNonStandardConstructs(filename,<sp/>clean_lines,<sp/>line,</highlight></codeline>
<codeline lineno="3140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>class_state,<sp/>error)</highlight></codeline>
<codeline lineno="3141"><highlight class="normal"><sp/><sp/>CheckPosixThreading(filename,<sp/>clean_lines,<sp/>line,<sp/>error)</highlight></codeline>
<codeline lineno="3142"><highlight class="normal"><sp/><sp/>CheckInvalidIncrement(filename,<sp/>clean_lines,<sp/>line,<sp/>error)</highlight></codeline>
<codeline lineno="3143"><highlight class="normal"><sp/><sp/>CheckMakePairUsesDeduction(filename,<sp/>clean_lines,<sp/>line,<sp/>error)</highlight></codeline>
<codeline lineno="3144"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>check_fn<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>extra_check_functions:</highlight></codeline>
<codeline lineno="3145"><highlight class="normal"><sp/><sp/><sp/><sp/>check_fn(filename,<sp/>clean_lines,<sp/>line,<sp/>error)</highlight></codeline>
<codeline lineno="3146"><highlight class="normal"></highlight></codeline>
<codeline lineno="3147"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">ProcessFileData(filename,<sp/>file_extension,<sp/>lines,<sp/>error,</highlight></codeline>
<codeline lineno="3148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>extra_check_functions=[]):</highlight></codeline>
<codeline lineno="3149"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Performs<sp/>lint<sp/>checks<sp/>and<sp/>reports<sp/>any<sp/>errors<sp/>to<sp/>the<sp/>given<sp/>error<sp/>function.</highlight></codeline>
<codeline lineno="3150"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="3151"><highlight class="stringliteral"><sp/><sp/>Args:</highlight></codeline>
<codeline lineno="3152"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>filename:<sp/>Filename<sp/>of<sp/>the<sp/>file<sp/>that<sp/>is<sp/>being<sp/>processed.</highlight></codeline>
<codeline lineno="3153"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>file_extension:<sp/>The<sp/>extension<sp/>(dot<sp/>not<sp/>included)<sp/>of<sp/>the<sp/>file.</highlight></codeline>
<codeline lineno="3154"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>lines:<sp/>An<sp/>array<sp/>of<sp/>strings,<sp/>each<sp/>representing<sp/>a<sp/>line<sp/>of<sp/>the<sp/>file,<sp/>with<sp/>the</highlight></codeline>
<codeline lineno="3155"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>last<sp/>element<sp/>being<sp/>empty<sp/>if<sp/>the<sp/>file<sp/>is<sp/>terminated<sp/>with<sp/>a<sp/>newline.</highlight></codeline>
<codeline lineno="3156"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>error:<sp/>A<sp/>callable<sp/>to<sp/>which<sp/>errors<sp/>are<sp/>reported,<sp/>which<sp/>takes<sp/>4<sp/>arguments:</highlight></codeline>
<codeline lineno="3157"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>filename,<sp/>line<sp/>number,<sp/>error<sp/>level,<sp/>and<sp/>message</highlight></codeline>
<codeline lineno="3158"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>extra_check_functions:<sp/>An<sp/>array<sp/>of<sp/>additional<sp/>check<sp/>functions<sp/>that<sp/>will<sp/>be</highlight></codeline>
<codeline lineno="3159"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>run<sp/>on<sp/>each<sp/>source<sp/>line.<sp/>Each<sp/>function<sp/>takes<sp/>4</highlight></codeline>
<codeline lineno="3160"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arguments:<sp/>filename,<sp/>clean_lines,<sp/>line,<sp/>error</highlight></codeline>
<codeline lineno="3161"><highlight class="stringliteral"><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3162"><highlight class="normal"><sp/><sp/>lines<sp/>=<sp/>([</highlight><highlight class="stringliteral">&apos;//<sp/>marker<sp/>so<sp/>line<sp/>numbers<sp/>and<sp/>indices<sp/>both<sp/>start<sp/>at<sp/>1&apos;</highlight><highlight class="normal">]<sp/>+<sp/>lines<sp/>+</highlight></codeline>
<codeline lineno="3163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[</highlight><highlight class="stringliteral">&apos;//<sp/>marker<sp/>so<sp/>line<sp/>numbers<sp/>end<sp/>in<sp/>a<sp/>known<sp/>way&apos;</highlight><highlight class="normal">])</highlight></codeline>
<codeline lineno="3164"><highlight class="normal"></highlight></codeline>
<codeline lineno="3165"><highlight class="normal"><sp/><sp/>include_state<sp/>=<sp/>_IncludeState()</highlight></codeline>
<codeline lineno="3166"><highlight class="normal"><sp/><sp/>function_state<sp/>=<sp/>_FunctionState()</highlight></codeline>
<codeline lineno="3167"><highlight class="normal"><sp/><sp/>class_state<sp/>=<sp/>_ClassState()</highlight></codeline>
<codeline lineno="3168"><highlight class="normal"></highlight></codeline>
<codeline lineno="3169"><highlight class="normal"><sp/><sp/>ResetNolintSuppressions()</highlight></codeline>
<codeline lineno="3170"><highlight class="normal"></highlight></codeline>
<codeline lineno="3171"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#CheckForCopyright(filename,<sp/>lines,<sp/>error)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3172"><highlight class="normal"></highlight></codeline>
<codeline lineno="3173"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>file_extension<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;h&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3174"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacecpplint_1a6ecd551d11dde0a916ef4a6317b70585" kindref="member">CheckForHeaderGuard</ref>(filename,<sp/>lines,<sp/>error)</highlight></codeline>
<codeline lineno="3175"><highlight class="normal"></highlight></codeline>
<codeline lineno="3176"><highlight class="normal"><sp/><sp/>RemoveMultiLineComments(filename,<sp/>lines,<sp/>error)</highlight></codeline>
<codeline lineno="3177"><highlight class="normal"><sp/><sp/>clean_lines<sp/>=<sp/>CleansedLines(lines)</highlight></codeline>
<codeline lineno="3178"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>line<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>xrange(clean_lines.NumLines()):</highlight></codeline>
<codeline lineno="3179"><highlight class="normal"><sp/><sp/><sp/><sp/>ProcessLine(filename,<sp/>file_extension,<sp/>clean_lines,<sp/>line,</highlight></codeline>
<codeline lineno="3180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>include_state,<sp/>function_state,<sp/>class_state,<sp/>error,</highlight></codeline>
<codeline lineno="3181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>extra_check_functions)</highlight></codeline>
<codeline lineno="3182"><highlight class="normal"><sp/><sp/>class_state.CheckFinished(filename,<sp/>error)</highlight></codeline>
<codeline lineno="3183"><highlight class="normal"></highlight></codeline>
<codeline lineno="3184"><highlight class="normal"><sp/><sp/>CheckForIncludeWhatYouUse(filename,<sp/>clean_lines,<sp/>include_state,<sp/>error)</highlight></codeline>
<codeline lineno="3185"><highlight class="normal"></highlight></codeline>
<codeline lineno="3186"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>We<sp/>check<sp/>here<sp/>rather<sp/>than<sp/>inside<sp/>ProcessLine<sp/>so<sp/>that<sp/>we<sp/>see<sp/>raw</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3187"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>lines<sp/>rather<sp/>than<sp/>&quot;cleaned&quot;<sp/>lines.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3188"><highlight class="normal"><sp/><sp/><ref refid="namespacecpplint_1a04dd8f7483533a2ec7df687c180e9d22" kindref="member">CheckForUnicodeReplacementCharacters</ref>(filename,<sp/>lines,<sp/>error)</highlight></codeline>
<codeline lineno="3189"><highlight class="normal"></highlight></codeline>
<codeline lineno="3190"><highlight class="normal"><sp/><sp/><ref refid="namespacecpplint_1a84408591ac7ff7e427560a252360070b" kindref="member">CheckForNewlineAtEOF</ref>(filename,<sp/>lines,<sp/>error)</highlight></codeline>
<codeline lineno="3191"><highlight class="normal"></highlight></codeline>
<codeline lineno="3192"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">ProcessFile(filename,<sp/>vlevel,<sp/>extra_check_functions=[]):</highlight></codeline>
<codeline lineno="3193"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Does<sp/>google-lint<sp/>on<sp/>a<sp/>single<sp/>file.</highlight></codeline>
<codeline lineno="3194"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="3195"><highlight class="stringliteral"><sp/><sp/>Args:</highlight></codeline>
<codeline lineno="3196"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>filename:<sp/>The<sp/>name<sp/>of<sp/>the<sp/>file<sp/>to<sp/>parse.</highlight></codeline>
<codeline lineno="3197"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="3198"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>vlevel:<sp/>The<sp/>level<sp/>of<sp/>errors<sp/>to<sp/>report.<sp/><sp/>Every<sp/>error<sp/>of<sp/>confidence</highlight></codeline>
<codeline lineno="3199"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&gt;=<sp/>verbose_level<sp/>will<sp/>be<sp/>reported.<sp/><sp/>0<sp/>is<sp/>a<sp/>good<sp/>default.</highlight></codeline>
<codeline lineno="3200"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="3201"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>extra_check_functions:<sp/>An<sp/>array<sp/>of<sp/>additional<sp/>check<sp/>functions<sp/>that<sp/>will<sp/>be</highlight></codeline>
<codeline lineno="3202"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>run<sp/>on<sp/>each<sp/>source<sp/>line.<sp/>Each<sp/>function<sp/>takes<sp/>4</highlight></codeline>
<codeline lineno="3203"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arguments:<sp/>filename,<sp/>clean_lines,<sp/>line,<sp/>error</highlight></codeline>
<codeline lineno="3204"><highlight class="stringliteral"><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3205"><highlight class="normal"></highlight></codeline>
<codeline lineno="3206"><highlight class="normal"><sp/><sp/>_SetVerboseLevel(vlevel)</highlight></codeline>
<codeline lineno="3207"><highlight class="normal"></highlight></codeline>
<codeline lineno="3208"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Support<sp/>the<sp/>UNIX<sp/>convention<sp/>of<sp/>using<sp/>&quot;-&quot;<sp/>for<sp/>stdin.<sp/><sp/>Note<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>we<sp/>are<sp/>not<sp/>opening<sp/>the<sp/>file<sp/>with<sp/>universal<sp/>newline<sp/>support</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>(which<sp/>codecs<sp/>doesn&apos;t<sp/>support<sp/>anyway),<sp/>so<sp/>the<sp/>resulting<sp/>lines<sp/>do</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>contain<sp/>trailing<sp/>&apos;\r&apos;<sp/>characters<sp/>if<sp/>we<sp/>are<sp/>reading<sp/>a<sp/>file<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>has<sp/>CRLF<sp/>endings.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>If<sp/>after<sp/>the<sp/>split<sp/>a<sp/>trailing<sp/>&apos;\r&apos;<sp/>is<sp/>present,<sp/>it<sp/>is<sp/>removed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>below.<sp/>If<sp/>it<sp/>is<sp/>not<sp/>expected<sp/>to<sp/>be<sp/>present<sp/>(i.e.<sp/>os.linesep<sp/>!=</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>&apos;\r\n&apos;<sp/>as<sp/>in<sp/>Windows),<sp/>a<sp/>warning<sp/>is<sp/>issued<sp/>below<sp/>if<sp/>this<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>is<sp/>processed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3218"><highlight class="normal"></highlight></codeline>
<codeline lineno="3219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>filename<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;-&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lines<sp/>=<sp/>codecs.StreamReaderWriter(sys.stdin,</highlight></codeline>
<codeline lineno="3221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>codecs.getreader(</highlight><highlight class="stringliteral">&apos;utf8&apos;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="3222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>codecs.getwriter(</highlight><highlight class="stringliteral">&apos;utf8&apos;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="3223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;replace&apos;</highlight><highlight class="normal">).read().split(</highlight><highlight class="stringliteral">&apos;\n&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="3224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lines<sp/>=<sp/>codecs.open(filename,<sp/></highlight><highlight class="stringliteral">&apos;</highlight><highlight class="stringliteral">r&apos;,<sp/>&apos;</highlight><highlight class="normal">utf8&apos;,<sp/>&apos;replace&apos;).read().split(&apos;\n&apos;)</highlight></codeline>
<codeline lineno="3226"><highlight class="normal"></highlight></codeline>
<codeline lineno="3227"><highlight class="normal"><sp/><sp/><sp/><sp/>carriage_return_found<sp/>=<sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Remove<sp/>trailing<sp/>&apos;\r&apos;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>linenum<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(len(lines)):</highlight></codeline>
<codeline lineno="3230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>lines[linenum].endswith(</highlight><highlight class="stringliteral">&apos;\r&apos;</highlight><highlight class="normal">):</highlight></codeline>
<codeline lineno="3231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lines[linenum]<sp/>=<sp/>lines[linenum].rstrip(</highlight><highlight class="stringliteral">&apos;\r&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="3232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>carriage_return_found<sp/>=<sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3233"><highlight class="normal"></highlight></codeline>
<codeline lineno="3234"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">except</highlight><highlight class="normal"><sp/>IOError:</highlight></codeline>
<codeline lineno="3235"><highlight class="normal"><sp/><sp/><sp/><sp/>sys.stderr.write(</highlight></codeline>
<codeline lineno="3236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Skipping<sp/>input<sp/>&apos;%s&apos;:<sp/>Can&apos;t<sp/>open<sp/>for<sp/>reading\n&quot;</highlight><highlight class="normal"><sp/>%<sp/>filename)</highlight></codeline>
<codeline lineno="3237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3238"><highlight class="normal"></highlight></codeline>
<codeline lineno="3239"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>Note,<sp/>if<sp/>no<sp/>dot<sp/>is<sp/>found,<sp/>this<sp/>will<sp/>give<sp/>the<sp/>entire<sp/>filename<sp/>as<sp/>the<sp/>ext.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3240"><highlight class="normal"><sp/><sp/>file_extension<sp/>=<sp/>filename[filename.rfind(</highlight><highlight class="stringliteral">&apos;.&apos;</highlight><highlight class="normal">)<sp/>+<sp/>1:]</highlight></codeline>
<codeline lineno="3241"><highlight class="normal"></highlight></codeline>
<codeline lineno="3242"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>When<sp/>reading<sp/>from<sp/>stdin,<sp/>the<sp/>extension<sp/>is<sp/>unknown,<sp/>so<sp/>no<sp/>cpplint<sp/>tests</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3243"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>should<sp/>rely<sp/>on<sp/>the<sp/>extension.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3244"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(filename<sp/>!=<sp/></highlight><highlight class="stringliteral">&apos;-&apos;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>file_extension<sp/>!=<sp/></highlight><highlight class="stringliteral">&apos;cc&apos;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>file_extension<sp/>!=<sp/></highlight><highlight class="stringliteral">&apos;h&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>file_extension<sp/>!=<sp/></highlight><highlight class="stringliteral">&apos;cpp&apos;</highlight><highlight class="normal">):</highlight></codeline>
<codeline lineno="3246"><highlight class="normal"><sp/><sp/><sp/><sp/>sys.stderr.write(</highlight><highlight class="stringliteral">&apos;Ignoring<sp/>%s;<sp/>not<sp/>a<sp/>.cc<sp/>or<sp/>.h<sp/>file\n&apos;</highlight><highlight class="normal"><sp/>%<sp/>filename)</highlight></codeline>
<codeline lineno="3247"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3248"><highlight class="normal"><sp/><sp/><sp/><sp/>ProcessFileData(filename,<sp/>file_extension,<sp/>lines,<sp/>Error,</highlight></codeline>
<codeline lineno="3249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>extra_check_functions)</highlight></codeline>
<codeline lineno="3250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>carriage_return_found<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>os.linesep<sp/>!=<sp/></highlight><highlight class="stringliteral">&apos;\r\n&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Use<sp/>0<sp/>for<sp/>linenum<sp/>since<sp/>outputting<sp/>only<sp/>one<sp/>error<sp/>for<sp/>potentially</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>several<sp/>lines.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Error(filename,<sp/>0,<sp/></highlight><highlight class="stringliteral">&apos;whitespace/newline&apos;</highlight><highlight class="normal">,<sp/>1,</highlight></codeline>
<codeline lineno="3254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;One<sp/>or<sp/>more<sp/>unexpected<sp/>\\r<sp/>(^M)<sp/>found;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;better<sp/>to<sp/>use<sp/>only<sp/>a<sp/>\\n&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="3256"><highlight class="normal"></highlight></codeline>
<codeline lineno="3257"><highlight class="normal"><sp/><sp/>sys.stderr.write(</highlight><highlight class="stringliteral">&apos;Done<sp/>processing<sp/>%s\n&apos;</highlight><highlight class="normal"><sp/>%<sp/>filename)</highlight></codeline>
<codeline lineno="3258"><highlight class="normal"></highlight></codeline>
<codeline lineno="3259"><highlight class="normal"></highlight></codeline>
<codeline lineno="3260"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">PrintUsage(message):</highlight></codeline>
<codeline lineno="3261"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Prints<sp/>a<sp/>brief<sp/>usage<sp/>string<sp/>and<sp/>exits,<sp/>optionally<sp/>with<sp/>an<sp/>error<sp/>message.</highlight></codeline>
<codeline lineno="3262"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="3263"><highlight class="stringliteral"><sp/><sp/>Args:</highlight></codeline>
<codeline lineno="3264"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>message:<sp/>The<sp/>optional<sp/>error<sp/>message.</highlight></codeline>
<codeline lineno="3265"><highlight class="stringliteral"><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3266"><highlight class="normal"><sp/><sp/>sys.stderr.write(_USAGE)</highlight></codeline>
<codeline lineno="3267"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>message:</highlight></codeline>
<codeline lineno="3268"><highlight class="normal"><sp/><sp/><sp/><sp/>sys.exit(</highlight><highlight class="stringliteral">&apos;\nFATAL<sp/>ERROR:<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>message)</highlight></codeline>
<codeline lineno="3269"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3270"><highlight class="normal"><sp/><sp/><sp/><sp/>sys.exit(1)</highlight></codeline>
<codeline lineno="3271"><highlight class="normal"></highlight></codeline>
<codeline lineno="3272"><highlight class="normal"></highlight></codeline>
<codeline lineno="3273"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">PrintCategories():</highlight></codeline>
<codeline lineno="3274"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Prints<sp/>a<sp/>list<sp/>of<sp/>all<sp/>the<sp/>error-categories<sp/>used<sp/>by<sp/>error<sp/>messages.</highlight></codeline>
<codeline lineno="3275"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="3276"><highlight class="stringliteral"><sp/><sp/>These<sp/>are<sp/>the<sp/>categories<sp/>used<sp/>to<sp/>filter<sp/>messages<sp/>via<sp/>--filter.</highlight></codeline>
<codeline lineno="3277"><highlight class="stringliteral"><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3278"><highlight class="normal"><sp/><sp/>sys.stderr.write(</highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal">.join(</highlight><highlight class="stringliteral">&apos;<sp/><sp/>%s\n&apos;</highlight><highlight class="normal"><sp/>%<sp/>cat<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>cat<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>_ERROR_CATEGORIES))</highlight></codeline>
<codeline lineno="3279"><highlight class="normal"><sp/><sp/>sys.exit(0)</highlight></codeline>
<codeline lineno="3280"><highlight class="normal"></highlight></codeline>
<codeline lineno="3281"><highlight class="normal"></highlight></codeline>
<codeline lineno="3282"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">ParseArguments(args):</highlight></codeline>
<codeline lineno="3283"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Parses<sp/>the<sp/>command<sp/>line<sp/>arguments.</highlight></codeline>
<codeline lineno="3284"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="3285"><highlight class="stringliteral"><sp/><sp/>This<sp/>may<sp/>set<sp/>the<sp/>output<sp/>format<sp/>and<sp/>verbosity<sp/>level<sp/>as<sp/>side-effects.</highlight></codeline>
<codeline lineno="3286"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="3287"><highlight class="stringliteral"><sp/><sp/>Args:</highlight></codeline>
<codeline lineno="3288"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>args:<sp/>The<sp/>command<sp/>line<sp/>arguments:</highlight></codeline>
<codeline lineno="3289"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="3290"><highlight class="stringliteral"><sp/><sp/>Returns:</highlight></codeline>
<codeline lineno="3291"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>The<sp/>list<sp/>of<sp/>filenames<sp/>to<sp/>lint.</highlight></codeline>
<codeline lineno="3292"><highlight class="stringliteral"><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3293"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3294"><highlight class="normal"><sp/><sp/><sp/><sp/>(opts,<sp/>filenames)<sp/>=<sp/>getopt.getopt(args,<sp/></highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal">,<sp/>[</highlight><highlight class="stringliteral">&apos;help&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;output=&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;verbose=&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;counting=&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;filter=&apos;</highlight><highlight class="normal">])</highlight></codeline>
<codeline lineno="3297"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">except</highlight><highlight class="normal"><sp/>getopt.GetoptError:</highlight></codeline>
<codeline lineno="3298"><highlight class="normal"><sp/><sp/><sp/><sp/>PrintUsage(</highlight><highlight class="stringliteral">&apos;Invalid<sp/>arguments.&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="3299"><highlight class="normal"></highlight></codeline>
<codeline lineno="3300"><highlight class="normal"><sp/><sp/>verbosity<sp/>=<sp/>_VerboseLevel()</highlight></codeline>
<codeline lineno="3301"><highlight class="normal"><sp/><sp/>output_format<sp/>=<sp/>_OutputFormat()</highlight></codeline>
<codeline lineno="3302"><highlight class="normal"><sp/><sp/>filters<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3303"><highlight class="normal"><sp/><sp/>counting_style<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3304"><highlight class="normal"></highlight></codeline>
<codeline lineno="3305"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(opt,<sp/>val)<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>opts:</highlight></codeline>
<codeline lineno="3306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>opt<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;--help&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>PrintUsage(</highlight><highlight class="keywordtype">None</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="3308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>opt<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;--output&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>val<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&apos;emacs&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;vs7&apos;</highlight><highlight class="normal">):</highlight></codeline>
<codeline lineno="3310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PrintUsage(</highlight><highlight class="stringliteral">&apos;The<sp/>only<sp/>allowed<sp/>output<sp/>formats<sp/>are<sp/>emacs<sp/>and<sp/>vs7.&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="3311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>output_format<sp/>=<sp/>val</highlight></codeline>
<codeline lineno="3312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>opt<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;--verbose&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>verbosity<sp/>=<sp/>int(val)</highlight></codeline>
<codeline lineno="3314"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>opt<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;--filter&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>filters<sp/>=<sp/>val</highlight></codeline>
<codeline lineno="3316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>filters:</highlight></codeline>
<codeline lineno="3317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PrintCategories()</highlight></codeline>
<codeline lineno="3318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>opt<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;--counting&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>val<sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&apos;total&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;toplevel&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;detailed&apos;</highlight><highlight class="normal">):</highlight></codeline>
<codeline lineno="3320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PrintUsage(</highlight><highlight class="stringliteral">&apos;Valid<sp/>counting<sp/>options<sp/>are<sp/>total,<sp/>toplevel,<sp/>and<sp/>detailed&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="3321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>counting_style<sp/>=<sp/>val</highlight></codeline>
<codeline lineno="3322"><highlight class="normal"></highlight></codeline>
<codeline lineno="3323"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>filenames:</highlight></codeline>
<codeline lineno="3324"><highlight class="normal"><sp/><sp/><sp/><sp/>PrintUsage(</highlight><highlight class="stringliteral">&apos;No<sp/>files<sp/>were<sp/>specified.&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="3325"><highlight class="normal"></highlight></codeline>
<codeline lineno="3326"><highlight class="normal"><sp/><sp/>_SetOutputFormat(output_format)</highlight></codeline>
<codeline lineno="3327"><highlight class="normal"><sp/><sp/>_SetVerboseLevel(verbosity)</highlight></codeline>
<codeline lineno="3328"><highlight class="normal"><sp/><sp/>_SetFilters(filters)</highlight></codeline>
<codeline lineno="3329"><highlight class="normal"><sp/><sp/>_SetCountingStyle(counting_style)</highlight></codeline>
<codeline lineno="3330"><highlight class="normal"></highlight></codeline>
<codeline lineno="3331"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>filenames</highlight></codeline>
<codeline lineno="3332"><highlight class="normal"></highlight></codeline>
<codeline lineno="3333"><highlight class="normal"></highlight></codeline>
<codeline lineno="3334"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="main_8cpp_1a0ddf1224851353fc92bfbff6f499fa97" kindref="member">main</ref>():</highlight></codeline>
<codeline lineno="3335"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">print</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;\033[1;35mChecking<sp/>all<sp/>source<sp/>and<sp/>header<sp/>files<sp/>for<sp/>style<sp/>compliance...\033[1;m&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="3336"><highlight class="normal"></highlight></codeline>
<codeline lineno="3337"><highlight class="normal"><sp/><sp/>filenames<sp/>=<sp/>ParseArguments(sys.argv[1:])</highlight></codeline>
<codeline lineno="3338"><highlight class="normal"></highlight></codeline>
<codeline lineno="3339"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>Change<sp/>stderr<sp/>to<sp/>write<sp/>with<sp/>replacement<sp/>characters<sp/>so<sp/>we<sp/>don&apos;t<sp/>die</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3340"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>if<sp/>we<sp/>try<sp/>to<sp/>print<sp/>something<sp/>containing<sp/>non-ASCII<sp/>characters.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3341"><highlight class="normal"><sp/><sp/>sys.stderr<sp/>=<sp/>codecs.StreamReaderWriter(sys.stderr,</highlight></codeline>
<codeline lineno="3342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>codecs.getreader(</highlight><highlight class="stringliteral">&apos;utf8&apos;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="3343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>codecs.getwriter(</highlight><highlight class="stringliteral">&apos;utf8&apos;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="3344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;replace&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="3345"><highlight class="normal"></highlight></codeline>
<codeline lineno="3346"><highlight class="normal"><sp/><sp/>_cpplint_state.ResetErrorCounts()</highlight></codeline>
<codeline lineno="3347"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>filename<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>filenames:</highlight></codeline>
<codeline lineno="3348"><highlight class="normal"><sp/><sp/><sp/><sp/>ProcessFile(filename,<sp/>_cpplint_state.verbose_level)</highlight></codeline>
<codeline lineno="3349"><highlight class="normal"><sp/><sp/>_cpplint_state.PrintErrorCounts()</highlight></codeline>
<codeline lineno="3350"><highlight class="normal"></highlight></codeline>
<codeline lineno="3351"><highlight class="normal"><sp/><sp/>sys.exit(_cpplint_state.error_count<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="3352"><highlight class="normal"></highlight></codeline>
<codeline lineno="3353"><highlight class="normal"></highlight></codeline>
<codeline lineno="3354"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>__name__<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;__main__&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3355"><highlight class="normal"><sp/><sp/><ref refid="main_8cpp_1a0ddf1224851353fc92bfbff6f499fa97" kindref="member">main</ref>()</highlight></codeline>
    </programlisting>
    <location file="C:/Users/Alik/updraft/Updraft/scripts/cpplint.py"/>
  </compounddef>
</doxygen>
