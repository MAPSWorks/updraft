<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.6">
  <compounddef id="namespacecpplint" kind="namespace">
    <compoundname>cpplint</compoundname>
      <sectiondef kind="var">
      <memberdef kind="variable" id="namespacecpplint_1afefe1ab8eeab7350e1a7d96d41c86fb8" prot="public" static="no" mutable="no">
        <type>string</type>
        <definition>string cpplint::_USAGE</definition>
        <argsstring></argsstring>
        <name>_USAGE</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Alik/updraft/Updraft/scripts/cpplint.py" line="93" bodyfile="C:/Users/Alik/updraft/Updraft/scripts/cpplint.py" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecpplint_1a7a498bc09903cee9029cccc023641ede" prot="public" static="no" mutable="no">
        <type>list</type>
        <definition>list cpplint::_ERROR_CATEGORIES</definition>
        <argsstring></argsstring>
        <name>_ERROR_CATEGORIES</name>
        <initializer>[
  &apos;build/class&apos;,
  &apos;build/deprecated&apos;,
  &apos;build/endif_comment&apos;,
  &apos;build/explicit_make_pair&apos;,
  &apos;build/forward_decl&apos;,
  &apos;build/header_guard&apos;,
  &apos;build/include&apos;,
  &apos;build/include_alpha&apos;,
  &apos;build/include_order&apos;,
  &apos;build/include_what_you_use&apos;,
  &apos;build/namespaces&apos;,
  &apos;build/printf_format&apos;,
  &apos;build/storage_class&apos;,
  &apos;legal/copyright&apos;,
  &apos;readability/braces&apos;,
  &apos;readability/casting&apos;,
  &apos;readability/check&apos;,
  &apos;readability/constructors&apos;,
  &apos;readability/fn_size&apos;,
  &apos;readability/function&apos;,
  &apos;readability/multiline_comment&apos;,
  &apos;readability/multiline_string&apos;,
  &apos;readability/nolint&apos;,
  &apos;readability/streams&apos;,
  &apos;readability/todo&apos;,
  &apos;readability/utf8&apos;,
  &apos;runtime/arrays&apos;,
  &apos;runtime/casting&apos;,
  &apos;runtime/explicit&apos;,
  &apos;runtime/int&apos;,
  &apos;runtime/init&apos;,
  &apos;runtime/invalid_increment&apos;,
  &apos;runtime/member_string_references&apos;,
  &apos;runtime/memset&apos;,
  &apos;runtime/operator&apos;,
  &apos;runtime/printf&apos;,
  &apos;runtime/printf_format&apos;,
  &apos;runtime/references&apos;,
  &apos;runtime/rtti&apos;,
  &apos;runtime/sizeof&apos;,
  &apos;runtime/string&apos;,
  &apos;runtime/threadsafe_fn&apos;,
  &apos;runtime/virtual&apos;,
  &apos;whitespace/blank_line&apos;,
  &apos;whitespace/braces&apos;,
  &apos;whitespace/comma&apos;,
  &apos;whitespace/comments&apos;,
  &apos;whitespace/end_of_line&apos;,
  &apos;whitespace/ending_newline&apos;,
  &apos;whitespace/indent&apos;,
  &apos;whitespace/labels&apos;,
  &apos;whitespace/line_length&apos;,
  &apos;whitespace/newline&apos;,
  &apos;whitespace/operators&apos;,
  &apos;whitespace/parens&apos;,
  &apos;whitespace/semicolon&apos;,
  &apos;whitespace/tab&apos;,
  &apos;whitespace/todo&apos;
  ]</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Alik/updraft/Updraft/scripts/cpplint.py" line="149" bodyfile="C:/Users/Alik/updraft/Updraft/scripts/cpplint.py" bodystart="149" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecpplint_1a40307223380a2e065996f7113e2f8f4c" prot="public" static="no" mutable="no">
        <type>list</type>
        <definition>list cpplint::_DEFAULT_FILTERS</definition>
        <argsstring></argsstring>
        <name>_DEFAULT_FILTERS</name>
        <initializer>[&apos;-build/include_alpha&apos;]</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Alik/updraft/Updraft/scripts/cpplint.py" line="214" bodyfile="C:/Users/Alik/updraft/Updraft/scripts/cpplint.py" bodystart="214" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecpplint_1a76f8ec9e9e1ea46197f611bd5a995962" prot="public" static="no" mutable="no">
        <type>tuple</type>
        <definition>tuple cpplint::_STL_HEADERS</definition>
        <argsstring></argsstring>
        <name>_STL_HEADERS</name>
        <initializer>frozenset([
    &apos;algobase.h&apos;, &apos;algorithm&apos;, &apos;alloc.h&apos;, &apos;bitset&apos;, &apos;deque&apos;, &apos;exception&apos;,
    &apos;function.h&apos;, &apos;functional&apos;, &apos;hash_map&apos;, &apos;hash_map.h&apos;, &apos;hash_set&apos;,
    &apos;hash_set.h&apos;, &apos;iterator&apos;, &apos;list&apos;, &apos;list.h&apos;, &apos;map&apos;, &apos;memory&apos;, &apos;new&apos;,
    &apos;pair.h&apos;, &apos;pthread_alloc&apos;, &apos;queue&apos;, &apos;set&apos;, &apos;set.h&apos;, &apos;sstream&apos;, &apos;stack&apos;,
    &apos;stl_alloc.h&apos;, &apos;stl_relops.h&apos;, &apos;type_traits.h&apos;,
    &apos;utility&apos;, &apos;vector&apos;, &apos;vector.h&apos;,
    ])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Alik/updraft/Updraft/scripts/cpplint.py" line="221" bodyfile="C:/Users/Alik/updraft/Updraft/scripts/cpplint.py" bodystart="221" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecpplint_1a8b16f3827d7722217dd3a2f50f24087d" prot="public" static="no" mutable="no">
        <type>tuple</type>
        <definition>tuple cpplint::_CPP_HEADERS</definition>
        <argsstring></argsstring>
        <name>_CPP_HEADERS</name>
        <initializer>frozenset([
    &apos;algo.h&apos;, &apos;builtinbuf.h&apos;, &apos;bvector.h&apos;, &apos;cassert&apos;, &apos;cctype&apos;,
    &apos;cerrno&apos;, &apos;cfloat&apos;, &apos;ciso646&apos;, &apos;climits&apos;, &apos;clocale&apos;, &apos;cmath&apos;,
    &apos;complex&apos;, &apos;complex.h&apos;, &apos;csetjmp&apos;, &apos;csignal&apos;, &apos;cstdarg&apos;, &apos;cstddef&apos;,
    &apos;cstdio&apos;, &apos;cstdlib&apos;, &apos;cstring&apos;, &apos;ctime&apos;, &apos;cwchar&apos;, &apos;cwctype&apos;,
    &apos;defalloc.h&apos;, &apos;deque.h&apos;, &apos;editbuf.h&apos;, &apos;exception&apos;, &apos;fstream&apos;,
    &apos;fstream.h&apos;, &apos;hashtable.h&apos;, &apos;heap.h&apos;, &apos;indstream.h&apos;, &apos;iomanip&apos;,
    &apos;iomanip.h&apos;, &apos;ios&apos;, &apos;iosfwd&apos;, &apos;iostream&apos;, &apos;iostream.h&apos;, &apos;istream&apos;,
    &apos;istream.h&apos;, &apos;iterator.h&apos;, &apos;limits&apos;, &apos;map.h&apos;, &apos;multimap.h&apos;, &apos;multiset.h&apos;,
    &apos;numeric&apos;, &apos;ostream&apos;, &apos;ostream.h&apos;, &apos;parsestream.h&apos;, &apos;pfstream.h&apos;,
    &apos;PlotFile.h&apos;, &apos;procbuf.h&apos;, &apos;pthread_alloc.h&apos;, &apos;rope&apos;, &apos;rope.h&apos;,
    &apos;ropeimpl.h&apos;, &apos;SFile.h&apos;, &apos;slist&apos;, &apos;slist.h&apos;, &apos;stack.h&apos;, &apos;stdexcept&apos;,
    &apos;stdiostream.h&apos;, &apos;streambuf.h&apos;, &apos;stream.h&apos;, &apos;strfile.h&apos;, &apos;string&apos;,
    &apos;strstream&apos;, &apos;strstream.h&apos;, &apos;tempbuf.h&apos;, &apos;tree.h&apos;, &apos;typeinfo&apos;, &apos;valarray&apos;,
    ])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Alik/updraft/Updraft/scripts/cpplint.py" line="232" bodyfile="C:/Users/Alik/updraft/Updraft/scripts/cpplint.py" bodystart="232" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecpplint_1aab5915e25e8ef5ed9d9c223a5183d6bc" prot="public" static="no" mutable="no">
        <type>list</type>
        <definition>list cpplint::_CHECK_MACROS</definition>
        <argsstring></argsstring>
        <name>_CHECK_MACROS</name>
        <initializer>[
    &apos;DCHECK&apos;, &apos;CHECK&apos;,
    &apos;EXPECT_TRUE_M&apos;, &apos;EXPECT_TRUE&apos;,
    &apos;ASSERT_TRUE_M&apos;, &apos;ASSERT_TRUE&apos;,
    &apos;EXPECT_FALSE_M&apos;, &apos;EXPECT_FALSE&apos;,
    &apos;ASSERT_FALSE_M&apos;, &apos;ASSERT_FALSE&apos;,
    ]</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Alik/updraft/Updraft/scripts/cpplint.py" line="252" bodyfile="C:/Users/Alik/updraft/Updraft/scripts/cpplint.py" bodystart="252" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecpplint_1ad966b15edc61d0e0fa98cf4ce1a0135a" prot="public" static="no" mutable="no">
        <type>tuple</type>
        <definition>tuple cpplint::_CHECK_REPLACEMENT</definition>
        <argsstring></argsstring>
        <name>_CHECK_REPLACEMENT</name>
        <initializer>dict([(m, {}) for m in <ref refid="namespacecpplint_1aab5915e25e8ef5ed9d9c223a5183d6bc" kindref="member">_CHECK_MACROS</ref>])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Alik/updraft/Updraft/scripts/cpplint.py" line="261" bodyfile="C:/Users/Alik/updraft/Updraft/scripts/cpplint.py" bodystart="261" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecpplint_1a6703b407df0f07ff6162c225070ddc9e" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int cpplint::_C_SYS_HEADER</definition>
        <argsstring></argsstring>
        <name>_C_SYS_HEADER</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Alik/updraft/Updraft/scripts/cpplint.py" line="284" bodyfile="C:/Users/Alik/updraft/Updraft/scripts/cpplint.py" bodystart="284" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecpplint_1a89c3b71932122fc90afd2f47c07574f4" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int cpplint::_CPP_SYS_HEADER</definition>
        <argsstring></argsstring>
        <name>_CPP_SYS_HEADER</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Alik/updraft/Updraft/scripts/cpplint.py" line="285" bodyfile="C:/Users/Alik/updraft/Updraft/scripts/cpplint.py" bodystart="285" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecpplint_1a5d6aba92ab2575ff645a1aacad5b5216" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int cpplint::_LIKELY_MY_HEADER</definition>
        <argsstring></argsstring>
        <name>_LIKELY_MY_HEADER</name>
        <initializer>3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Alik/updraft/Updraft/scripts/cpplint.py" line="286" bodyfile="C:/Users/Alik/updraft/Updraft/scripts/cpplint.py" bodystart="286" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecpplint_1a40cf12907322271bf94416a9fe602d96" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int cpplint::_POSSIBLE_MY_HEADER</definition>
        <argsstring></argsstring>
        <name>_POSSIBLE_MY_HEADER</name>
        <initializer>4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Alik/updraft/Updraft/scripts/cpplint.py" line="287" bodyfile="C:/Users/Alik/updraft/Updraft/scripts/cpplint.py" bodystart="287" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecpplint_1ace812856f1cd6c6b4375ab5c92294323" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int cpplint::_OTHER_HEADER</definition>
        <argsstring></argsstring>
        <name>_OTHER_HEADER</name>
        <initializer>5</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Alik/updraft/Updraft/scripts/cpplint.py" line="288" bodyfile="C:/Users/Alik/updraft/Updraft/scripts/cpplint.py" bodystart="288" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecpplint_1a3eea0656ee957fff7d4511579c92d250" prot="public" static="no" mutable="no">
        <type>dictionary</type>
        <definition>dictionary cpplint::_regexp_compile_cache</definition>
        <argsstring></argsstring>
        <name>_regexp_compile_cache</name>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Alik/updraft/Updraft/scripts/cpplint.py" line="291" bodyfile="C:/Users/Alik/updraft/Updraft/scripts/cpplint.py" bodystart="291" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecpplint_1af6a02614cf018ab890ede0b3a936ba6e" prot="public" static="no" mutable="no">
        <type>tuple</type>
        <definition>tuple cpplint::_RE_SUPPRESSION</definition>
        <argsstring></argsstring>
        <name>_RE_SUPPRESSION</name>
        <initializer>re.compile(r&apos;\bNOLINT\b(\([^)]*\))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Alik/updraft/Updraft/scripts/cpplint.py" line="294" bodyfile="C:/Users/Alik/updraft/Updraft/scripts/cpplint.py" bodystart="294" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecpplint_1a8559d5bdf881337b323a7253a71a5fed" prot="public" static="no" mutable="no">
        <type>tuple</type>
        <definition>tuple cpplint::elided</definition>
        <argsstring></argsstring>
        <name>elided</name>
        <initializer>_RE_PATTERN_CLEANSE_LINE_ESCAPES.sub(&apos;&apos;, <ref refid="namespacecpplint_1a8559d5bdf881337b323a7253a71a5fed" kindref="member">elided</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Alik/updraft/Updraft/scripts/cpplint.py" line="963" bodyfile="C:/Users/Alik/updraft/Updraft/scripts/cpplint.py" bodystart="963" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacecpplint_1a9713059a1f275ecb548f18733306791d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def cpplint::CloseExpression</definition>
        <argsstring></argsstring>
        <name>CloseExpression</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>If input points to ( or { or [, finds the position that closes it.

If lines[linenum][pos] points to a &apos;(&apos; or &apos;{&apos; or &apos;[&apos;, finds the
linenum/pos that correspond to the closing of the expression.

Args:
  clean_lines: A CleansedLines instance containing the file.
  linenum: The number of the line to check.
  pos: A position on the line.

Returns:
  A tuple (line, linenum, pos) pointer *past* the closing brace, or
  (line, len(lines), -1) if we never find a close.  Note we ignore
  strings and comments when matching; and the line we return is the
  &apos;cleansed&apos; line at linenum.
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Alik/updraft/Updraft/scripts/cpplint.py" line="969" bodyfile="C:/Users/Alik/updraft/Updraft/scripts/cpplint.py" bodystart="969" bodyend="1007"/>
      </memberdef>
      <memberdef kind="function" id="namespacecpplint_1ac9cdecc582bc833c2eb7ac6eed6d2624" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def cpplint::CheckForCopyright</definition>
        <argsstring></argsstring>
        <name>CheckForCopyright</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Logs an error if no Copyright message appears at the top of the file.</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Alik/updraft/Updraft/scripts/cpplint.py" line="1008" bodyfile="C:/Users/Alik/updraft/Updraft/scripts/cpplint.py" bodystart="1008" bodyend="1020"/>
      </memberdef>
      <memberdef kind="function" id="namespacecpplint_1a8eedb7313093d59b41bd7c5b19c2ddaf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def cpplint::GetHeaderGuardCPPVariable</definition>
        <argsstring></argsstring>
        <name>GetHeaderGuardCPPVariable</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Returns the CPP variable that should be used as a header guard.

Args:
  filename: The name of a C++ header file.

Returns:
  The CPP variable that should be used as a header guard in the
  named file.

</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Alik/updraft/Updraft/scripts/cpplint.py" line="1021" bodyfile="C:/Users/Alik/updraft/Updraft/scripts/cpplint.py" bodystart="1021" bodyend="1040"/>
      </memberdef>
      <memberdef kind="function" id="namespacecpplint_1a6ecd551d11dde0a916ef4a6317b70585" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def cpplint::CheckForHeaderGuard</definition>
        <argsstring></argsstring>
        <name>CheckForHeaderGuard</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Checks that the file contains a header guard.

Logs an error if no #ifndef header guard is present.  For other
headers, checks that the full pathname is used.

Args:
  filename: The name of the C++ header file.
  lines: An array of strings, each representing a line of the file.
  error: The function to call with any errors found.
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Alik/updraft/Updraft/scripts/cpplint.py" line="1041" bodyfile="C:/Users/Alik/updraft/Updraft/scripts/cpplint.py" bodystart="1041" bodyend="1103"/>
      </memberdef>
      <memberdef kind="function" id="namespacecpplint_1a04dd8f7483533a2ec7df687c180e9d22" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def cpplint::CheckForUnicodeReplacementCharacters</definition>
        <argsstring></argsstring>
        <name>CheckForUnicodeReplacementCharacters</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Logs an error for each line containing Unicode replacement characters.

These indicate that either the file contained invalid UTF-8 (likely)
or Unicode replacement characters (which it shouldn&apos;t).  Note that
it&apos;s possible for this to throw off line numbering if the invalid
UTF-8 occurred adjacent to a newline.

Args:
  filename: The name of the current file.
  lines: An array of strings, each representing a line of the file.
  error: The function to call with any errors found.
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Alik/updraft/Updraft/scripts/cpplint.py" line="1104" bodyfile="C:/Users/Alik/updraft/Updraft/scripts/cpplint.py" bodystart="1104" bodyend="1122"/>
      </memberdef>
      <memberdef kind="function" id="namespacecpplint_1a84408591ac7ff7e427560a252360070b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def cpplint::CheckForNewlineAtEOF</definition>
        <argsstring></argsstring>
        <name>CheckForNewlineAtEOF</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Logs an error if there is no newline char at the end of the file.

Args:
  filename: The name of the current file.
  lines: An array of strings, each representing a line of the file.
  error: The function to call with any errors found.
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Alik/updraft/Updraft/scripts/cpplint.py" line="1123" bodyfile="C:/Users/Alik/updraft/Updraft/scripts/cpplint.py" bodystart="1123" bodyend="1140"/>
      </memberdef>
      <memberdef kind="function" id="namespacecpplint_1ae319b3dce42ad005bcddfd3d4df9656d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def cpplint::CheckForMultilineCommentsAndStrings</definition>
        <argsstring></argsstring>
        <name>CheckForMultilineCommentsAndStrings</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Logs an error if we see /* ... */ or &quot;...&quot; that extend past one line.

/* ... */ comments are legit inside macros, for one line.
Otherwise, we prefer // comments, so it&apos;s ok to warn about the
other.  Likewise, it&apos;s ok for strings to extend across multiple
lines, as long as a line continuation character (backslash)
terminates each line. Although not currently prohibited by the C++
style guide, it&apos;s ugly and unnecessary. We don&apos;t do well with either
in this lint program, so we warn about both.

Args:
  filename: The name of the current file.
  clean_lines: A CleansedLines instance containing the file.
  linenum: The number of the line to check.
  error: The function to call with any errors found.
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Alik/updraft/Updraft/scripts/cpplint.py" line="1141" bodyfile="C:/Users/Alik/updraft/Updraft/scripts/cpplint.py" bodystart="1141" bodyend="1178"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="C:/Users/Alik/updraft/Updraft/scripts/cpplint.py" line="1"/>
  </compounddef>
</doxygen>
